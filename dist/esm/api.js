/* tslint:disable */
/* eslint-disable */
/**
 * Infrahub-API
 * Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from './base';
export const CreateFirewallRulePayloadProtocolEnum = {
    Any: 'any',
    Ah: 'ah',
    Dccp: 'dccp',
    Egp: 'egp',
    Esp: 'esp',
    Gre: 'gre',
    Hopopt: 'hopopt',
    Icmp: 'icmp',
    Igmp: 'igmp',
    Ip: 'ip',
    Ipip: 'ipip',
    Ipv6Encap: 'ipv6-encap',
    Ipv6Frag: 'ipv6-frag',
    Ipv6Icmp: 'ipv6-icmp',
    Icmpv6: 'icmpv6',
    Ipv6Nonxt: 'ipv6-nonxt',
    Ipv6Opts: 'ipv6-opts',
    Ipv6Route: 'ipv6-route',
    Ospf: 'ospf',
    Pgm: 'pgm',
    Rsvp: 'rsvp',
    Sctp: 'sctp',
    Tcp: 'tcp',
    Udp: 'udp',
    Udplite: 'udplite',
    Vrrp: 'vrrp'
};
export const CreateSecurityRulePayloadProtocolEnum = {
    Any: 'any',
    Ah: 'ah',
    Dccp: 'dccp',
    Egp: 'egp',
    Esp: 'esp',
    Gre: 'gre',
    Hopopt: 'hopopt',
    Icmp: 'icmp',
    Igmp: 'igmp',
    Ip: 'ip',
    Ipip: 'ipip',
    Ipv6Encap: 'ipv6-encap',
    Ipv6Frag: 'ipv6-frag',
    Ipv6Icmp: 'ipv6-icmp',
    Icmpv6: 'icmpv6',
    Ipv6Nonxt: 'ipv6-nonxt',
    Ipv6Opts: 'ipv6-opts',
    Ipv6Route: 'ipv6-route',
    Ospf: 'ospf',
    Pgm: 'pgm',
    Rsvp: 'rsvp',
    Sctp: 'sctp',
    Tcp: 'tcp',
    Udp: 'udp',
    Udplite: 'udplite',
    Vrrp: 'vrrp'
};
export const ExportBillingDataRequestResourceTypeEnum = {
    VirtualMachine: 'virtual_machine',
    Volume: 'volume'
};
/**
 * AliveApi - axios parameter creator
 * @export
 */
export const AliveApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary GET: Alive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlive: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/billing/alive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AliveApi - functional programming interface
 * @export
 */
export const AliveApiFp = function (configuration) {
    const localVarAxiosParamCreator = AliveApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary GET: Alive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlive(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAlive(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['AliveApi.getAlive']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * AliveApi - factory interface
 * @export
 */
export const AliveApiFactory = function (configuration, basePath, axios) {
    const localVarFp = AliveApiFp(configuration);
    return {
        /**
         *
         * @summary GET: Alive
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlive(options) {
            return localVarFp.getAlive(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AliveApi - object-oriented interface
 * @export
 * @class AliveApi
 * @extends {BaseAPI}
 */
export class AliveApi extends BaseAPI {
    /**
     *
     * @summary GET: Alive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliveApi
     */
    getAlive(options) {
        return AliveApiFp(this.configuration).getAlive(options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * ApiKeyApi - axios parameter creator
 * @export
 */
export const ApiKeyApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Delete a specified API key by including the ID of the API key in the path.
         * @summary Delete API Key
         * @param {number} apiKeyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiKey: (apiKeyId_1, ...args_1) => __awaiter(this, [apiKeyId_1, ...args_1], void 0, function* (apiKeyId, options = {}) {
            // verify required parameter 'apiKeyId' is not null or undefined
            assertParamExists('deleteApiKey', 'apiKeyId', apiKeyId);
            const localVarPath = `/api-key/{api_key_id}`
                .replace(`{${"api_key_id"}}`, encodeURIComponent(String(apiKeyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Generates your API key, providing access to the Infrahub APIs. For further details on API keys, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/api-key/generate-api-key).
         * @summary Generate API Key
         * @param {GenerateUpdateApiKeyPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateApiKey: (payload_1, ...args_1) => __awaiter(this, [payload_1, ...args_1], void 0, function* (payload, options = {}) {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('generateApiKey', 'payload', payload);
            const localVarPath = `/api-key/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieves your API keys, granting access to the Infrahub APIs. For further details on API keys, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/api-key/retrieve-api-key).
         * @summary Retrieve API Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiKeys: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/api-key`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates the name and optionally the description of a specified API key. Include the ID of the API key in the path and the new name and optional description in the body of the request.
         * @summary Update API Key
         * @param {number} apiKeyId
         * @param {GenerateUpdateApiKeyPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApiKey: (apiKeyId_1, payload_1, ...args_1) => __awaiter(this, [apiKeyId_1, payload_1, ...args_1], void 0, function* (apiKeyId, payload, options = {}) {
            // verify required parameter 'apiKeyId' is not null or undefined
            assertParamExists('updateApiKey', 'apiKeyId', apiKeyId);
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('updateApiKey', 'payload', payload);
            const localVarPath = `/api-key/{api_key_id}`
                .replace(`{${"api_key_id"}}`, encodeURIComponent(String(apiKeyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ApiKeyApi - functional programming interface
 * @export
 */
export const ApiKeyApiFp = function (configuration) {
    const localVarAxiosParamCreator = ApiKeyApiAxiosParamCreator(configuration);
    return {
        /**
         * Delete a specified API key by including the ID of the API key in the path.
         * @summary Delete API Key
         * @param {number} apiKeyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiKey(apiKeyId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteApiKey(apiKeyId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ApiKeyApi.deleteApiKey']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Generates your API key, providing access to the Infrahub APIs. For further details on API keys, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/api-key/generate-api-key).
         * @summary Generate API Key
         * @param {GenerateUpdateApiKeyPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateApiKey(payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.generateApiKey(payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ApiKeyApi.generateApiKey']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieves your API keys, granting access to the Infrahub APIs. For further details on API keys, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/api-key/retrieve-api-key).
         * @summary Retrieve API Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiKeys(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveApiKeys(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ApiKeyApi.retrieveApiKeys']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Updates the name and optionally the description of a specified API key. Include the ID of the API key in the path and the new name and optional description in the body of the request.
         * @summary Update API Key
         * @param {number} apiKeyId
         * @param {GenerateUpdateApiKeyPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApiKey(apiKeyId, payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateApiKey(apiKeyId, payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ApiKeyApi.updateApiKey']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * ApiKeyApi - factory interface
 * @export
 */
export const ApiKeyApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ApiKeyApiFp(configuration);
    return {
        /**
         * Delete a specified API key by including the ID of the API key in the path.
         * @summary Delete API Key
         * @param {number} apiKeyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiKey(apiKeyId, options) {
            return localVarFp.deleteApiKey(apiKeyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates your API key, providing access to the Infrahub APIs. For further details on API keys, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/api-key/generate-api-key).
         * @summary Generate API Key
         * @param {GenerateUpdateApiKeyPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateApiKey(payload, options) {
            return localVarFp.generateApiKey(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves your API keys, granting access to the Infrahub APIs. For further details on API keys, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/api-key/retrieve-api-key).
         * @summary Retrieve API Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveApiKeys(options) {
            return localVarFp.retrieveApiKeys(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the name and optionally the description of a specified API key. Include the ID of the API key in the path and the new name and optional description in the body of the request.
         * @summary Update API Key
         * @param {number} apiKeyId
         * @param {GenerateUpdateApiKeyPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApiKey(apiKeyId, payload, options) {
            return localVarFp.updateApiKey(apiKeyId, payload, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ApiKeyApi - object-oriented interface
 * @export
 * @class ApiKeyApi
 * @extends {BaseAPI}
 */
export class ApiKeyApi extends BaseAPI {
    /**
     * Delete a specified API key by including the ID of the API key in the path.
     * @summary Delete API Key
     * @param {number} apiKeyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApi
     */
    deleteApiKey(apiKeyId, options) {
        return ApiKeyApiFp(this.configuration).deleteApiKey(apiKeyId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Generates your API key, providing access to the Infrahub APIs. For further details on API keys, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/api-key/generate-api-key).
     * @summary Generate API Key
     * @param {GenerateUpdateApiKeyPayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApi
     */
    generateApiKey(payload, options) {
        return ApiKeyApiFp(this.configuration).generateApiKey(payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves your API keys, granting access to the Infrahub APIs. For further details on API keys, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/api-key/retrieve-api-key).
     * @summary Retrieve API Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApi
     */
    retrieveApiKeys(options) {
        return ApiKeyApiFp(this.configuration).retrieveApiKeys(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the name and optionally the description of a specified API key. Include the ID of the API key in the path and the new name and optional description in the body of the request.
     * @summary Update API Key
     * @param {number} apiKeyId
     * @param {GenerateUpdateApiKeyPayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApi
     */
    updateApiKey(apiKeyId, payload, options) {
        return ApiKeyApiFp(this.configuration).updateApiKey(apiKeyId, payload, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * AssigningMemberRoleApi - axios parameter creator
 * @export
 */
export const AssigningMemberRoleApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Assigns a specific RBAC role to a user within your organization, granting them access to the resource actions permitted by the role. Provide the user ID in the path and the role ID in the request body. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/manage-member-roles/assign-rbac-role).
         * @summary Assign RBAC Role
         * @param {number} userId
         * @param {AssignRbacRolePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignRbacRole: (userId_1, payload_1, ...args_1) => __awaiter(this, [userId_1, payload_1, ...args_1], void 0, function* (userId, payload, options = {}) {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('assignRbacRole', 'userId', userId);
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('assignRbacRole', 'payload', payload);
            const localVarPath = `/auth/users/{user_id}/assign-roles`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Removes an RBAC role from a user within your organization, revoking the resource permissions they had access to. Provide the user ID in the path. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/manage-member-roles/revoke-rbac-role).
         * @summary Remove RBAC Role From User
         * @param {number} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRbacRoleFromUser: (userId_1, ...args_1) => __awaiter(this, [userId_1, ...args_1], void 0, function* (userId, options = {}) {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeRbacRoleFromUser', 'userId', userId);
            const localVarPath = `/auth/users/{user_id}/roles`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AssigningMemberRoleApi - functional programming interface
 * @export
 */
export const AssigningMemberRoleApiFp = function (configuration) {
    const localVarAxiosParamCreator = AssigningMemberRoleApiAxiosParamCreator(configuration);
    return {
        /**
         * Assigns a specific RBAC role to a user within your organization, granting them access to the resource actions permitted by the role. Provide the user ID in the path and the role ID in the request body. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/manage-member-roles/assign-rbac-role).
         * @summary Assign RBAC Role
         * @param {number} userId
         * @param {AssignRbacRolePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignRbacRole(userId, payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.assignRbacRole(userId, payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['AssigningMemberRoleApi.assignRbacRole']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Removes an RBAC role from a user within your organization, revoking the resource permissions they had access to. Provide the user ID in the path. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/manage-member-roles/revoke-rbac-role).
         * @summary Remove RBAC Role From User
         * @param {number} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRbacRoleFromUser(userId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeRbacRoleFromUser(userId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['AssigningMemberRoleApi.removeRbacRoleFromUser']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * AssigningMemberRoleApi - factory interface
 * @export
 */
export const AssigningMemberRoleApiFactory = function (configuration, basePath, axios) {
    const localVarFp = AssigningMemberRoleApiFp(configuration);
    return {
        /**
         * Assigns a specific RBAC role to a user within your organization, granting them access to the resource actions permitted by the role. Provide the user ID in the path and the role ID in the request body. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/manage-member-roles/assign-rbac-role).
         * @summary Assign RBAC Role
         * @param {number} userId
         * @param {AssignRbacRolePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignRbacRole(userId, payload, options) {
            return localVarFp.assignRbacRole(userId, payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes an RBAC role from a user within your organization, revoking the resource permissions they had access to. Provide the user ID in the path. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/manage-member-roles/revoke-rbac-role).
         * @summary Remove RBAC Role From User
         * @param {number} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRbacRoleFromUser(userId, options) {
            return localVarFp.removeRbacRoleFromUser(userId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AssigningMemberRoleApi - object-oriented interface
 * @export
 * @class AssigningMemberRoleApi
 * @extends {BaseAPI}
 */
export class AssigningMemberRoleApi extends BaseAPI {
    /**
     * Assigns a specific RBAC role to a user within your organization, granting them access to the resource actions permitted by the role. Provide the user ID in the path and the role ID in the request body. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/manage-member-roles/assign-rbac-role).
     * @summary Assign RBAC Role
     * @param {number} userId
     * @param {AssignRbacRolePayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssigningMemberRoleApi
     */
    assignRbacRole(userId, payload, options) {
        return AssigningMemberRoleApiFp(this.configuration).assignRbacRole(userId, payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Removes an RBAC role from a user within your organization, revoking the resource permissions they had access to. Provide the user ID in the path. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/manage-member-roles/revoke-rbac-role).
     * @summary Remove RBAC Role From User
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssigningMemberRoleApi
     */
    removeRbacRoleFromUser(userId, options) {
        return AssigningMemberRoleApiFp(this.configuration).removeRbacRoleFromUser(userId, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Retrieves detailed information about the currently authenticated user. For additional information, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/auth).
         * @summary Retrieve Authenticated User Details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAuthenticatedUserDetails: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration);
    return {
        /**
         * Retrieves detailed information about the currently authenticated user. For additional information, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/auth).
         * @summary Retrieve Authenticated User Details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAuthenticatedUserDetails(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveAuthenticatedUserDetails(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['AuthApi.retrieveAuthenticatedUserDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration, basePath, axios) {
    const localVarFp = AuthApiFp(configuration);
    return {
        /**
         * Retrieves detailed information about the currently authenticated user. For additional information, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/auth).
         * @summary Retrieve Authenticated User Details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAuthenticatedUserDetails(options) {
            return localVarFp.retrieveAuthenticatedUserDetails(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Retrieves detailed information about the currently authenticated user. For additional information, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/auth).
     * @summary Retrieve Authenticated User Details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    retrieveAuthenticatedUserDetails(options) {
        return AuthApiFp(this.configuration).retrieveAuthenticatedUserDetails(options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * BillingApi - axios parameter creator
 * @export
 */
export const BillingApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Retrieve all the notification thresholds for an organization.
         * @summary GET: All Thresholds for Organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllThresholdsForOrganization: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/billing/billing/threshold`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve active billing metrics for the organization\'s resources, including pricing, uptime, and total cost. Returns usage details for each active resource by defualt(`deleted=false` will return active resources). Additionally, adding `deleted=true` in query parameter will return inactive resources. For additional information on view usage costs for all resources, [**click here**](https://infrahub-doc.nexgencloud.com/docs/billing-and-payment/billing-features#view-usage-costs-for-all-resources)
         * @summary GET: Billing usage
         * @param {string} [deleted] &#x60;true&#x60; will return inactive resources and &#x60;false&#x60; will return active resources. By defualt(&#x60;deleted&#x3D;false&#x60;)
         * @param {string} [environment] Filter resources by environment ID or Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingUsage: (deleted_1, environment_1, ...args_1) => __awaiter(this, [deleted_1, environment_1, ...args_1], void 0, function* (deleted, environment, options = {}) {
            const localVarPath = `/billing/billing/usage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (deleted !== undefined) {
                localVarQueryParameter['deleted'] = deleted;
            }
            if (environment !== undefined) {
                localVarQueryParameter['environment'] = environment;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve the previous day\'s costs for instances, volumes, and clusters. Returns a breakdown of the costs and the total cost for the last day. For additional information on Retrieve Previous Day Usage Costs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/billing-resources/last-day-usage/)
         * @summary GET: Last Day Cost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLastDayCost: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/billing/billing/last-day-cost`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * User will recieve billing history for the specified billing cycle. This data will include \'incurred_bill\', \'non_discounted_bill\', \'vm_cost\', \'volume_cost\'
         * @summary Retrieve Billing History for a specific Billing Cycle
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [graph] Set this value to \&quot;true\&quot; for getting graph value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingHistoryForASpecificBillingCycle: (startDate_1, endDate_1, graph_1, ...args_1) => __awaiter(this, [startDate_1, endDate_1, graph_1, ...args_1], void 0, function* (startDate, endDate, graph, options = {}) {
            const localVarPath = `/billing/billing/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }
            if (graph !== undefined) {
                localVarQueryParameter['graph'] = graph;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve billing history of a specific Snapshot for the specified billing cycle. This data will include \'resource_name\', \'infrahub_id\', \'price_per_hour\', \'incurred_bill\', \'usage_time\', \'non_discounted_price_per_hour\', \'non_discounted_bill\'.
         * @summary Retrieve Billing History of a Specific Snapshot for a specific Billing Cycle
         * @param {number} snapshotId
         * @param {string} [startDate] Datetime should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Datetime should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycle: (snapshotId_1, startDate_1, endDate_1, ...args_1) => __awaiter(this, [snapshotId_1, startDate_1, endDate_1, ...args_1], void 0, function* (snapshotId, startDate, endDate, options = {}) {
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('retrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycle', 'snapshotId', snapshotId);
            const localVarPath = `/billing/billing/history/snapshot/{snapshot_id}`
                .replace(`{${"snapshot_id"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * User will recieve billing history of a specific Virtual Machine for the specified billing cycle. This data will include \'resource_name\', \'infrahub_id\', \'price_per_hour\', \'non_discounted_price_per_hour\', \'incurred_bill\', \'non_discounted_bill\', \'usage_time\', \'usage_time_ACTIVE\', \'usage_time_SHUTOFF\', \'usage_time_HIBERNATED\'
         * @summary Retrieve Billing History of a Specific Virtual Machine for a specific Billing Cycle
         * @param {number} vmId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycle: (vmId_1, startDate_1, endDate_1, ...args_1) => __awaiter(this, [vmId_1, startDate_1, endDate_1, ...args_1], void 0, function* (vmId, startDate, endDate, options = {}) {
            // verify required parameter 'vmId' is not null or undefined
            assertParamExists('retrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycle', 'vmId', vmId);
            const localVarPath = `/billing/billing/history/virtual-machine/{vm_id}`
                .replace(`{${"vm_id"}}`, encodeURIComponent(String(vmId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve billing history of a specific Volume for the specified billing cycle. This data will include \'resource_name\', \'infrahub_id\', \'price_per_hour\', \'incurred_bill\', \'usage_time\', \'non_discounted_price_per_hour\', \'non_discounted_bill\'.
         * @summary Retrieve Billing History of a Specific Volume for a specific Billing Cycle
         * @param {number} volumeId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycle: (volumeId_1, startDate_1, endDate_1, ...args_1) => __awaiter(this, [volumeId_1, startDate_1, endDate_1, ...args_1], void 0, function* (volumeId, startDate, endDate, options = {}) {
            // verify required parameter 'volumeId' is not null or undefined
            assertParamExists('retrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycle', 'volumeId', volumeId);
            const localVarPath = `/billing/billing/history/volume/{volume_id}`
                .replace(`{${"volume_id"}}`, encodeURIComponent(String(volumeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * User will recieve billing history of contracts for the specified billing cycle. This data will include \'description\', gpu_type\',\'infrahub_id\', \'status\', \'incurred_bill\', \'price_per_hour\'
         * @summary Retrieve Billing History of Contract for a specific Billing Cycle
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [search] Search by Contract \&quot;Description\&quot; or \&quot;ID\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingHistoryOfContractForASpecificBillingCycle: (startDate_1, endDate_1, search_1, ...args_1) => __awaiter(this, [startDate_1, endDate_1, search_1, ...args_1], void 0, function* (startDate, endDate, search, options = {}) {
            const localVarPath = `/billing/billing/history/contract`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * User will recieve billing history of snapshots for thespecified billing cycle. This data will include \'resource_name\', \'infrahub_id\', \'status\', \'incurred_bill\', \'usage_time\', \'price_per_hour\'
         * @summary Retrieve Billing History of Snapshot for a specific Billing Cycle
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [search] Search by Volume \&quot;Name\&quot; or \&quot;ID\&quot;
         * @param {string} [page] Page number
         * @param {string} [perPage] Number of items to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingHistoryOfSnapshotForASpecificBillingCycle: (startDate_1, endDate_1, search_1, page_1, perPage_1, ...args_1) => __awaiter(this, [startDate_1, endDate_1, search_1, page_1, perPage_1, ...args_1], void 0, function* (startDate, endDate, search, page, perPage, options = {}) {
            const localVarPath = `/billing/billing/history/snapshot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * User will recieve billing history of virtual machine for the specified billing cycle. This data will include \'resource_name\', \'infrahub_id\', \'status\', \'incurred_bill\', \'usage_time\', \'price_per_hour\'
         * @summary Retrieve Billing History of Virtual Machine for a specific Billing Cycle
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [search] Search by Virtual Machine \&quot;Name\&quot; or \&quot;ID\&quot;
         * @param {string} [perPage] Number of items to return per page
         * @param {string} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingHistoryOfVirtualMachineForASpecificBillingCycle: (startDate_1, endDate_1, search_1, perPage_1, page_1, ...args_1) => __awaiter(this, [startDate_1, endDate_1, search_1, perPage_1, page_1, ...args_1], void 0, function* (startDate, endDate, search, perPage, page, options = {}) {
            const localVarPath = `/billing/billing/history/virtual-machine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * User will recieve billing history of volumes for thespecified billing cycle. This data will include \'resource_name\', \'infrahub_id\', \'status\', \'incurred_bill\', \'usage_time\', \'price_per_hour\'
         * @summary Retrieve Billing History of Volume for a specific Billing Cycle
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [search] Search by Volume \&quot;Name\&quot; or \&quot;ID\&quot;
         * @param {string} [perPage] Number of items to return per page
         * @param {string} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingHistoryOfVolumeForASpecificBillingCycle: (startDate_1, endDate_1, search_1, perPage_1, page_1, ...args_1) => __awaiter(this, [startDate_1, endDate_1, search_1, perPage_1, page_1, ...args_1], void 0, function* (startDate, endDate, search, perPage, page, options = {}) {
            const localVarPath = `/billing/billing/history/volume`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * User will recieve hourly cost datapoints for a Snapshot for a specified billing cycle. This data will include \'incurred_bill\' graph datapoints.
         * @summary Retrieve hourly cost datapoints of a Specific Snapshot for a specific billing cycle
         * @param {number} snapshotId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycle: (snapshotId_1, startDate_1, endDate_1, ...args_1) => __awaiter(this, [snapshotId_1, startDate_1, endDate_1, ...args_1], void 0, function* (snapshotId, startDate, endDate, options = {}) {
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('retrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycle', 'snapshotId', snapshotId);
            const localVarPath = `/billing/billing/history/snapshot/{snapshot_id}/graph`
                .replace(`{${"snapshot_id"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * User will recieve hourly cost datapoints for a VM for a specified billing cycle. This data will include \'incurred_bill\' graph datapoints.
         * @summary Retrieve hourly cost datapoints of a Specific Virtual Machine for a specific billing cycle
         * @param {number} vmId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycle: (vmId_1, startDate_1, endDate_1, ...args_1) => __awaiter(this, [vmId_1, startDate_1, endDate_1, ...args_1], void 0, function* (vmId, startDate, endDate, options = {}) {
            // verify required parameter 'vmId' is not null or undefined
            assertParamExists('retrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycle', 'vmId', vmId);
            const localVarPath = `/billing/billing/history/virtual-machine/{vm_id}/graph`
                .replace(`{${"vm_id"}}`, encodeURIComponent(String(vmId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * User will recieve hourly cost datapoints for a Volume for a specified billing cycle. This data will include \'incurred_bill\' graph datapoints.
         * @summary Retrieve hourly cost datapoints of a Specific Volume for a specific billing cycle
         * @param {number} volumeId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycle: (volumeId_1, startDate_1, endDate_1, ...args_1) => __awaiter(this, [volumeId_1, startDate_1, endDate_1, ...args_1], void 0, function* (volumeId, startDate, endDate, options = {}) {
            // verify required parameter 'volumeId' is not null or undefined
            assertParamExists('retrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycle', 'volumeId', volumeId);
            const localVarPath = `/billing/billing/history/volume/{volume_id}/graph`
                .replace(`{${"volume_id"}}`, encodeURIComponent(String(volumeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * User will recieve sub-resources historical cost datapoints for a VM sub resources for a specified billing cycle. This data will include \'incurred_bill\' graph datapoints. Machine sub resources for a specific billing cycle
         * @summary Retrieve Sub-Resources Historical Cost datapoints of a Virtual
         * @param {number} vmId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSubResourcesHistoricalCostDatapointsOfAVirtual: (vmId_1, startDate_1, endDate_1, ...args_1) => __awaiter(this, [vmId_1, startDate_1, endDate_1, ...args_1], void 0, function* (vmId, startDate, endDate, options = {}) {
            // verify required parameter 'vmId' is not null or undefined
            assertParamExists('retrieveSubResourcesHistoricalCostDatapointsOfAVirtual', 'vmId', vmId);
            const localVarPath = `/billing/billing/virtual-machine/{vm_id}/sub-resource/graph`
                .replace(`{${"vm_id"}}`, encodeURIComponent(String(vmId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * User will get total costs and non_discount costs of sub resources on a specific Virtual Machine for the specified billing cycle. on a Specific VM for the Specified Billing Cycle
         * @summary Retrieve Total Costs and Non Discount Costs for Sub Resources
         * @param {number} vmId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTotalCostsAndNonDiscountCostsForSubResources: (vmId_1, startDate_1, endDate_1, ...args_1) => __awaiter(this, [vmId_1, startDate_1, endDate_1, ...args_1], void 0, function* (vmId, startDate, endDate, options = {}) {
            // verify required parameter 'vmId' is not null or undefined
            assertParamExists('retrieveTotalCostsAndNonDiscountCostsForSubResources', 'vmId', vmId);
            const localVarPath = `/billing/billing/virtual-machine/{vm_id}/sub-resource`
                .replace(`{${"vm_id"}}`, encodeURIComponent(String(vmId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * User will receive vm billing events history
         * @summary Retrieve VM billing events history
         * @param {number} vmId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveVmBillingEventsHistory: (vmId_1, startDate_1, endDate_1, ...args_1) => __awaiter(this, [vmId_1, startDate_1, endDate_1, ...args_1], void 0, function* (vmId, startDate, endDate, options = {}) {
            // verify required parameter 'vmId' is not null or undefined
            assertParamExists('retrieveVmBillingEventsHistory', 'vmId', vmId);
            const localVarPath = `/billing/billing/virtual-machine/{vm_id}/billing-events`
                .replace(`{${"vm_id"}}`, encodeURIComponent(String(vmId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * User will receive volume billing events history
         * @summary Retrieve Volume billing events history
         * @param {number} volumeId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveVolumeBillingEventsHistory: (volumeId_1, startDate_1, endDate_1, ...args_1) => __awaiter(this, [volumeId_1, startDate_1, endDate_1, ...args_1], void 0, function* (volumeId, startDate, endDate, options = {}) {
            // verify required parameter 'volumeId' is not null or undefined
            assertParamExists('retrieveVolumeBillingEventsHistory', 'volumeId', volumeId);
            const localVarPath = `/billing/billing/volume/{volume_id}/billing-events`
                .replace(`{${"volume_id"}}`, encodeURIComponent(String(volumeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * By default, you are subscribed to all the threshold values and you will be receiving the email notification for these default thresholds values. `false` indicates that the user will no longer receive notifications for this specific threshold, whereas `true` signifies that the user will receive notification emails.
         * @summary Update: Subscribe or Unsubscribe Notification Threshold
         * @param {number} thresholdId
         * @param {Subscribeorunsubscribeupdatepayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscribeOrUnsubscribeNotificationThreshold: (thresholdId_1, payload_1, ...args_1) => __awaiter(this, [thresholdId_1, payload_1, ...args_1], void 0, function* (thresholdId, payload, options = {}) {
            // verify required parameter 'thresholdId' is not null or undefined
            assertParamExists('updateSubscribeOrUnsubscribeNotificationThreshold', 'thresholdId', thresholdId);
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('updateSubscribeOrUnsubscribeNotificationThreshold', 'payload', payload);
            const localVarPath = `/billing/billing/threshold/{threshold_id}`
                .replace(`{${"threshold_id"}}`, encodeURIComponent(String(thresholdId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * BillingApi - functional programming interface
 * @export
 */
export const BillingApiFp = function (configuration) {
    const localVarAxiosParamCreator = BillingApiAxiosParamCreator(configuration);
    return {
        /**
         * Retrieve all the notification thresholds for an organization.
         * @summary GET: All Thresholds for Organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllThresholdsForOrganization(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getAllThresholdsForOrganization(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BillingApi.getAllThresholdsForOrganization']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieve active billing metrics for the organization\'s resources, including pricing, uptime, and total cost. Returns usage details for each active resource by defualt(`deleted=false` will return active resources). Additionally, adding `deleted=true` in query parameter will return inactive resources. For additional information on view usage costs for all resources, [**click here**](https://infrahub-doc.nexgencloud.com/docs/billing-and-payment/billing-features#view-usage-costs-for-all-resources)
         * @summary GET: Billing usage
         * @param {string} [deleted] &#x60;true&#x60; will return inactive resources and &#x60;false&#x60; will return active resources. By defualt(&#x60;deleted&#x3D;false&#x60;)
         * @param {string} [environment] Filter resources by environment ID or Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingUsage(deleted, environment, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getBillingUsage(deleted, environment, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BillingApi.getBillingUsage']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieve the previous day\'s costs for instances, volumes, and clusters. Returns a breakdown of the costs and the total cost for the last day. For additional information on Retrieve Previous Day Usage Costs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/billing-resources/last-day-usage/)
         * @summary GET: Last Day Cost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLastDayCost(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getLastDayCost(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BillingApi.getLastDayCost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * User will recieve billing history for the specified billing cycle. This data will include \'incurred_bill\', \'non_discounted_bill\', \'vm_cost\', \'volume_cost\'
         * @summary Retrieve Billing History for a specific Billing Cycle
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [graph] Set this value to \&quot;true\&quot; for getting graph value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingHistoryForASpecificBillingCycle(startDate, endDate, graph, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveBillingHistoryForASpecificBillingCycle(startDate, endDate, graph, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BillingApi.retrieveBillingHistoryForASpecificBillingCycle']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieve billing history of a specific Snapshot for the specified billing cycle. This data will include \'resource_name\', \'infrahub_id\', \'price_per_hour\', \'incurred_bill\', \'usage_time\', \'non_discounted_price_per_hour\', \'non_discounted_bill\'.
         * @summary Retrieve Billing History of a Specific Snapshot for a specific Billing Cycle
         * @param {number} snapshotId
         * @param {string} [startDate] Datetime should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Datetime should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycle(snapshotId, startDate, endDate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycle(snapshotId, startDate, endDate, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BillingApi.retrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycle']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * User will recieve billing history of a specific Virtual Machine for the specified billing cycle. This data will include \'resource_name\', \'infrahub_id\', \'price_per_hour\', \'non_discounted_price_per_hour\', \'incurred_bill\', \'non_discounted_bill\', \'usage_time\', \'usage_time_ACTIVE\', \'usage_time_SHUTOFF\', \'usage_time_HIBERNATED\'
         * @summary Retrieve Billing History of a Specific Virtual Machine for a specific Billing Cycle
         * @param {number} vmId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycle(vmId, startDate, endDate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycle(vmId, startDate, endDate, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BillingApi.retrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycle']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieve billing history of a specific Volume for the specified billing cycle. This data will include \'resource_name\', \'infrahub_id\', \'price_per_hour\', \'incurred_bill\', \'usage_time\', \'non_discounted_price_per_hour\', \'non_discounted_bill\'.
         * @summary Retrieve Billing History of a Specific Volume for a specific Billing Cycle
         * @param {number} volumeId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycle(volumeId, startDate, endDate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycle(volumeId, startDate, endDate, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BillingApi.retrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycle']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * User will recieve billing history of contracts for the specified billing cycle. This data will include \'description\', gpu_type\',\'infrahub_id\', \'status\', \'incurred_bill\', \'price_per_hour\'
         * @summary Retrieve Billing History of Contract for a specific Billing Cycle
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [search] Search by Contract \&quot;Description\&quot; or \&quot;ID\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingHistoryOfContractForASpecificBillingCycle(startDate, endDate, search, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveBillingHistoryOfContractForASpecificBillingCycle(startDate, endDate, search, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BillingApi.retrieveBillingHistoryOfContractForASpecificBillingCycle']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * User will recieve billing history of snapshots for thespecified billing cycle. This data will include \'resource_name\', \'infrahub_id\', \'status\', \'incurred_bill\', \'usage_time\', \'price_per_hour\'
         * @summary Retrieve Billing History of Snapshot for a specific Billing Cycle
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [search] Search by Volume \&quot;Name\&quot; or \&quot;ID\&quot;
         * @param {string} [page] Page number
         * @param {string} [perPage] Number of items to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingHistoryOfSnapshotForASpecificBillingCycle(startDate, endDate, search, page, perPage, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveBillingHistoryOfSnapshotForASpecificBillingCycle(startDate, endDate, search, page, perPage, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BillingApi.retrieveBillingHistoryOfSnapshotForASpecificBillingCycle']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * User will recieve billing history of virtual machine for the specified billing cycle. This data will include \'resource_name\', \'infrahub_id\', \'status\', \'incurred_bill\', \'usage_time\', \'price_per_hour\'
         * @summary Retrieve Billing History of Virtual Machine for a specific Billing Cycle
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [search] Search by Virtual Machine \&quot;Name\&quot; or \&quot;ID\&quot;
         * @param {string} [perPage] Number of items to return per page
         * @param {string} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingHistoryOfVirtualMachineForASpecificBillingCycle(startDate, endDate, search, perPage, page, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveBillingHistoryOfVirtualMachineForASpecificBillingCycle(startDate, endDate, search, perPage, page, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BillingApi.retrieveBillingHistoryOfVirtualMachineForASpecificBillingCycle']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * User will recieve billing history of volumes for thespecified billing cycle. This data will include \'resource_name\', \'infrahub_id\', \'status\', \'incurred_bill\', \'usage_time\', \'price_per_hour\'
         * @summary Retrieve Billing History of Volume for a specific Billing Cycle
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [search] Search by Volume \&quot;Name\&quot; or \&quot;ID\&quot;
         * @param {string} [perPage] Number of items to return per page
         * @param {string} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingHistoryOfVolumeForASpecificBillingCycle(startDate, endDate, search, perPage, page, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveBillingHistoryOfVolumeForASpecificBillingCycle(startDate, endDate, search, perPage, page, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BillingApi.retrieveBillingHistoryOfVolumeForASpecificBillingCycle']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * User will recieve hourly cost datapoints for a Snapshot for a specified billing cycle. This data will include \'incurred_bill\' graph datapoints.
         * @summary Retrieve hourly cost datapoints of a Specific Snapshot for a specific billing cycle
         * @param {number} snapshotId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycle(snapshotId, startDate, endDate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycle(snapshotId, startDate, endDate, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BillingApi.retrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycle']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * User will recieve hourly cost datapoints for a VM for a specified billing cycle. This data will include \'incurred_bill\' graph datapoints.
         * @summary Retrieve hourly cost datapoints of a Specific Virtual Machine for a specific billing cycle
         * @param {number} vmId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycle(vmId, startDate, endDate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycle(vmId, startDate, endDate, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BillingApi.retrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycle']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * User will recieve hourly cost datapoints for a Volume for a specified billing cycle. This data will include \'incurred_bill\' graph datapoints.
         * @summary Retrieve hourly cost datapoints of a Specific Volume for a specific billing cycle
         * @param {number} volumeId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycle(volumeId, startDate, endDate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycle(volumeId, startDate, endDate, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BillingApi.retrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycle']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * User will recieve sub-resources historical cost datapoints for a VM sub resources for a specified billing cycle. This data will include \'incurred_bill\' graph datapoints. Machine sub resources for a specific billing cycle
         * @summary Retrieve Sub-Resources Historical Cost datapoints of a Virtual
         * @param {number} vmId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSubResourcesHistoricalCostDatapointsOfAVirtual(vmId, startDate, endDate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveSubResourcesHistoricalCostDatapointsOfAVirtual(vmId, startDate, endDate, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BillingApi.retrieveSubResourcesHistoricalCostDatapointsOfAVirtual']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * User will get total costs and non_discount costs of sub resources on a specific Virtual Machine for the specified billing cycle. on a Specific VM for the Specified Billing Cycle
         * @summary Retrieve Total Costs and Non Discount Costs for Sub Resources
         * @param {number} vmId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTotalCostsAndNonDiscountCostsForSubResources(vmId, startDate, endDate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveTotalCostsAndNonDiscountCostsForSubResources(vmId, startDate, endDate, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BillingApi.retrieveTotalCostsAndNonDiscountCostsForSubResources']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * User will receive vm billing events history
         * @summary Retrieve VM billing events history
         * @param {number} vmId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveVmBillingEventsHistory(vmId, startDate, endDate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveVmBillingEventsHistory(vmId, startDate, endDate, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BillingApi.retrieveVmBillingEventsHistory']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * User will receive volume billing events history
         * @summary Retrieve Volume billing events history
         * @param {number} volumeId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveVolumeBillingEventsHistory(volumeId, startDate, endDate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveVolumeBillingEventsHistory(volumeId, startDate, endDate, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BillingApi.retrieveVolumeBillingEventsHistory']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * By default, you are subscribed to all the threshold values and you will be receiving the email notification for these default thresholds values. `false` indicates that the user will no longer receive notifications for this specific threshold, whereas `true` signifies that the user will receive notification emails.
         * @summary Update: Subscribe or Unsubscribe Notification Threshold
         * @param {number} thresholdId
         * @param {Subscribeorunsubscribeupdatepayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscribeOrUnsubscribeNotificationThreshold(thresholdId, payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateSubscribeOrUnsubscribeNotificationThreshold(thresholdId, payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BillingApi.updateSubscribeOrUnsubscribeNotificationThreshold']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * BillingApi - factory interface
 * @export
 */
export const BillingApiFactory = function (configuration, basePath, axios) {
    const localVarFp = BillingApiFp(configuration);
    return {
        /**
         * Retrieve all the notification thresholds for an organization.
         * @summary GET: All Thresholds for Organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllThresholdsForOrganization(options) {
            return localVarFp.getAllThresholdsForOrganization(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve active billing metrics for the organization\'s resources, including pricing, uptime, and total cost. Returns usage details for each active resource by defualt(`deleted=false` will return active resources). Additionally, adding `deleted=true` in query parameter will return inactive resources. For additional information on view usage costs for all resources, [**click here**](https://infrahub-doc.nexgencloud.com/docs/billing-and-payment/billing-features#view-usage-costs-for-all-resources)
         * @summary GET: Billing usage
         * @param {string} [deleted] &#x60;true&#x60; will return inactive resources and &#x60;false&#x60; will return active resources. By defualt(&#x60;deleted&#x3D;false&#x60;)
         * @param {string} [environment] Filter resources by environment ID or Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingUsage(deleted, environment, options) {
            return localVarFp.getBillingUsage(deleted, environment, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the previous day\'s costs for instances, volumes, and clusters. Returns a breakdown of the costs and the total cost for the last day. For additional information on Retrieve Previous Day Usage Costs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/billing-resources/last-day-usage/)
         * @summary GET: Last Day Cost
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLastDayCost(options) {
            return localVarFp.getLastDayCost(options).then((request) => request(axios, basePath));
        },
        /**
         * User will recieve billing history for the specified billing cycle. This data will include \'incurred_bill\', \'non_discounted_bill\', \'vm_cost\', \'volume_cost\'
         * @summary Retrieve Billing History for a specific Billing Cycle
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [graph] Set this value to \&quot;true\&quot; for getting graph value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingHistoryForASpecificBillingCycle(startDate, endDate, graph, options) {
            return localVarFp.retrieveBillingHistoryForASpecificBillingCycle(startDate, endDate, graph, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve billing history of a specific Snapshot for the specified billing cycle. This data will include \'resource_name\', \'infrahub_id\', \'price_per_hour\', \'incurred_bill\', \'usage_time\', \'non_discounted_price_per_hour\', \'non_discounted_bill\'.
         * @summary Retrieve Billing History of a Specific Snapshot for a specific Billing Cycle
         * @param {number} snapshotId
         * @param {string} [startDate] Datetime should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Datetime should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycle(snapshotId, startDate, endDate, options) {
            return localVarFp.retrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycle(snapshotId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * User will recieve billing history of a specific Virtual Machine for the specified billing cycle. This data will include \'resource_name\', \'infrahub_id\', \'price_per_hour\', \'non_discounted_price_per_hour\', \'incurred_bill\', \'non_discounted_bill\', \'usage_time\', \'usage_time_ACTIVE\', \'usage_time_SHUTOFF\', \'usage_time_HIBERNATED\'
         * @summary Retrieve Billing History of a Specific Virtual Machine for a specific Billing Cycle
         * @param {number} vmId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycle(vmId, startDate, endDate, options) {
            return localVarFp.retrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycle(vmId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve billing history of a specific Volume for the specified billing cycle. This data will include \'resource_name\', \'infrahub_id\', \'price_per_hour\', \'incurred_bill\', \'usage_time\', \'non_discounted_price_per_hour\', \'non_discounted_bill\'.
         * @summary Retrieve Billing History of a Specific Volume for a specific Billing Cycle
         * @param {number} volumeId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycle(volumeId, startDate, endDate, options) {
            return localVarFp.retrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycle(volumeId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * User will recieve billing history of contracts for the specified billing cycle. This data will include \'description\', gpu_type\',\'infrahub_id\', \'status\', \'incurred_bill\', \'price_per_hour\'
         * @summary Retrieve Billing History of Contract for a specific Billing Cycle
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [search] Search by Contract \&quot;Description\&quot; or \&quot;ID\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingHistoryOfContractForASpecificBillingCycle(startDate, endDate, search, options) {
            return localVarFp.retrieveBillingHistoryOfContractForASpecificBillingCycle(startDate, endDate, search, options).then((request) => request(axios, basePath));
        },
        /**
         * User will recieve billing history of snapshots for thespecified billing cycle. This data will include \'resource_name\', \'infrahub_id\', \'status\', \'incurred_bill\', \'usage_time\', \'price_per_hour\'
         * @summary Retrieve Billing History of Snapshot for a specific Billing Cycle
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [search] Search by Volume \&quot;Name\&quot; or \&quot;ID\&quot;
         * @param {string} [page] Page number
         * @param {string} [perPage] Number of items to return per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingHistoryOfSnapshotForASpecificBillingCycle(startDate, endDate, search, page, perPage, options) {
            return localVarFp.retrieveBillingHistoryOfSnapshotForASpecificBillingCycle(startDate, endDate, search, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * User will recieve billing history of virtual machine for the specified billing cycle. This data will include \'resource_name\', \'infrahub_id\', \'status\', \'incurred_bill\', \'usage_time\', \'price_per_hour\'
         * @summary Retrieve Billing History of Virtual Machine for a specific Billing Cycle
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [search] Search by Virtual Machine \&quot;Name\&quot; or \&quot;ID\&quot;
         * @param {string} [perPage] Number of items to return per page
         * @param {string} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingHistoryOfVirtualMachineForASpecificBillingCycle(startDate, endDate, search, perPage, page, options) {
            return localVarFp.retrieveBillingHistoryOfVirtualMachineForASpecificBillingCycle(startDate, endDate, search, perPage, page, options).then((request) => request(axios, basePath));
        },
        /**
         * User will recieve billing history of volumes for thespecified billing cycle. This data will include \'resource_name\', \'infrahub_id\', \'status\', \'incurred_bill\', \'usage_time\', \'price_per_hour\'
         * @summary Retrieve Billing History of Volume for a specific Billing Cycle
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [search] Search by Volume \&quot;Name\&quot; or \&quot;ID\&quot;
         * @param {string} [perPage] Number of items to return per page
         * @param {string} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingHistoryOfVolumeForASpecificBillingCycle(startDate, endDate, search, perPage, page, options) {
            return localVarFp.retrieveBillingHistoryOfVolumeForASpecificBillingCycle(startDate, endDate, search, perPage, page, options).then((request) => request(axios, basePath));
        },
        /**
         * User will recieve hourly cost datapoints for a Snapshot for a specified billing cycle. This data will include \'incurred_bill\' graph datapoints.
         * @summary Retrieve hourly cost datapoints of a Specific Snapshot for a specific billing cycle
         * @param {number} snapshotId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycle(snapshotId, startDate, endDate, options) {
            return localVarFp.retrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycle(snapshotId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * User will recieve hourly cost datapoints for a VM for a specified billing cycle. This data will include \'incurred_bill\' graph datapoints.
         * @summary Retrieve hourly cost datapoints of a Specific Virtual Machine for a specific billing cycle
         * @param {number} vmId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycle(vmId, startDate, endDate, options) {
            return localVarFp.retrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycle(vmId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * User will recieve hourly cost datapoints for a Volume for a specified billing cycle. This data will include \'incurred_bill\' graph datapoints.
         * @summary Retrieve hourly cost datapoints of a Specific Volume for a specific billing cycle
         * @param {number} volumeId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycle(volumeId, startDate, endDate, options) {
            return localVarFp.retrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycle(volumeId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * User will recieve sub-resources historical cost datapoints for a VM sub resources for a specified billing cycle. This data will include \'incurred_bill\' graph datapoints. Machine sub resources for a specific billing cycle
         * @summary Retrieve Sub-Resources Historical Cost datapoints of a Virtual
         * @param {number} vmId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveSubResourcesHistoricalCostDatapointsOfAVirtual(vmId, startDate, endDate, options) {
            return localVarFp.retrieveSubResourcesHistoricalCostDatapointsOfAVirtual(vmId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * User will get total costs and non_discount costs of sub resources on a specific Virtual Machine for the specified billing cycle. on a Specific VM for the Specified Billing Cycle
         * @summary Retrieve Total Costs and Non Discount Costs for Sub Resources
         * @param {number} vmId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTotalCostsAndNonDiscountCostsForSubResources(vmId, startDate, endDate, options) {
            return localVarFp.retrieveTotalCostsAndNonDiscountCostsForSubResources(vmId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * User will receive vm billing events history
         * @summary Retrieve VM billing events history
         * @param {number} vmId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveVmBillingEventsHistory(vmId, startDate, endDate, options) {
            return localVarFp.retrieveVmBillingEventsHistory(vmId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * User will receive volume billing events history
         * @summary Retrieve Volume billing events history
         * @param {number} volumeId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveVolumeBillingEventsHistory(volumeId, startDate, endDate, options) {
            return localVarFp.retrieveVolumeBillingEventsHistory(volumeId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * By default, you are subscribed to all the threshold values and you will be receiving the email notification for these default thresholds values. `false` indicates that the user will no longer receive notifications for this specific threshold, whereas `true` signifies that the user will receive notification emails.
         * @summary Update: Subscribe or Unsubscribe Notification Threshold
         * @param {number} thresholdId
         * @param {Subscribeorunsubscribeupdatepayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscribeOrUnsubscribeNotificationThreshold(thresholdId, payload, options) {
            return localVarFp.updateSubscribeOrUnsubscribeNotificationThreshold(thresholdId, payload, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * BillingApi - object-oriented interface
 * @export
 * @class BillingApi
 * @extends {BaseAPI}
 */
export class BillingApi extends BaseAPI {
    /**
     * Retrieve all the notification thresholds for an organization.
     * @summary GET: All Thresholds for Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    getAllThresholdsForOrganization(options) {
        return BillingApiFp(this.configuration).getAllThresholdsForOrganization(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve active billing metrics for the organization\'s resources, including pricing, uptime, and total cost. Returns usage details for each active resource by defualt(`deleted=false` will return active resources). Additionally, adding `deleted=true` in query parameter will return inactive resources. For additional information on view usage costs for all resources, [**click here**](https://infrahub-doc.nexgencloud.com/docs/billing-and-payment/billing-features#view-usage-costs-for-all-resources)
     * @summary GET: Billing usage
     * @param {string} [deleted] &#x60;true&#x60; will return inactive resources and &#x60;false&#x60; will return active resources. By defualt(&#x60;deleted&#x3D;false&#x60;)
     * @param {string} [environment] Filter resources by environment ID or Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    getBillingUsage(deleted, environment, options) {
        return BillingApiFp(this.configuration).getBillingUsage(deleted, environment, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve the previous day\'s costs for instances, volumes, and clusters. Returns a breakdown of the costs and the total cost for the last day. For additional information on Retrieve Previous Day Usage Costs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/billing-resources/last-day-usage/)
     * @summary GET: Last Day Cost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    getLastDayCost(options) {
        return BillingApiFp(this.configuration).getLastDayCost(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * User will recieve billing history for the specified billing cycle. This data will include \'incurred_bill\', \'non_discounted_bill\', \'vm_cost\', \'volume_cost\'
     * @summary Retrieve Billing History for a specific Billing Cycle
     * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {string} [graph] Set this value to \&quot;true\&quot; for getting graph value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    retrieveBillingHistoryForASpecificBillingCycle(startDate, endDate, graph, options) {
        return BillingApiFp(this.configuration).retrieveBillingHistoryForASpecificBillingCycle(startDate, endDate, graph, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve billing history of a specific Snapshot for the specified billing cycle. This data will include \'resource_name\', \'infrahub_id\', \'price_per_hour\', \'incurred_bill\', \'usage_time\', \'non_discounted_price_per_hour\', \'non_discounted_bill\'.
     * @summary Retrieve Billing History of a Specific Snapshot for a specific Billing Cycle
     * @param {number} snapshotId
     * @param {string} [startDate] Datetime should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {string} [endDate] Datetime should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    retrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycle(snapshotId, startDate, endDate, options) {
        return BillingApiFp(this.configuration).retrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycle(snapshotId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * User will recieve billing history of a specific Virtual Machine for the specified billing cycle. This data will include \'resource_name\', \'infrahub_id\', \'price_per_hour\', \'non_discounted_price_per_hour\', \'incurred_bill\', \'non_discounted_bill\', \'usage_time\', \'usage_time_ACTIVE\', \'usage_time_SHUTOFF\', \'usage_time_HIBERNATED\'
     * @summary Retrieve Billing History of a Specific Virtual Machine for a specific Billing Cycle
     * @param {number} vmId
     * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    retrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycle(vmId, startDate, endDate, options) {
        return BillingApiFp(this.configuration).retrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycle(vmId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve billing history of a specific Volume for the specified billing cycle. This data will include \'resource_name\', \'infrahub_id\', \'price_per_hour\', \'incurred_bill\', \'usage_time\', \'non_discounted_price_per_hour\', \'non_discounted_bill\'.
     * @summary Retrieve Billing History of a Specific Volume for a specific Billing Cycle
     * @param {number} volumeId
     * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    retrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycle(volumeId, startDate, endDate, options) {
        return BillingApiFp(this.configuration).retrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycle(volumeId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * User will recieve billing history of contracts for the specified billing cycle. This data will include \'description\', gpu_type\',\'infrahub_id\', \'status\', \'incurred_bill\', \'price_per_hour\'
     * @summary Retrieve Billing History of Contract for a specific Billing Cycle
     * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {string} [search] Search by Contract \&quot;Description\&quot; or \&quot;ID\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    retrieveBillingHistoryOfContractForASpecificBillingCycle(startDate, endDate, search, options) {
        return BillingApiFp(this.configuration).retrieveBillingHistoryOfContractForASpecificBillingCycle(startDate, endDate, search, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * User will recieve billing history of snapshots for thespecified billing cycle. This data will include \'resource_name\', \'infrahub_id\', \'status\', \'incurred_bill\', \'usage_time\', \'price_per_hour\'
     * @summary Retrieve Billing History of Snapshot for a specific Billing Cycle
     * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {string} [search] Search by Volume \&quot;Name\&quot; or \&quot;ID\&quot;
     * @param {string} [page] Page number
     * @param {string} [perPage] Number of items to return per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    retrieveBillingHistoryOfSnapshotForASpecificBillingCycle(startDate, endDate, search, page, perPage, options) {
        return BillingApiFp(this.configuration).retrieveBillingHistoryOfSnapshotForASpecificBillingCycle(startDate, endDate, search, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * User will recieve billing history of virtual machine for the specified billing cycle. This data will include \'resource_name\', \'infrahub_id\', \'status\', \'incurred_bill\', \'usage_time\', \'price_per_hour\'
     * @summary Retrieve Billing History of Virtual Machine for a specific Billing Cycle
     * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {string} [search] Search by Virtual Machine \&quot;Name\&quot; or \&quot;ID\&quot;
     * @param {string} [perPage] Number of items to return per page
     * @param {string} [page] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    retrieveBillingHistoryOfVirtualMachineForASpecificBillingCycle(startDate, endDate, search, perPage, page, options) {
        return BillingApiFp(this.configuration).retrieveBillingHistoryOfVirtualMachineForASpecificBillingCycle(startDate, endDate, search, perPage, page, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * User will recieve billing history of volumes for thespecified billing cycle. This data will include \'resource_name\', \'infrahub_id\', \'status\', \'incurred_bill\', \'usage_time\', \'price_per_hour\'
     * @summary Retrieve Billing History of Volume for a specific Billing Cycle
     * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {string} [search] Search by Volume \&quot;Name\&quot; or \&quot;ID\&quot;
     * @param {string} [perPage] Number of items to return per page
     * @param {string} [page] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    retrieveBillingHistoryOfVolumeForASpecificBillingCycle(startDate, endDate, search, perPage, page, options) {
        return BillingApiFp(this.configuration).retrieveBillingHistoryOfVolumeForASpecificBillingCycle(startDate, endDate, search, perPage, page, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * User will recieve hourly cost datapoints for a Snapshot for a specified billing cycle. This data will include \'incurred_bill\' graph datapoints.
     * @summary Retrieve hourly cost datapoints of a Specific Snapshot for a specific billing cycle
     * @param {number} snapshotId
     * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    retrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycle(snapshotId, startDate, endDate, options) {
        return BillingApiFp(this.configuration).retrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycle(snapshotId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * User will recieve hourly cost datapoints for a VM for a specified billing cycle. This data will include \'incurred_bill\' graph datapoints.
     * @summary Retrieve hourly cost datapoints of a Specific Virtual Machine for a specific billing cycle
     * @param {number} vmId
     * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    retrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycle(vmId, startDate, endDate, options) {
        return BillingApiFp(this.configuration).retrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycle(vmId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * User will recieve hourly cost datapoints for a Volume for a specified billing cycle. This data will include \'incurred_bill\' graph datapoints.
     * @summary Retrieve hourly cost datapoints of a Specific Volume for a specific billing cycle
     * @param {number} volumeId
     * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    retrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycle(volumeId, startDate, endDate, options) {
        return BillingApiFp(this.configuration).retrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycle(volumeId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * User will recieve sub-resources historical cost datapoints for a VM sub resources for a specified billing cycle. This data will include \'incurred_bill\' graph datapoints. Machine sub resources for a specific billing cycle
     * @summary Retrieve Sub-Resources Historical Cost datapoints of a Virtual
     * @param {number} vmId
     * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    retrieveSubResourcesHistoricalCostDatapointsOfAVirtual(vmId, startDate, endDate, options) {
        return BillingApiFp(this.configuration).retrieveSubResourcesHistoricalCostDatapointsOfAVirtual(vmId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * User will get total costs and non_discount costs of sub resources on a specific Virtual Machine for the specified billing cycle. on a Specific VM for the Specified Billing Cycle
     * @summary Retrieve Total Costs and Non Discount Costs for Sub Resources
     * @param {number} vmId
     * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    retrieveTotalCostsAndNonDiscountCostsForSubResources(vmId, startDate, endDate, options) {
        return BillingApiFp(this.configuration).retrieveTotalCostsAndNonDiscountCostsForSubResources(vmId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * User will receive vm billing events history
     * @summary Retrieve VM billing events history
     * @param {number} vmId
     * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    retrieveVmBillingEventsHistory(vmId, startDate, endDate, options) {
        return BillingApiFp(this.configuration).retrieveVmBillingEventsHistory(vmId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * User will receive volume billing events history
     * @summary Retrieve Volume billing events history
     * @param {number} volumeId
     * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    retrieveVolumeBillingEventsHistory(volumeId, startDate, endDate, options) {
        return BillingApiFp(this.configuration).retrieveVolumeBillingEventsHistory(volumeId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * By default, you are subscribed to all the threshold values and you will be receiving the email notification for these default thresholds values. `false` indicates that the user will no longer receive notifications for this specific threshold, whereas `true` signifies that the user will receive notification emails.
     * @summary Update: Subscribe or Unsubscribe Notification Threshold
     * @param {number} thresholdId
     * @param {Subscribeorunsubscribeupdatepayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    updateSubscribeOrUnsubscribeNotificationThreshold(thresholdId, payload, options) {
        return BillingApiFp(this.configuration).updateSubscribeOrUnsubscribeNotificationThreshold(thresholdId, payload, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * CalculateApi - axios parameter creator
 * @export
 */
export const CalculateApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Calculate the hourly billing rate of a specified resource by including the resource ID in the path.
         * @summary Retrieve Billing Rate for Resource
         * @param {string} resourceType
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingRateForResource: (resourceType_1, id_1, ...args_1) => __awaiter(this, [resourceType_1, id_1, ...args_1], void 0, function* (resourceType, id, options = {}) {
            // verify required parameter 'resourceType' is not null or undefined
            assertParamExists('retrieveBillingRateForResource', 'resourceType', resourceType);
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveBillingRateForResource', 'id', id);
            const localVarPath = `/pricebook/calculate/resource/{resource_type}/{id}`
                .replace(`{${"resource_type"}}`, encodeURIComponent(String(resourceType)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CalculateApi - functional programming interface
 * @export
 */
export const CalculateApiFp = function (configuration) {
    const localVarAxiosParamCreator = CalculateApiAxiosParamCreator(configuration);
    return {
        /**
         * Calculate the hourly billing rate of a specified resource by including the resource ID in the path.
         * @summary Retrieve Billing Rate for Resource
         * @param {string} resourceType
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingRateForResource(resourceType, id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveBillingRateForResource(resourceType, id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['CalculateApi.retrieveBillingRateForResource']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * CalculateApi - factory interface
 * @export
 */
export const CalculateApiFactory = function (configuration, basePath, axios) {
    const localVarFp = CalculateApiFp(configuration);
    return {
        /**
         * Calculate the hourly billing rate of a specified resource by including the resource ID in the path.
         * @summary Retrieve Billing Rate for Resource
         * @param {string} resourceType
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveBillingRateForResource(resourceType, id, options) {
            return localVarFp.retrieveBillingRateForResource(resourceType, id, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * CalculateApi - object-oriented interface
 * @export
 * @class CalculateApi
 * @extends {BaseAPI}
 */
export class CalculateApi extends BaseAPI {
    /**
     * Calculate the hourly billing rate of a specified resource by including the resource ID in the path.
     * @summary Retrieve Billing Rate for Resource
     * @param {string} resourceType
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CalculateApi
     */
    retrieveBillingRateForResource(resourceType, id, options) {
        return CalculateApiFp(this.configuration).retrieveBillingRateForResource(resourceType, id, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * CallbacksApi - axios parameter creator
 * @export
 */
export const CallbacksApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a callback URL for a specified virtual machine, enabling the posting of action events executed on the virtual machine to the specified URL. Provide the callback URL in the request body and the ID of the virtual machine to which it is being attached in the path. For more details on virtual machine callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks#attach-a-callback-url-to-an-existing-virtual-machine).
         * @summary Attach callback to virtual machine
         * @param {number} id
         * @param {AttachCallbackPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachCallbackToVirtualMachine: (id_1, payload_1, ...args_1) => __awaiter(this, [id_1, payload_1, ...args_1], void 0, function* (id, payload, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('attachCallbackToVirtualMachine', 'id', id);
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('attachCallbackToVirtualMachine', 'payload', payload);
            const localVarPath = `/core/virtual-machines/{id}/attach-callback`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Creates a callback URL for a specified volume, enabling the posting of action events executed on the volume to the specified URL. Provide the callback URL in the request body and the ID of the volume to which it is being attached in the path. For more details on volume callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).
         * @summary Attach callback to volume
         * @param {number} id
         * @param {AttachCallbackPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachCallbackToVolume: (id_1, payload_1, ...args_1) => __awaiter(this, [id_1, payload_1, ...args_1], void 0, function* (id, payload, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('attachCallbackToVolume', 'id', id);
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('attachCallbackToVolume', 'payload', payload);
            const localVarPath = `/core/volumes/{id}/attach-callback`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Permanently deletes the callback URL associated with a specified virtual machine by providing the virtual machine ID in the request path. For additional information on virtual machine callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).
         * @summary Delete virtual machine callback
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVirtualMachineCallback: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteVirtualMachineCallback', 'id', id);
            const localVarPath = `/core/virtual-machines/{id}/delete-callback`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Permanently deletes the callback URL associated with a specified volume by providing the volume ID in the request path. For additional information on volume callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).
         * @summary Delete volume callback
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVolumeCallback: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteVolumeCallback', 'id', id);
            const localVarPath = `/core/volumes/{id}/delete-callback`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates the callback URL for a specified virtual machine. Provide the new callback URL in the request body, along with the ID of the associated virtual machine in the path. For additional information on virtual machine callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).
         * @summary Update virtual machine callback
         * @param {number} id
         * @param {AttachCallbackPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVirtualMachineCallback: (id_1, payload_1, ...args_1) => __awaiter(this, [id_1, payload_1, ...args_1], void 0, function* (id, payload, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateVirtualMachineCallback', 'id', id);
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('updateVirtualMachineCallback', 'payload', payload);
            const localVarPath = `/core/virtual-machines/{id}/update-callback`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates the callback URL for a specified volume. Provide the new callback URL in the request body, along with the ID of the associated volume in the path. For additional information on volume callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).
         * @summary Update volume callback
         * @param {number} id
         * @param {AttachCallbackPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVolumeCallback: (id_1, payload_1, ...args_1) => __awaiter(this, [id_1, payload_1, ...args_1], void 0, function* (id, payload, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateVolumeCallback', 'id', id);
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('updateVolumeCallback', 'payload', payload);
            const localVarPath = `/core/volumes/{id}/update-callback`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CallbacksApi - functional programming interface
 * @export
 */
export const CallbacksApiFp = function (configuration) {
    const localVarAxiosParamCreator = CallbacksApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a callback URL for a specified virtual machine, enabling the posting of action events executed on the virtual machine to the specified URL. Provide the callback URL in the request body and the ID of the virtual machine to which it is being attached in the path. For more details on virtual machine callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks#attach-a-callback-url-to-an-existing-virtual-machine).
         * @summary Attach callback to virtual machine
         * @param {number} id
         * @param {AttachCallbackPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachCallbackToVirtualMachine(id, payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.attachCallbackToVirtualMachine(id, payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['CallbacksApi.attachCallbackToVirtualMachine']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Creates a callback URL for a specified volume, enabling the posting of action events executed on the volume to the specified URL. Provide the callback URL in the request body and the ID of the volume to which it is being attached in the path. For more details on volume callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).
         * @summary Attach callback to volume
         * @param {number} id
         * @param {AttachCallbackPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachCallbackToVolume(id, payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.attachCallbackToVolume(id, payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['CallbacksApi.attachCallbackToVolume']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Permanently deletes the callback URL associated with a specified virtual machine by providing the virtual machine ID in the request path. For additional information on virtual machine callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).
         * @summary Delete virtual machine callback
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVirtualMachineCallback(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteVirtualMachineCallback(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['CallbacksApi.deleteVirtualMachineCallback']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Permanently deletes the callback URL associated with a specified volume by providing the volume ID in the request path. For additional information on volume callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).
         * @summary Delete volume callback
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVolumeCallback(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteVolumeCallback(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['CallbacksApi.deleteVolumeCallback']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Updates the callback URL for a specified virtual machine. Provide the new callback URL in the request body, along with the ID of the associated virtual machine in the path. For additional information on virtual machine callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).
         * @summary Update virtual machine callback
         * @param {number} id
         * @param {AttachCallbackPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVirtualMachineCallback(id, payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateVirtualMachineCallback(id, payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['CallbacksApi.updateVirtualMachineCallback']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Updates the callback URL for a specified volume. Provide the new callback URL in the request body, along with the ID of the associated volume in the path. For additional information on volume callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).
         * @summary Update volume callback
         * @param {number} id
         * @param {AttachCallbackPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVolumeCallback(id, payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateVolumeCallback(id, payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['CallbacksApi.updateVolumeCallback']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * CallbacksApi - factory interface
 * @export
 */
export const CallbacksApiFactory = function (configuration, basePath, axios) {
    const localVarFp = CallbacksApiFp(configuration);
    return {
        /**
         * Creates a callback URL for a specified virtual machine, enabling the posting of action events executed on the virtual machine to the specified URL. Provide the callback URL in the request body and the ID of the virtual machine to which it is being attached in the path. For more details on virtual machine callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks#attach-a-callback-url-to-an-existing-virtual-machine).
         * @summary Attach callback to virtual machine
         * @param {number} id
         * @param {AttachCallbackPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachCallbackToVirtualMachine(id, payload, options) {
            return localVarFp.attachCallbackToVirtualMachine(id, payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a callback URL for a specified volume, enabling the posting of action events executed on the volume to the specified URL. Provide the callback URL in the request body and the ID of the volume to which it is being attached in the path. For more details on volume callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).
         * @summary Attach callback to volume
         * @param {number} id
         * @param {AttachCallbackPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachCallbackToVolume(id, payload, options) {
            return localVarFp.attachCallbackToVolume(id, payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Permanently deletes the callback URL associated with a specified virtual machine by providing the virtual machine ID in the request path. For additional information on virtual machine callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).
         * @summary Delete virtual machine callback
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVirtualMachineCallback(id, options) {
            return localVarFp.deleteVirtualMachineCallback(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Permanently deletes the callback URL associated with a specified volume by providing the volume ID in the request path. For additional information on volume callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).
         * @summary Delete volume callback
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVolumeCallback(id, options) {
            return localVarFp.deleteVolumeCallback(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the callback URL for a specified virtual machine. Provide the new callback URL in the request body, along with the ID of the associated virtual machine in the path. For additional information on virtual machine callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).
         * @summary Update virtual machine callback
         * @param {number} id
         * @param {AttachCallbackPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVirtualMachineCallback(id, payload, options) {
            return localVarFp.updateVirtualMachineCallback(id, payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the callback URL for a specified volume. Provide the new callback URL in the request body, along with the ID of the associated volume in the path. For additional information on volume callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).
         * @summary Update volume callback
         * @param {number} id
         * @param {AttachCallbackPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVolumeCallback(id, payload, options) {
            return localVarFp.updateVolumeCallback(id, payload, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * CallbacksApi - object-oriented interface
 * @export
 * @class CallbacksApi
 * @extends {BaseAPI}
 */
export class CallbacksApi extends BaseAPI {
    /**
     * Creates a callback URL for a specified virtual machine, enabling the posting of action events executed on the virtual machine to the specified URL. Provide the callback URL in the request body and the ID of the virtual machine to which it is being attached in the path. For more details on virtual machine callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks#attach-a-callback-url-to-an-existing-virtual-machine).
     * @summary Attach callback to virtual machine
     * @param {number} id
     * @param {AttachCallbackPayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallbacksApi
     */
    attachCallbackToVirtualMachine(id, payload, options) {
        return CallbacksApiFp(this.configuration).attachCallbackToVirtualMachine(id, payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a callback URL for a specified volume, enabling the posting of action events executed on the volume to the specified URL. Provide the callback URL in the request body and the ID of the volume to which it is being attached in the path. For more details on volume callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).
     * @summary Attach callback to volume
     * @param {number} id
     * @param {AttachCallbackPayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallbacksApi
     */
    attachCallbackToVolume(id, payload, options) {
        return CallbacksApiFp(this.configuration).attachCallbackToVolume(id, payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Permanently deletes the callback URL associated with a specified virtual machine by providing the virtual machine ID in the request path. For additional information on virtual machine callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).
     * @summary Delete virtual machine callback
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallbacksApi
     */
    deleteVirtualMachineCallback(id, options) {
        return CallbacksApiFp(this.configuration).deleteVirtualMachineCallback(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Permanently deletes the callback URL associated with a specified volume by providing the volume ID in the request path. For additional information on volume callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).
     * @summary Delete volume callback
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallbacksApi
     */
    deleteVolumeCallback(id, options) {
        return CallbacksApiFp(this.configuration).deleteVolumeCallback(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the callback URL for a specified virtual machine. Provide the new callback URL in the request body, along with the ID of the associated virtual machine in the path. For additional information on virtual machine callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).
     * @summary Update virtual machine callback
     * @param {number} id
     * @param {AttachCallbackPayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallbacksApi
     */
    updateVirtualMachineCallback(id, payload, options) {
        return CallbacksApiFp(this.configuration).updateVirtualMachineCallback(id, payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the callback URL for a specified volume. Provide the new callback URL in the request body, along with the ID of the associated volume in the path. For additional information on volume callback URLs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/webhooks-callbacks).
     * @summary Update volume callback
     * @param {number} id
     * @param {AttachCallbackPayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallbacksApi
     */
    updateVolumeCallback(id, payload, options) {
        return CallbacksApiFp(this.configuration).updateVolumeCallback(id, payload, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * ClusterEventsApi - axios parameter creator
 * @export
 */
export const ClusterEventsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Fetch all of a cluster events
         * @param {string} clusterId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAllOfAClusterEvents: (clusterId_1, ...args_1) => __awaiter(this, [clusterId_1, ...args_1], void 0, function* (clusterId, options = {}) {
            // verify required parameter 'clusterId' is not null or undefined
            assertParamExists('fetchAllOfAClusterEvents', 'clusterId', clusterId);
            const localVarPath = `/core/clusters/{cluster_id}/events`
                .replace(`{${"cluster_id"}}`, encodeURIComponent(String(clusterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ClusterEventsApi - functional programming interface
 * @export
 */
export const ClusterEventsApiFp = function (configuration) {
    const localVarAxiosParamCreator = ClusterEventsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Fetch all of a cluster events
         * @param {string} clusterId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAllOfAClusterEvents(clusterId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchAllOfAClusterEvents(clusterId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ClusterEventsApi.fetchAllOfAClusterEvents']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * ClusterEventsApi - factory interface
 * @export
 */
export const ClusterEventsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ClusterEventsApiFp(configuration);
    return {
        /**
         *
         * @summary Fetch all of a cluster events
         * @param {string} clusterId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAllOfAClusterEvents(clusterId, options) {
            return localVarFp.fetchAllOfAClusterEvents(clusterId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ClusterEventsApi - object-oriented interface
 * @export
 * @class ClusterEventsApi
 * @extends {BaseAPI}
 */
export class ClusterEventsApi extends BaseAPI {
    /**
     *
     * @summary Fetch all of a cluster events
     * @param {string} clusterId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClusterEventsApi
     */
    fetchAllOfAClusterEvents(clusterId, options) {
        return ClusterEventsApiFp(this.configuration).fetchAllOfAClusterEvents(clusterId, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * ClustersApi - axios parameter creator
 * @export
 */
export const ClustersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create Cluster
         * @param {CreateClusterPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCluster: (payload_1, ...args_1) => __awaiter(this, [payload_1, ...args_1], void 0, function* (payload, options = {}) {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('createCluster', 'payload', payload);
            const localVarPath = `/core/clusters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete a cluster
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteACluster: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteACluster', 'id', id);
            const localVarPath = `/core/clusters/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Check if a Cluster name is available
         * @summary Fetch cluster name availability
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchClusterNameAvailability: (name_1, ...args_1) => __awaiter(this, [name_1, ...args_1], void 0, function* (name, options = {}) {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('fetchClusterNameAvailability', 'name', name);
            const localVarPath = `/core/clusters/name-availability/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary GET Cluster Versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClusterVersions: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/core/clusters/versions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Getting Cluster Detail
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gettingClusterDetail: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('gettingClusterDetail', 'id', id);
            const localVarPath = `/core/clusters/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary List Clusters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listClusters: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/core/clusters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ClustersApi - functional programming interface
 * @export
 */
export const ClustersApiFp = function (configuration) {
    const localVarAxiosParamCreator = ClustersApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Create Cluster
         * @param {CreateClusterPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCluster(payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createCluster(payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ClustersApi.createCluster']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Delete a cluster
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteACluster(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteACluster(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ClustersApi.deleteACluster']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Check if a Cluster name is available
         * @summary Fetch cluster name availability
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchClusterNameAvailability(name, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchClusterNameAvailability(name, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ClustersApi.fetchClusterNameAvailability']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary GET Cluster Versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClusterVersions(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getClusterVersions(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ClustersApi.getClusterVersions']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Getting Cluster Detail
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gettingClusterDetail(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.gettingClusterDetail(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ClustersApi.gettingClusterDetail']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary List Clusters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listClusters(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listClusters(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ClustersApi.listClusters']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * ClustersApi - factory interface
 * @export
 */
export const ClustersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ClustersApiFp(configuration);
    return {
        /**
         *
         * @summary Create Cluster
         * @param {CreateClusterPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCluster(payload, options) {
            return localVarFp.createCluster(payload, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a cluster
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteACluster(id, options) {
            return localVarFp.deleteACluster(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if a Cluster name is available
         * @summary Fetch cluster name availability
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchClusterNameAvailability(name, options) {
            return localVarFp.fetchClusterNameAvailability(name, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary GET Cluster Versions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClusterVersions(options) {
            return localVarFp.getClusterVersions(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Getting Cluster Detail
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gettingClusterDetail(id, options) {
            return localVarFp.gettingClusterDetail(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List Clusters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listClusters(options) {
            return localVarFp.listClusters(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ClustersApi - object-oriented interface
 * @export
 * @class ClustersApi
 * @extends {BaseAPI}
 */
export class ClustersApi extends BaseAPI {
    /**
     *
     * @summary Create Cluster
     * @param {CreateClusterPayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClustersApi
     */
    createCluster(payload, options) {
        return ClustersApiFp(this.configuration).createCluster(payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete a cluster
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClustersApi
     */
    deleteACluster(id, options) {
        return ClustersApiFp(this.configuration).deleteACluster(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Check if a Cluster name is available
     * @summary Fetch cluster name availability
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClustersApi
     */
    fetchClusterNameAvailability(name, options) {
        return ClustersApiFp(this.configuration).fetchClusterNameAvailability(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary GET Cluster Versions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClustersApi
     */
    getClusterVersions(options) {
        return ClustersApiFp(this.configuration).getClusterVersions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Getting Cluster Detail
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClustersApi
     */
    gettingClusterDetail(id, options) {
        return ClustersApiFp(this.configuration).gettingClusterDetail(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List Clusters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClustersApi
     */
    listClusters(options) {
        return ClustersApiFp(this.configuration).listClusters(options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * ComplianceApi - axios parameter creator
 * @export
 */
export const ComplianceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create compliance
         * @param {CompliancePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompliance: (payload_1, ...args_1) => __awaiter(this, [payload_1, ...args_1], void 0, function* (payload, options = {}) {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('createCompliance', 'payload', payload);
            const localVarPath = `/core/compliance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Delete a compliance
         * @param {string} gpuModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteACompliance: (gpuModel_1, ...args_1) => __awaiter(this, [gpuModel_1, ...args_1], void 0, function* (gpuModel, options = {}) {
            // verify required parameter 'gpuModel' is not null or undefined
            assertParamExists('deleteACompliance', 'gpuModel', gpuModel);
            const localVarPath = `/core/compliance/{gpu_model}`
                .replace(`{${"gpu_model"}}`, encodeURIComponent(String(gpuModel)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of compliance objects each corresponding to available GPU models. These compliance objects contain minimum and maximum values for RAM in GB, number of vCPUs, and system disk capacity in GB. Use the optional `gpu` model parameter in the query string to filter responses by GPU model. For additional details on GPU compliance, [**click here**](https://infrahub-doc.nexgencloud.com/docs/hardware/flavors#adhering-to-gpu-compliance).
         * @summary Retrieve GPU compliance
         * @param {string} [gpu] This is for gpu model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveGpuCompliance: (gpu_1, ...args_1) => __awaiter(this, [gpu_1, ...args_1], void 0, function* (gpu, options = {}) {
            const localVarPath = `/core/compliance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (gpu !== undefined) {
                localVarQueryParameter['gpu'] = gpu;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Update a compliance
         * @param {CompliancePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateACompliance: (payload_1, ...args_1) => __awaiter(this, [payload_1, ...args_1], void 0, function* (payload, options = {}) {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('updateACompliance', 'payload', payload);
            const localVarPath = `/core/compliance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ComplianceApi - functional programming interface
 * @export
 */
export const ComplianceApiFp = function (configuration) {
    const localVarAxiosParamCreator = ComplianceApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Create compliance
         * @param {CompliancePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompliance(payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createCompliance(payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ComplianceApi.createCompliance']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Delete a compliance
         * @param {string} gpuModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteACompliance(gpuModel, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteACompliance(gpuModel, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ComplianceApi.deleteACompliance']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Returns a list of compliance objects each corresponding to available GPU models. These compliance objects contain minimum and maximum values for RAM in GB, number of vCPUs, and system disk capacity in GB. Use the optional `gpu` model parameter in the query string to filter responses by GPU model. For additional details on GPU compliance, [**click here**](https://infrahub-doc.nexgencloud.com/docs/hardware/flavors#adhering-to-gpu-compliance).
         * @summary Retrieve GPU compliance
         * @param {string} [gpu] This is for gpu model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveGpuCompliance(gpu, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveGpuCompliance(gpu, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ComplianceApi.retrieveGpuCompliance']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Update a compliance
         * @param {CompliancePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateACompliance(payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateACompliance(payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ComplianceApi.updateACompliance']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * ComplianceApi - factory interface
 * @export
 */
export const ComplianceApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ComplianceApiFp(configuration);
    return {
        /**
         *
         * @summary Create compliance
         * @param {CompliancePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompliance(payload, options) {
            return localVarFp.createCompliance(payload, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a compliance
         * @param {string} gpuModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteACompliance(gpuModel, options) {
            return localVarFp.deleteACompliance(gpuModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of compliance objects each corresponding to available GPU models. These compliance objects contain minimum and maximum values for RAM in GB, number of vCPUs, and system disk capacity in GB. Use the optional `gpu` model parameter in the query string to filter responses by GPU model. For additional details on GPU compliance, [**click here**](https://infrahub-doc.nexgencloud.com/docs/hardware/flavors#adhering-to-gpu-compliance).
         * @summary Retrieve GPU compliance
         * @param {string} [gpu] This is for gpu model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveGpuCompliance(gpu, options) {
            return localVarFp.retrieveGpuCompliance(gpu, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update a compliance
         * @param {CompliancePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateACompliance(payload, options) {
            return localVarFp.updateACompliance(payload, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ComplianceApi - object-oriented interface
 * @export
 * @class ComplianceApi
 * @extends {BaseAPI}
 */
export class ComplianceApi extends BaseAPI {
    /**
     *
     * @summary Create compliance
     * @param {CompliancePayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    createCompliance(payload, options) {
        return ComplianceApiFp(this.configuration).createCompliance(payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Delete a compliance
     * @param {string} gpuModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    deleteACompliance(gpuModel, options) {
        return ComplianceApiFp(this.configuration).deleteACompliance(gpuModel, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of compliance objects each corresponding to available GPU models. These compliance objects contain minimum and maximum values for RAM in GB, number of vCPUs, and system disk capacity in GB. Use the optional `gpu` model parameter in the query string to filter responses by GPU model. For additional details on GPU compliance, [**click here**](https://infrahub-doc.nexgencloud.com/docs/hardware/flavors#adhering-to-gpu-compliance).
     * @summary Retrieve GPU compliance
     * @param {string} [gpu] This is for gpu model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    retrieveGpuCompliance(gpu, options) {
        return ComplianceApiFp(this.configuration).retrieveGpuCompliance(gpu, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Update a compliance
     * @param {CompliancePayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    updateACompliance(payload, options) {
        return ComplianceApiFp(this.configuration).updateACompliance(payload, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * CreditApi - axios parameter creator
 * @export
 */
export const CreditApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary GET: View credit and threshold
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getViewCreditAndThreshold: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/billing/user-credit/credit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CreditApi - functional programming interface
 * @export
 */
export const CreditApiFp = function (configuration) {
    const localVarAxiosParamCreator = CreditApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary GET: View credit and threshold
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getViewCreditAndThreshold(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getViewCreditAndThreshold(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['CreditApi.getViewCreditAndThreshold']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * CreditApi - factory interface
 * @export
 */
export const CreditApiFactory = function (configuration, basePath, axios) {
    const localVarFp = CreditApiFp(configuration);
    return {
        /**
         *
         * @summary GET: View credit and threshold
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getViewCreditAndThreshold(options) {
            return localVarFp.getViewCreditAndThreshold(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * CreditApi - object-oriented interface
 * @export
 * @class CreditApi
 * @extends {BaseAPI}
 */
export class CreditApi extends BaseAPI {
    /**
     *
     * @summary GET: View credit and threshold
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditApi
     */
    getViewCreditAndThreshold(options) {
        return CreditApiFp(this.configuration).getViewCreditAndThreshold(options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * CustomerContractApi - axios parameter creator
 * @export
 */
export const CustomerContractApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Retrieves a list of contracts and their details, including the terms of each contract and the discounts applied to all resources under each contract. Pagination can be controlled using the `page` and `per_page` query parameters. For additional information about contracts, click [**here**](https://infrahub-doc.nexgencloud.com/docs/billing-and-payment/contracts).
         * @summary List Contracts
         * @param {number} [page]
         * @param {number} [perPage]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContracts: (page_1, perPage_1, ...args_1) => __awaiter(this, [page_1, perPage_1, ...args_1], void 0, function* (page, perPage, options = {}) {
            const localVarPath = `/pricebook/contracts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve details of a specific contract by providing the contract ID in the path. The endpoint returns the contract object along with its associated discount plans. For more information, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/pricebook-resources/retrieve-contract-details).
         * @summary Retrieve Contract Details
         * @param {number} contractId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveContractDetails: (contractId_1, ...args_1) => __awaiter(this, [contractId_1, ...args_1], void 0, function* (contractId, options = {}) {
            // verify required parameter 'contractId' is not null or undefined
            assertParamExists('retrieveContractDetails', 'contractId', contractId);
            const localVarPath = `/pricebook/contracts/{contract_id}`
                .replace(`{${"contract_id"}}`, encodeURIComponent(String(contractId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve GPU allocation count graph for a specific contract by providing the contract ID in the path. The endpoint returns the GPU allocation count graph for the contract within the specified date range.
         * @summary Retrieve GPU Allocation Graph for Contract
         * @param {number} contractId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveGpuAllocationGraphForContract: (contractId_1, startDate_1, endDate_1, ...args_1) => __awaiter(this, [contractId_1, startDate_1, endDate_1, ...args_1], void 0, function* (contractId, startDate, endDate, options = {}) {
            // verify required parameter 'contractId' is not null or undefined
            assertParamExists('retrieveGpuAllocationGraphForContract', 'contractId', contractId);
            const localVarPath = `/pricebook/contracts/{contract_id}/gpu_allocation_graph`
                .replace(`{${"contract_id"}}`, encodeURIComponent(String(contractId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CustomerContractApi - functional programming interface
 * @export
 */
export const CustomerContractApiFp = function (configuration) {
    const localVarAxiosParamCreator = CustomerContractApiAxiosParamCreator(configuration);
    return {
        /**
         * Retrieves a list of contracts and their details, including the terms of each contract and the discounts applied to all resources under each contract. Pagination can be controlled using the `page` and `per_page` query parameters. For additional information about contracts, click [**here**](https://infrahub-doc.nexgencloud.com/docs/billing-and-payment/contracts).
         * @summary List Contracts
         * @param {number} [page]
         * @param {number} [perPage]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContracts(page, perPage, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listContracts(page, perPage, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['CustomerContractApi.listContracts']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieve details of a specific contract by providing the contract ID in the path. The endpoint returns the contract object along with its associated discount plans. For more information, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/pricebook-resources/retrieve-contract-details).
         * @summary Retrieve Contract Details
         * @param {number} contractId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveContractDetails(contractId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveContractDetails(contractId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['CustomerContractApi.retrieveContractDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieve GPU allocation count graph for a specific contract by providing the contract ID in the path. The endpoint returns the GPU allocation count graph for the contract within the specified date range.
         * @summary Retrieve GPU Allocation Graph for Contract
         * @param {number} contractId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveGpuAllocationGraphForContract(contractId, startDate, endDate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveGpuAllocationGraphForContract(contractId, startDate, endDate, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['CustomerContractApi.retrieveGpuAllocationGraphForContract']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * CustomerContractApi - factory interface
 * @export
 */
export const CustomerContractApiFactory = function (configuration, basePath, axios) {
    const localVarFp = CustomerContractApiFp(configuration);
    return {
        /**
         * Retrieves a list of contracts and their details, including the terms of each contract and the discounts applied to all resources under each contract. Pagination can be controlled using the `page` and `per_page` query parameters. For additional information about contracts, click [**here**](https://infrahub-doc.nexgencloud.com/docs/billing-and-payment/contracts).
         * @summary List Contracts
         * @param {number} [page]
         * @param {number} [perPage]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContracts(page, perPage, options) {
            return localVarFp.listContracts(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve details of a specific contract by providing the contract ID in the path. The endpoint returns the contract object along with its associated discount plans. For more information, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/pricebook-resources/retrieve-contract-details).
         * @summary Retrieve Contract Details
         * @param {number} contractId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveContractDetails(contractId, options) {
            return localVarFp.retrieveContractDetails(contractId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve GPU allocation count graph for a specific contract by providing the contract ID in the path. The endpoint returns the GPU allocation count graph for the contract within the specified date range.
         * @summary Retrieve GPU Allocation Graph for Contract
         * @param {number} contractId
         * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveGpuAllocationGraphForContract(contractId, startDate, endDate, options) {
            return localVarFp.retrieveGpuAllocationGraphForContract(contractId, startDate, endDate, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * CustomerContractApi - object-oriented interface
 * @export
 * @class CustomerContractApi
 * @extends {BaseAPI}
 */
export class CustomerContractApi extends BaseAPI {
    /**
     * Retrieves a list of contracts and their details, including the terms of each contract and the discounts applied to all resources under each contract. Pagination can be controlled using the `page` and `per_page` query parameters. For additional information about contracts, click [**here**](https://infrahub-doc.nexgencloud.com/docs/billing-and-payment/contracts).
     * @summary List Contracts
     * @param {number} [page]
     * @param {number} [perPage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerContractApi
     */
    listContracts(page, perPage, options) {
        return CustomerContractApiFp(this.configuration).listContracts(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve details of a specific contract by providing the contract ID in the path. The endpoint returns the contract object along with its associated discount plans. For more information, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/pricebook-resources/retrieve-contract-details).
     * @summary Retrieve Contract Details
     * @param {number} contractId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerContractApi
     */
    retrieveContractDetails(contractId, options) {
        return CustomerContractApiFp(this.configuration).retrieveContractDetails(contractId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve GPU allocation count graph for a specific contract by providing the contract ID in the path. The endpoint returns the GPU allocation count graph for the contract within the specified date range.
     * @summary Retrieve GPU Allocation Graph for Contract
     * @param {number} contractId
     * @param {string} [startDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {string} [endDate] Date should be formatted in YYYY-MM-DDTHH:MM:SS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerContractApi
     */
    retrieveGpuAllocationGraphForContract(contractId, startDate, endDate, options) {
        return CustomerContractApiFp(this.configuration).retrieveGpuAllocationGraphForContract(contractId, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * DashboardApi - axios parameter creator
 * @export
 */
export const DashboardApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns hardware and pricing overview for your active resources, including virtual machines, containers, and volumes. For additional information on the Dashboard feature, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/dashboard).
         * @summary Retrieve Dashboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveDashboard: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/core/dashboard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * DashboardApi - functional programming interface
 * @export
 */
export const DashboardApiFp = function (configuration) {
    const localVarAxiosParamCreator = DashboardApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns hardware and pricing overview for your active resources, including virtual machines, containers, and volumes. For additional information on the Dashboard feature, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/dashboard).
         * @summary Retrieve Dashboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveDashboard(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveDashboard(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['DashboardApi.retrieveDashboard']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * DashboardApi - factory interface
 * @export
 */
export const DashboardApiFactory = function (configuration, basePath, axios) {
    const localVarFp = DashboardApiFp(configuration);
    return {
        /**
         * Returns hardware and pricing overview for your active resources, including virtual machines, containers, and volumes. For additional information on the Dashboard feature, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/dashboard).
         * @summary Retrieve Dashboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveDashboard(options) {
            return localVarFp.retrieveDashboard(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * DashboardApi - object-oriented interface
 * @export
 * @class DashboardApi
 * @extends {BaseAPI}
 */
export class DashboardApi extends BaseAPI {
    /**
     * Returns hardware and pricing overview for your active resources, including virtual machines, containers, and volumes. For additional information on the Dashboard feature, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/dashboard).
     * @summary Retrieve Dashboard
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    retrieveDashboard(options) {
        return DashboardApiFp(this.configuration).retrieveDashboard(options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * DeploymentApi - axios parameter creator
 * @export
 */
export const DeploymentApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Delete Deployment
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeployment: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDeployment', 'id', id);
            const localVarPath = `/core/marketplace/deployments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Details of Deployment by ID
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailsOfDeploymentById: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('detailsOfDeploymentById', 'id', id);
            const localVarPath = `/core/marketplace/deployments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary List Deployments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDeployments: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/core/marketplace/deployments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Start Deployment
         * @param {StartDeploymentPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startDeployment: (payload_1, ...args_1) => __awaiter(this, [payload_1, ...args_1], void 0, function* (payload, options = {}) {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('startDeployment', 'payload', payload);
            const localVarPath = `/core/marketplace/deployments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * DeploymentApi - functional programming interface
 * @export
 */
export const DeploymentApiFp = function (configuration) {
    const localVarAxiosParamCreator = DeploymentApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Delete Deployment
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeployment(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteDeployment(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['DeploymentApi.deleteDeployment']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Details of Deployment by ID
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailsOfDeploymentById(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.detailsOfDeploymentById(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['DeploymentApi.detailsOfDeploymentById']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary List Deployments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDeployments(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDeployments(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['DeploymentApi.listDeployments']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Start Deployment
         * @param {StartDeploymentPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startDeployment(payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.startDeployment(payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['DeploymentApi.startDeployment']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * DeploymentApi - factory interface
 * @export
 */
export const DeploymentApiFactory = function (configuration, basePath, axios) {
    const localVarFp = DeploymentApiFp(configuration);
    return {
        /**
         *
         * @summary Delete Deployment
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeployment(id, options) {
            return localVarFp.deleteDeployment(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Details of Deployment by ID
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailsOfDeploymentById(id, options) {
            return localVarFp.detailsOfDeploymentById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List Deployments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDeployments(options) {
            return localVarFp.listDeployments(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Start Deployment
         * @param {StartDeploymentPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startDeployment(payload, options) {
            return localVarFp.startDeployment(payload, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * DeploymentApi - object-oriented interface
 * @export
 * @class DeploymentApi
 * @extends {BaseAPI}
 */
export class DeploymentApi extends BaseAPI {
    /**
     *
     * @summary Delete Deployment
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentApi
     */
    deleteDeployment(id, options) {
        return DeploymentApiFp(this.configuration).deleteDeployment(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Details of Deployment by ID
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentApi
     */
    detailsOfDeploymentById(id, options) {
        return DeploymentApiFp(this.configuration).detailsOfDeploymentById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List Deployments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentApi
     */
    listDeployments(options) {
        return DeploymentApiFp(this.configuration).listDeployments(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Start Deployment
     * @param {StartDeploymentPayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentApi
     */
    startDeployment(payload, options) {
        return DeploymentApiFp(this.configuration).startDeployment(payload, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * EnvironmentApi - axios parameter creator
 * @export
 */
export const EnvironmentApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates an environment—a container to organize your resources, including SSH key pairs, virtual machines, and volumes. To create your environment, provide your desired environment name, and [**region**](https://infrahub-doc.nexgencloud.com/docs/features/regions) in the request body.
         * @summary Create environment
         * @param {CreateEnvironment} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnvironment: (payload_1, ...args_1) => __awaiter(this, [payload_1, ...args_1], void 0, function* (payload, options = {}) {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('createEnvironment', 'payload', payload);
            const localVarPath = `/core/environments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes an environment permanently. Provide the environment ID in the path to remove the specified environment.
         * @summary Delete environment
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnvironment: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteEnvironment', 'id', id);
            const localVarPath = `/core/environments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of your existing environments, providing the following details for each; environment ID, name, [**region**](https://infrahub-doc.nexgencloud.com/docs/features/regions), and the date and time of creation. For more information on environments, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/environments-available-features).
         * @summary List environments
         * @param {string} [page] Page Number
         * @param {string} [pageSize] Data Per Page
         * @param {string} [search] Search By ID or Name or Region
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEnvironments: (page_1, pageSize_1, search_1, ...args_1) => __awaiter(this, [page_1, pageSize_1, search_1, ...args_1], void 0, function* (page, pageSize, search, options = {}) {
            const localVarPath = `/core/environments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieves details about a specific environment. Provide the environment ID in the path and the new environment `name` in the request body to modify the specified environment.
         * @summary Retrieve environment
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEnvironment: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveEnvironment', 'id', id);
            const localVarPath = `/core/environments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates the name of an existing environment. Provide the environment ID in the path and the new environment `name` in the request body to modify the specified environment.
         * @summary Update environment
         * @param {number} id
         * @param {UpdateEnvironment} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnvironment: (id_1, payload_1, ...args_1) => __awaiter(this, [id_1, payload_1, ...args_1], void 0, function* (id, payload, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEnvironment', 'id', id);
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('updateEnvironment', 'payload', payload);
            const localVarPath = `/core/environments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * EnvironmentApi - functional programming interface
 * @export
 */
export const EnvironmentApiFp = function (configuration) {
    const localVarAxiosParamCreator = EnvironmentApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates an environment—a container to organize your resources, including SSH key pairs, virtual machines, and volumes. To create your environment, provide your desired environment name, and [**region**](https://infrahub-doc.nexgencloud.com/docs/features/regions) in the request body.
         * @summary Create environment
         * @param {CreateEnvironment} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnvironment(payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createEnvironment(payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['EnvironmentApi.createEnvironment']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Deletes an environment permanently. Provide the environment ID in the path to remove the specified environment.
         * @summary Delete environment
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnvironment(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteEnvironment(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['EnvironmentApi.deleteEnvironment']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Returns a list of your existing environments, providing the following details for each; environment ID, name, [**region**](https://infrahub-doc.nexgencloud.com/docs/features/regions), and the date and time of creation. For more information on environments, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/environments-available-features).
         * @summary List environments
         * @param {string} [page] Page Number
         * @param {string} [pageSize] Data Per Page
         * @param {string} [search] Search By ID or Name or Region
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEnvironments(page, pageSize, search, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listEnvironments(page, pageSize, search, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['EnvironmentApi.listEnvironments']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieves details about a specific environment. Provide the environment ID in the path and the new environment `name` in the request body to modify the specified environment.
         * @summary Retrieve environment
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEnvironment(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveEnvironment(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['EnvironmentApi.retrieveEnvironment']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Updates the name of an existing environment. Provide the environment ID in the path and the new environment `name` in the request body to modify the specified environment.
         * @summary Update environment
         * @param {number} id
         * @param {UpdateEnvironment} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnvironment(id, payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateEnvironment(id, payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['EnvironmentApi.updateEnvironment']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * EnvironmentApi - factory interface
 * @export
 */
export const EnvironmentApiFactory = function (configuration, basePath, axios) {
    const localVarFp = EnvironmentApiFp(configuration);
    return {
        /**
         * Creates an environment—a container to organize your resources, including SSH key pairs, virtual machines, and volumes. To create your environment, provide your desired environment name, and [**region**](https://infrahub-doc.nexgencloud.com/docs/features/regions) in the request body.
         * @summary Create environment
         * @param {CreateEnvironment} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnvironment(payload, options) {
            return localVarFp.createEnvironment(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an environment permanently. Provide the environment ID in the path to remove the specified environment.
         * @summary Delete environment
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnvironment(id, options) {
            return localVarFp.deleteEnvironment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of your existing environments, providing the following details for each; environment ID, name, [**region**](https://infrahub-doc.nexgencloud.com/docs/features/regions), and the date and time of creation. For more information on environments, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/environments-available-features).
         * @summary List environments
         * @param {string} [page] Page Number
         * @param {string} [pageSize] Data Per Page
         * @param {string} [search] Search By ID or Name or Region
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEnvironments(page, pageSize, search, options) {
            return localVarFp.listEnvironments(page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves details about a specific environment. Provide the environment ID in the path and the new environment `name` in the request body to modify the specified environment.
         * @summary Retrieve environment
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveEnvironment(id, options) {
            return localVarFp.retrieveEnvironment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the name of an existing environment. Provide the environment ID in the path and the new environment `name` in the request body to modify the specified environment.
         * @summary Update environment
         * @param {number} id
         * @param {UpdateEnvironment} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnvironment(id, payload, options) {
            return localVarFp.updateEnvironment(id, payload, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * EnvironmentApi - object-oriented interface
 * @export
 * @class EnvironmentApi
 * @extends {BaseAPI}
 */
export class EnvironmentApi extends BaseAPI {
    /**
     * Creates an environment—a container to organize your resources, including SSH key pairs, virtual machines, and volumes. To create your environment, provide your desired environment name, and [**region**](https://infrahub-doc.nexgencloud.com/docs/features/regions) in the request body.
     * @summary Create environment
     * @param {CreateEnvironment} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    createEnvironment(payload, options) {
        return EnvironmentApiFp(this.configuration).createEnvironment(payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an environment permanently. Provide the environment ID in the path to remove the specified environment.
     * @summary Delete environment
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    deleteEnvironment(id, options) {
        return EnvironmentApiFp(this.configuration).deleteEnvironment(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of your existing environments, providing the following details for each; environment ID, name, [**region**](https://infrahub-doc.nexgencloud.com/docs/features/regions), and the date and time of creation. For more information on environments, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/environments-available-features).
     * @summary List environments
     * @param {string} [page] Page Number
     * @param {string} [pageSize] Data Per Page
     * @param {string} [search] Search By ID or Name or Region
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    listEnvironments(page, pageSize, search, options) {
        return EnvironmentApiFp(this.configuration).listEnvironments(page, pageSize, search, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves details about a specific environment. Provide the environment ID in the path and the new environment `name` in the request body to modify the specified environment.
     * @summary Retrieve environment
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    retrieveEnvironment(id, options) {
        return EnvironmentApiFp(this.configuration).retrieveEnvironment(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the name of an existing environment. Provide the environment ID in the path and the new environment `name` in the request body to modify the specified environment.
     * @summary Update environment
     * @param {number} id
     * @param {UpdateEnvironment} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentApi
     */
    updateEnvironment(id, payload, options) {
        return EnvironmentApiFp(this.configuration).updateEnvironment(id, payload, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * FirewallAttachmentApi - axios parameter creator
 * @export
 */
export const FirewallAttachmentApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Attach Firewalls to VMs
         * @param {number} firewallId
         * @param {AttachFirewallWithVM} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachFirewallsToVms: (firewallId_1, payload_1, ...args_1) => __awaiter(this, [firewallId_1, payload_1, ...args_1], void 0, function* (firewallId, payload, options = {}) {
            // verify required parameter 'firewallId' is not null or undefined
            assertParamExists('attachFirewallsToVms', 'firewallId', firewallId);
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('attachFirewallsToVms', 'payload', payload);
            const localVarPath = `/core/firewalls/{firewall_id}/update-attachments`
                .replace(`{${"firewall_id"}}`, encodeURIComponent(String(firewallId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * FirewallAttachmentApi - functional programming interface
 * @export
 */
export const FirewallAttachmentApiFp = function (configuration) {
    const localVarAxiosParamCreator = FirewallAttachmentApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Attach Firewalls to VMs
         * @param {number} firewallId
         * @param {AttachFirewallWithVM} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachFirewallsToVms(firewallId, payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.attachFirewallsToVms(firewallId, payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['FirewallAttachmentApi.attachFirewallsToVms']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * FirewallAttachmentApi - factory interface
 * @export
 */
export const FirewallAttachmentApiFactory = function (configuration, basePath, axios) {
    const localVarFp = FirewallAttachmentApiFp(configuration);
    return {
        /**
         *
         * @summary Attach Firewalls to VMs
         * @param {number} firewallId
         * @param {AttachFirewallWithVM} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachFirewallsToVms(firewallId, payload, options) {
            return localVarFp.attachFirewallsToVms(firewallId, payload, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * FirewallAttachmentApi - object-oriented interface
 * @export
 * @class FirewallAttachmentApi
 * @extends {BaseAPI}
 */
export class FirewallAttachmentApi extends BaseAPI {
    /**
     *
     * @summary Attach Firewalls to VMs
     * @param {number} firewallId
     * @param {AttachFirewallWithVM} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirewallAttachmentApi
     */
    attachFirewallsToVms(firewallId, payload, options) {
        return FirewallAttachmentApiFp(this.configuration).attachFirewallsToVms(firewallId, payload, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * FirewallsApi - axios parameter creator
 * @export
 */
export const FirewallsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a [**firewall rule**](https://infrahub-doc.nexgencloud.com/docs/network-security/security-rules) and adds it to an existing firewall. Include the firewall ID in the path, and provide the firewall rule configuration in the request body.
         * @summary Add firewall rule to firewall
         * @param {number} firewallId
         * @param {CreateFirewallRulePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFirewallRuleToFirewall: (firewallId_1, payload_1, ...args_1) => __awaiter(this, [firewallId_1, payload_1, ...args_1], void 0, function* (firewallId, payload, options = {}) {
            // verify required parameter 'firewallId' is not null or undefined
            assertParamExists('addFirewallRuleToFirewall', 'firewallId', firewallId);
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('addFirewallRuleToFirewall', 'payload', payload);
            const localVarPath = `/core/firewalls/{firewall_id}/firewall-rules`
                .replace(`{${"firewall_id"}}`, encodeURIComponent(String(firewallId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Creates a firewall to which firewall rules can be added. A firewall can be attached to one or more virtual machines to control inbound and outbound traffic. In the body of the request, include the name of the firewall, the ID of the environment within which the firewall will be created, and an optional description. To obtain the ID of the environment, make a request to the [**list environments**](https://infrahub-doc.nexgencloud.com/docs/api-reference/core-resources/environments/list-environments) endpoint.
         * @summary Create firewall
         * @param {CreateFirewallPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFirewall: (payload_1, ...args_1) => __awaiter(this, [payload_1, ...args_1], void 0, function* (payload, options = {}) {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('createFirewall', 'payload', payload);
            const localVarPath = `/core/firewalls`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes a firewall by specifying the firewall ID in the path. If the firewall is currently attached to a virtual machine, it must be detached before deletion. For more information, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/core-resources/firewalls/delete-firewall).
         * @summary Delete firewall
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFirewall: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteFirewall', 'id', id);
            const localVarPath = `/core/firewalls/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Removes a firewall rule from firewall by providing the firewall ID and firewall rule ID in the path. For more information, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/core-resources/firewalls/remove-firewall-rule-from-firewall).
         * @summary Delete firewall rules from firewall
         * @param {number} firewallId
         * @param {number} firewallRuleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFirewallRulesFromFirewall: (firewallId_1, firewallRuleId_1, ...args_1) => __awaiter(this, [firewallId_1, firewallRuleId_1, ...args_1], void 0, function* (firewallId, firewallRuleId, options = {}) {
            // verify required parameter 'firewallId' is not null or undefined
            assertParamExists('deleteFirewallRulesFromFirewall', 'firewallId', firewallId);
            // verify required parameter 'firewallRuleId' is not null or undefined
            assertParamExists('deleteFirewallRulesFromFirewall', 'firewallRuleId', firewallRuleId);
            const localVarPath = `/core/firewalls/{firewall_id}/firewall-rules/{firewall_rule_id}`
                .replace(`{${"firewall_id"}}`, encodeURIComponent(String(firewallId)))
                .replace(`{${"firewall_rule_id"}}`, encodeURIComponent(String(firewallRuleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieves a list of existing firewalls and their details, including the security rules they contain and information about the virtual machines to which they are attached. For more information about the firewalls features offered by Infrahub, [**click here**](https://infrahub-doc.nexgencloud.com/docs/network-security/security-groups).
         * @summary List firewalls
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [search]
         * @param {string} [environment] Filter Environment ID or Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFirewalls: (page_1, pageSize_1, search_1, environment_1, ...args_1) => __awaiter(this, [page_1, pageSize_1, search_1, environment_1, ...args_1], void 0, function* (page, pageSize, search, environment, options = {}) {
            const localVarPath = `/core/firewalls`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (environment !== undefined) {
                localVarQueryParameter['environment'] = environment;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieves the details of an existing firewall, including the security rules it contains and information about the virtual machines to which it is attached.
         * @summary Retrieve firewall details
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveFirewallDetails: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveFirewallDetails', 'id', id);
            const localVarPath = `/core/firewalls/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * FirewallsApi - functional programming interface
 * @export
 */
export const FirewallsApiFp = function (configuration) {
    const localVarAxiosParamCreator = FirewallsApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a [**firewall rule**](https://infrahub-doc.nexgencloud.com/docs/network-security/security-rules) and adds it to an existing firewall. Include the firewall ID in the path, and provide the firewall rule configuration in the request body.
         * @summary Add firewall rule to firewall
         * @param {number} firewallId
         * @param {CreateFirewallRulePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFirewallRuleToFirewall(firewallId, payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addFirewallRuleToFirewall(firewallId, payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['FirewallsApi.addFirewallRuleToFirewall']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Creates a firewall to which firewall rules can be added. A firewall can be attached to one or more virtual machines to control inbound and outbound traffic. In the body of the request, include the name of the firewall, the ID of the environment within which the firewall will be created, and an optional description. To obtain the ID of the environment, make a request to the [**list environments**](https://infrahub-doc.nexgencloud.com/docs/api-reference/core-resources/environments/list-environments) endpoint.
         * @summary Create firewall
         * @param {CreateFirewallPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFirewall(payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createFirewall(payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['FirewallsApi.createFirewall']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Deletes a firewall by specifying the firewall ID in the path. If the firewall is currently attached to a virtual machine, it must be detached before deletion. For more information, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/core-resources/firewalls/delete-firewall).
         * @summary Delete firewall
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFirewall(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteFirewall(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['FirewallsApi.deleteFirewall']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Removes a firewall rule from firewall by providing the firewall ID and firewall rule ID in the path. For more information, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/core-resources/firewalls/remove-firewall-rule-from-firewall).
         * @summary Delete firewall rules from firewall
         * @param {number} firewallId
         * @param {number} firewallRuleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFirewallRulesFromFirewall(firewallId, firewallRuleId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteFirewallRulesFromFirewall(firewallId, firewallRuleId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['FirewallsApi.deleteFirewallRulesFromFirewall']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieves a list of existing firewalls and their details, including the security rules they contain and information about the virtual machines to which they are attached. For more information about the firewalls features offered by Infrahub, [**click here**](https://infrahub-doc.nexgencloud.com/docs/network-security/security-groups).
         * @summary List firewalls
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [search]
         * @param {string} [environment] Filter Environment ID or Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFirewalls(page, pageSize, search, environment, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listFirewalls(page, pageSize, search, environment, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['FirewallsApi.listFirewalls']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieves the details of an existing firewall, including the security rules it contains and information about the virtual machines to which it is attached.
         * @summary Retrieve firewall details
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveFirewallDetails(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveFirewallDetails(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['FirewallsApi.retrieveFirewallDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * FirewallsApi - factory interface
 * @export
 */
export const FirewallsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = FirewallsApiFp(configuration);
    return {
        /**
         * Creates a [**firewall rule**](https://infrahub-doc.nexgencloud.com/docs/network-security/security-rules) and adds it to an existing firewall. Include the firewall ID in the path, and provide the firewall rule configuration in the request body.
         * @summary Add firewall rule to firewall
         * @param {number} firewallId
         * @param {CreateFirewallRulePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFirewallRuleToFirewall(firewallId, payload, options) {
            return localVarFp.addFirewallRuleToFirewall(firewallId, payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a firewall to which firewall rules can be added. A firewall can be attached to one or more virtual machines to control inbound and outbound traffic. In the body of the request, include the name of the firewall, the ID of the environment within which the firewall will be created, and an optional description. To obtain the ID of the environment, make a request to the [**list environments**](https://infrahub-doc.nexgencloud.com/docs/api-reference/core-resources/environments/list-environments) endpoint.
         * @summary Create firewall
         * @param {CreateFirewallPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFirewall(payload, options) {
            return localVarFp.createFirewall(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a firewall by specifying the firewall ID in the path. If the firewall is currently attached to a virtual machine, it must be detached before deletion. For more information, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/core-resources/firewalls/delete-firewall).
         * @summary Delete firewall
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFirewall(id, options) {
            return localVarFp.deleteFirewall(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a firewall rule from firewall by providing the firewall ID and firewall rule ID in the path. For more information, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/core-resources/firewalls/remove-firewall-rule-from-firewall).
         * @summary Delete firewall rules from firewall
         * @param {number} firewallId
         * @param {number} firewallRuleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFirewallRulesFromFirewall(firewallId, firewallRuleId, options) {
            return localVarFp.deleteFirewallRulesFromFirewall(firewallId, firewallRuleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of existing firewalls and their details, including the security rules they contain and information about the virtual machines to which they are attached. For more information about the firewalls features offered by Infrahub, [**click here**](https://infrahub-doc.nexgencloud.com/docs/network-security/security-groups).
         * @summary List firewalls
         * @param {number} [page]
         * @param {number} [pageSize]
         * @param {string} [search]
         * @param {string} [environment] Filter Environment ID or Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFirewalls(page, pageSize, search, environment, options) {
            return localVarFp.listFirewalls(page, pageSize, search, environment, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the details of an existing firewall, including the security rules it contains and information about the virtual machines to which it is attached.
         * @summary Retrieve firewall details
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveFirewallDetails(id, options) {
            return localVarFp.retrieveFirewallDetails(id, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * FirewallsApi - object-oriented interface
 * @export
 * @class FirewallsApi
 * @extends {BaseAPI}
 */
export class FirewallsApi extends BaseAPI {
    /**
     * Creates a [**firewall rule**](https://infrahub-doc.nexgencloud.com/docs/network-security/security-rules) and adds it to an existing firewall. Include the firewall ID in the path, and provide the firewall rule configuration in the request body.
     * @summary Add firewall rule to firewall
     * @param {number} firewallId
     * @param {CreateFirewallRulePayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirewallsApi
     */
    addFirewallRuleToFirewall(firewallId, payload, options) {
        return FirewallsApiFp(this.configuration).addFirewallRuleToFirewall(firewallId, payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a firewall to which firewall rules can be added. A firewall can be attached to one or more virtual machines to control inbound and outbound traffic. In the body of the request, include the name of the firewall, the ID of the environment within which the firewall will be created, and an optional description. To obtain the ID of the environment, make a request to the [**list environments**](https://infrahub-doc.nexgencloud.com/docs/api-reference/core-resources/environments/list-environments) endpoint.
     * @summary Create firewall
     * @param {CreateFirewallPayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirewallsApi
     */
    createFirewall(payload, options) {
        return FirewallsApiFp(this.configuration).createFirewall(payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a firewall by specifying the firewall ID in the path. If the firewall is currently attached to a virtual machine, it must be detached before deletion. For more information, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/core-resources/firewalls/delete-firewall).
     * @summary Delete firewall
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirewallsApi
     */
    deleteFirewall(id, options) {
        return FirewallsApiFp(this.configuration).deleteFirewall(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Removes a firewall rule from firewall by providing the firewall ID and firewall rule ID in the path. For more information, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/core-resources/firewalls/remove-firewall-rule-from-firewall).
     * @summary Delete firewall rules from firewall
     * @param {number} firewallId
     * @param {number} firewallRuleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirewallsApi
     */
    deleteFirewallRulesFromFirewall(firewallId, firewallRuleId, options) {
        return FirewallsApiFp(this.configuration).deleteFirewallRulesFromFirewall(firewallId, firewallRuleId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of existing firewalls and their details, including the security rules they contain and information about the virtual machines to which they are attached. For more information about the firewalls features offered by Infrahub, [**click here**](https://infrahub-doc.nexgencloud.com/docs/network-security/security-groups).
     * @summary List firewalls
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {string} [search]
     * @param {string} [environment] Filter Environment ID or Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirewallsApi
     */
    listFirewalls(page, pageSize, search, environment, options) {
        return FirewallsApiFp(this.configuration).listFirewalls(page, pageSize, search, environment, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the details of an existing firewall, including the security rules it contains and information about the virtual machines to which it is attached.
     * @summary Retrieve firewall details
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirewallsApi
     */
    retrieveFirewallDetails(id, options) {
        return FirewallsApiFp(this.configuration).retrieveFirewallDetails(id, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * FlavorApi - axios parameter creator
 * @export
 */
export const FlavorApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns a list of available virtual machine hardware configurations, known as             **flavors**. You can specify a `region_name` in the query string of the request to             retrieve flavors available only in the specified region; by default, it returns flavors              available in all regions. For more details on flavors,              [**click here**](https://infrahub-doc.nexgencloud.com/docs/hardware/flavors).
         * @summary List Flavors
         * @param {string} [region] Region Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFlavors: (region_1, ...args_1) => __awaiter(this, [region_1, ...args_1], void 0, function* (region, options = {}) {
            const localVarPath = `/core/flavors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * FlavorApi - functional programming interface
 * @export
 */
export const FlavorApiFp = function (configuration) {
    const localVarAxiosParamCreator = FlavorApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns a list of available virtual machine hardware configurations, known as             **flavors**. You can specify a `region_name` in the query string of the request to             retrieve flavors available only in the specified region; by default, it returns flavors              available in all regions. For more details on flavors,              [**click here**](https://infrahub-doc.nexgencloud.com/docs/hardware/flavors).
         * @summary List Flavors
         * @param {string} [region] Region Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFlavors(region, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listFlavors(region, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['FlavorApi.listFlavors']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * FlavorApi - factory interface
 * @export
 */
export const FlavorApiFactory = function (configuration, basePath, axios) {
    const localVarFp = FlavorApiFp(configuration);
    return {
        /**
         * Returns a list of available virtual machine hardware configurations, known as             **flavors**. You can specify a `region_name` in the query string of the request to             retrieve flavors available only in the specified region; by default, it returns flavors              available in all regions. For more details on flavors,              [**click here**](https://infrahub-doc.nexgencloud.com/docs/hardware/flavors).
         * @summary List Flavors
         * @param {string} [region] Region Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFlavors(region, options) {
            return localVarFp.listFlavors(region, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * FlavorApi - object-oriented interface
 * @export
 * @class FlavorApi
 * @extends {BaseAPI}
 */
export class FlavorApi extends BaseAPI {
    /**
     * Returns a list of available virtual machine hardware configurations, known as             **flavors**. You can specify a `region_name` in the query string of the request to             retrieve flavors available only in the specified region; by default, it returns flavors              available in all regions. For more details on flavors,              [**click here**](https://infrahub-doc.nexgencloud.com/docs/hardware/flavors).
     * @summary List Flavors
     * @param {string} [region] Region Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlavorApi
     */
    listFlavors(region, options) {
        return FlavorApiFp(this.configuration).listFlavors(region, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * FloatingIpApi - axios parameter creator
 * @export
 */
export const FloatingIpApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Initiates the creation of a public IP address and attaches it to an existing virtual machine, making it accessible through the internet. Include the virtual machine ID in the path to attach a public IP to the specified VM. For more information on public IP addresses, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/public-ip).
         * @summary Attach public IP to virtual machine
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachPublicIpToVirtualMachine: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('attachPublicIpToVirtualMachine', 'id', id);
            const localVarPath = `/core/virtual-machines/{id}/attach-floatingip`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Removes a public IP address from an existing virtual machine, disabling internet accessibility to the VM. Include the virtual machine ID in the path to detach the public IP from the specified VM. For more information on public IP addresses, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/public-ip).
         * @summary Detach public IP from virtual machine
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detachPublicIpFromVirtualMachine: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('detachPublicIpFromVirtualMachine', 'id', id);
            const localVarPath = `/core/virtual-machines/{id}/detach-floatingip`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * FloatingIpApi - functional programming interface
 * @export
 */
export const FloatingIpApiFp = function (configuration) {
    const localVarAxiosParamCreator = FloatingIpApiAxiosParamCreator(configuration);
    return {
        /**
         * Initiates the creation of a public IP address and attaches it to an existing virtual machine, making it accessible through the internet. Include the virtual machine ID in the path to attach a public IP to the specified VM. For more information on public IP addresses, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/public-ip).
         * @summary Attach public IP to virtual machine
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachPublicIpToVirtualMachine(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.attachPublicIpToVirtualMachine(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['FloatingIpApi.attachPublicIpToVirtualMachine']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Removes a public IP address from an existing virtual machine, disabling internet accessibility to the VM. Include the virtual machine ID in the path to detach the public IP from the specified VM. For more information on public IP addresses, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/public-ip).
         * @summary Detach public IP from virtual machine
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detachPublicIpFromVirtualMachine(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.detachPublicIpFromVirtualMachine(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['FloatingIpApi.detachPublicIpFromVirtualMachine']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * FloatingIpApi - factory interface
 * @export
 */
export const FloatingIpApiFactory = function (configuration, basePath, axios) {
    const localVarFp = FloatingIpApiFp(configuration);
    return {
        /**
         * Initiates the creation of a public IP address and attaches it to an existing virtual machine, making it accessible through the internet. Include the virtual machine ID in the path to attach a public IP to the specified VM. For more information on public IP addresses, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/public-ip).
         * @summary Attach public IP to virtual machine
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachPublicIpToVirtualMachine(id, options) {
            return localVarFp.attachPublicIpToVirtualMachine(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a public IP address from an existing virtual machine, disabling internet accessibility to the VM. Include the virtual machine ID in the path to detach the public IP from the specified VM. For more information on public IP addresses, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/public-ip).
         * @summary Detach public IP from virtual machine
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detachPublicIpFromVirtualMachine(id, options) {
            return localVarFp.detachPublicIpFromVirtualMachine(id, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * FloatingIpApi - object-oriented interface
 * @export
 * @class FloatingIpApi
 * @extends {BaseAPI}
 */
export class FloatingIpApi extends BaseAPI {
    /**
     * Initiates the creation of a public IP address and attaches it to an existing virtual machine, making it accessible through the internet. Include the virtual machine ID in the path to attach a public IP to the specified VM. For more information on public IP addresses, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/public-ip).
     * @summary Attach public IP to virtual machine
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloatingIpApi
     */
    attachPublicIpToVirtualMachine(id, options) {
        return FloatingIpApiFp(this.configuration).attachPublicIpToVirtualMachine(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Removes a public IP address from an existing virtual machine, disabling internet accessibility to the VM. Include the virtual machine ID in the path to detach the public IP from the specified VM. For more information on public IP addresses, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/public-ip).
     * @summary Detach public IP from virtual machine
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloatingIpApi
     */
    detachPublicIpFromVirtualMachine(id, options) {
        return FloatingIpApiFp(this.configuration).detachPublicIpFromVirtualMachine(id, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * GpuApi - axios parameter creator
 * @export
 */
export const GpuApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns a list of all available GPUs that can be utilized in the creation of custom virtual machine configurations.
         * @summary List GPUs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGpus: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/core/gpus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * GpuApi - functional programming interface
 * @export
 */
export const GpuApiFp = function (configuration) {
    const localVarAxiosParamCreator = GpuApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns a list of all available GPUs that can be utilized in the creation of custom virtual machine configurations.
         * @summary List GPUs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGpus(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listGpus(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['GpuApi.listGpus']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * GpuApi - factory interface
 * @export
 */
export const GpuApiFactory = function (configuration, basePath, axios) {
    const localVarFp = GpuApiFp(configuration);
    return {
        /**
         * Returns a list of all available GPUs that can be utilized in the creation of custom virtual machine configurations.
         * @summary List GPUs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGpus(options) {
            return localVarFp.listGpus(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * GpuApi - object-oriented interface
 * @export
 * @class GpuApi
 * @extends {BaseAPI}
 */
export class GpuApi extends BaseAPI {
    /**
     * Returns a list of all available GPUs that can be utilized in the creation of custom virtual machine configurations.
     * @summary List GPUs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GpuApi
     */
    listGpus(options) {
        return GpuApiFp(this.configuration).listGpus(options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * ImageApi - axios parameter creator
 * @export
 */
export const ImageApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Deletes an image permanently. Provide the image ID in the path to specify the image to be deleted.
         * @summary Delete an image
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnImage: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAnImage', 'id', id);
            const localVarPath = `/core/images/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Check if an Image name is available
         * @summary Fetch name availability for Images
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchNameAvailabilityForImages: (name_1, ...args_1) => __awaiter(this, [name_1, ...args_1], void 0, function* (name, options = {}) {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('fetchNameAvailabilityForImages', 'name', name);
            const localVarPath = `/core/image/name-availability/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve details of a specific image by providing the image ID.
         * @summary Get Private Image Details
         * @param {number} id
         * @param {boolean} [includeRelatedVms]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrivateImageDetails: (id_1, includeRelatedVms_1, ...args_1) => __awaiter(this, [id_1, includeRelatedVms_1, ...args_1], void 0, function* (id, includeRelatedVms, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPrivateImageDetails', 'id', id);
            const localVarPath = `/core/images/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (includeRelatedVms !== undefined) {
                localVarQueryParameter['include_related_vms'] = includeRelatedVms;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of all available operating system (OS) images, providing details about each image\'s corresponding virtual machine operating system. You can include the optional `region` parameter in the query string of the request to specifically return OS images from the designated region. Additionally, use the `include_public` parameter to specify whether to include public images in the response. For more information onOS images, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/images).
         * @summary List Images
         * @param {string} [region] Region Name
         * @param {boolean} [includePublic] Flag to include public images in the response (true/false). Default is true.
         * @param {string} [search] Search query to filter images by name
         * @param {number} [page] Page number for pagination
         * @param {number} [perPage] Number of Images per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listImages: (region_1, includePublic_1, search_1, page_1, perPage_1, ...args_1) => __awaiter(this, [region_1, includePublic_1, search_1, page_1, perPage_1, ...args_1], void 0, function* (region, includePublic, search, page, perPage, options = {}) {
            const localVarPath = `/core/images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }
            if (includePublic !== undefined) {
                localVarQueryParameter['include_public'] = includePublic;
            }
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ImageApi - functional programming interface
 * @export
 */
export const ImageApiFp = function (configuration) {
    const localVarAxiosParamCreator = ImageApiAxiosParamCreator(configuration);
    return {
        /**
         * Deletes an image permanently. Provide the image ID in the path to specify the image to be deleted.
         * @summary Delete an image
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnImage(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAnImage(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ImageApi.deleteAnImage']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Check if an Image name is available
         * @summary Fetch name availability for Images
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchNameAvailabilityForImages(name, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchNameAvailabilityForImages(name, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ImageApi.fetchNameAvailabilityForImages']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieve details of a specific image by providing the image ID.
         * @summary Get Private Image Details
         * @param {number} id
         * @param {boolean} [includeRelatedVms]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrivateImageDetails(id, includeRelatedVms, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getPrivateImageDetails(id, includeRelatedVms, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ImageApi.getPrivateImageDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Returns a list of all available operating system (OS) images, providing details about each image\'s corresponding virtual machine operating system. You can include the optional `region` parameter in the query string of the request to specifically return OS images from the designated region. Additionally, use the `include_public` parameter to specify whether to include public images in the response. For more information onOS images, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/images).
         * @summary List Images
         * @param {string} [region] Region Name
         * @param {boolean} [includePublic] Flag to include public images in the response (true/false). Default is true.
         * @param {string} [search] Search query to filter images by name
         * @param {number} [page] Page number for pagination
         * @param {number} [perPage] Number of Images per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listImages(region, includePublic, search, page, perPage, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listImages(region, includePublic, search, page, perPage, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ImageApi.listImages']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * ImageApi - factory interface
 * @export
 */
export const ImageApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ImageApiFp(configuration);
    return {
        /**
         * Deletes an image permanently. Provide the image ID in the path to specify the image to be deleted.
         * @summary Delete an image
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnImage(id, options) {
            return localVarFp.deleteAnImage(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if an Image name is available
         * @summary Fetch name availability for Images
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchNameAvailabilityForImages(name, options) {
            return localVarFp.fetchNameAvailabilityForImages(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve details of a specific image by providing the image ID.
         * @summary Get Private Image Details
         * @param {number} id
         * @param {boolean} [includeRelatedVms]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrivateImageDetails(id, includeRelatedVms, options) {
            return localVarFp.getPrivateImageDetails(id, includeRelatedVms, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all available operating system (OS) images, providing details about each image\'s corresponding virtual machine operating system. You can include the optional `region` parameter in the query string of the request to specifically return OS images from the designated region. Additionally, use the `include_public` parameter to specify whether to include public images in the response. For more information onOS images, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/images).
         * @summary List Images
         * @param {string} [region] Region Name
         * @param {boolean} [includePublic] Flag to include public images in the response (true/false). Default is true.
         * @param {string} [search] Search query to filter images by name
         * @param {number} [page] Page number for pagination
         * @param {number} [perPage] Number of Images per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listImages(region, includePublic, search, page, perPage, options) {
            return localVarFp.listImages(region, includePublic, search, page, perPage, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ImageApi - object-oriented interface
 * @export
 * @class ImageApi
 * @extends {BaseAPI}
 */
export class ImageApi extends BaseAPI {
    /**
     * Deletes an image permanently. Provide the image ID in the path to specify the image to be deleted.
     * @summary Delete an image
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    deleteAnImage(id, options) {
        return ImageApiFp(this.configuration).deleteAnImage(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Check if an Image name is available
     * @summary Fetch name availability for Images
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    fetchNameAvailabilityForImages(name, options) {
        return ImageApiFp(this.configuration).fetchNameAvailabilityForImages(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve details of a specific image by providing the image ID.
     * @summary Get Private Image Details
     * @param {number} id
     * @param {boolean} [includeRelatedVms]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    getPrivateImageDetails(id, includeRelatedVms, options) {
        return ImageApiFp(this.configuration).getPrivateImageDetails(id, includeRelatedVms, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of all available operating system (OS) images, providing details about each image\'s corresponding virtual machine operating system. You can include the optional `region` parameter in the query string of the request to specifically return OS images from the designated region. Additionally, use the `include_public` parameter to specify whether to include public images in the response. For more information onOS images, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/images).
     * @summary List Images
     * @param {string} [region] Region Name
     * @param {boolean} [includePublic] Flag to include public images in the response (true/false). Default is true.
     * @param {string} [search] Search query to filter images by name
     * @param {number} [page] Page number for pagination
     * @param {number} [perPage] Number of Images per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    listImages(region, includePublic, search, page, perPage, options) {
        return ImageApiFp(this.configuration).listImages(region, includePublic, search, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * InviteApi - axios parameter creator
 * @export
 */
export const InviteApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Deletes an invitation for a user to join your organization. For additional information on deleting an invitation, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/organization/invites/delete-invite).
         * @summary Delete Invite
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInvite: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteInvite', 'id', id);
            const localVarPath = `/auth/invites/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Invites a user to join your organization. For additional information on inviting users to the organization, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/organization/invites/invite-member).
         * @summary Invite User to Organization
         * @param {InviteUserPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteUserToOrganization: (payload_1, ...args_1) => __awaiter(this, [payload_1, ...args_1], void 0, function* (payload, options = {}) {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('inviteUserToOrganization', 'payload', payload);
            const localVarPath = `/auth/invites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve a list of email invitations from your organization. For additional information on listing invited users, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/organization/invites/list-invites).
         * @summary List Invites
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInvites: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/auth/invites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * InviteApi - functional programming interface
 * @export
 */
export const InviteApiFp = function (configuration) {
    const localVarAxiosParamCreator = InviteApiAxiosParamCreator(configuration);
    return {
        /**
         * Deletes an invitation for a user to join your organization. For additional information on deleting an invitation, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/organization/invites/delete-invite).
         * @summary Delete Invite
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInvite(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteInvite(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['InviteApi.deleteInvite']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Invites a user to join your organization. For additional information on inviting users to the organization, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/organization/invites/invite-member).
         * @summary Invite User to Organization
         * @param {InviteUserPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteUserToOrganization(payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.inviteUserToOrganization(payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['InviteApi.inviteUserToOrganization']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieve a list of email invitations from your organization. For additional information on listing invited users, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/organization/invites/list-invites).
         * @summary List Invites
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInvites(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listInvites(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['InviteApi.listInvites']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * InviteApi - factory interface
 * @export
 */
export const InviteApiFactory = function (configuration, basePath, axios) {
    const localVarFp = InviteApiFp(configuration);
    return {
        /**
         * Deletes an invitation for a user to join your organization. For additional information on deleting an invitation, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/organization/invites/delete-invite).
         * @summary Delete Invite
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInvite(id, options) {
            return localVarFp.deleteInvite(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Invites a user to join your organization. For additional information on inviting users to the organization, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/organization/invites/invite-member).
         * @summary Invite User to Organization
         * @param {InviteUserPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteUserToOrganization(payload, options) {
            return localVarFp.inviteUserToOrganization(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of email invitations from your organization. For additional information on listing invited users, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/organization/invites/list-invites).
         * @summary List Invites
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInvites(options) {
            return localVarFp.listInvites(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * InviteApi - object-oriented interface
 * @export
 * @class InviteApi
 * @extends {BaseAPI}
 */
export class InviteApi extends BaseAPI {
    /**
     * Deletes an invitation for a user to join your organization. For additional information on deleting an invitation, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/organization/invites/delete-invite).
     * @summary Delete Invite
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteApi
     */
    deleteInvite(id, options) {
        return InviteApiFp(this.configuration).deleteInvite(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Invites a user to join your organization. For additional information on inviting users to the organization, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/organization/invites/invite-member).
     * @summary Invite User to Organization
     * @param {InviteUserPayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteApi
     */
    inviteUserToOrganization(payload, options) {
        return InviteApiFp(this.configuration).inviteUserToOrganization(payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a list of email invitations from your organization. For additional information on listing invited users, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/organization/invites/list-invites).
     * @summary List Invites
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteApi
     */
    listInvites(options) {
        return InviteApiFp(this.configuration).listInvites(options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * KeypairApi - axios parameter creator
 * @export
 */
export const KeypairApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Permanently deletes a specified key pair. Include the key pair ID in the request path to remove the designated key pair.
         * @summary Delete key pair
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKeyPair: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteKeyPair', 'id', id);
            const localVarPath = `/core/keypair/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Imports a new key pair for secure shell (SSH) access to your resources. To import a new key pair, include the key name, environment name, and public key in the request body. For additional information on importing SSH key pairs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/getting-started/create-keypair#importing-an-ssh-key).
         * @summary Import key pair
         * @param {ImportKeypairPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importKeyPair: (payload_1, ...args_1) => __awaiter(this, [payload_1, ...args_1], void 0, function* (payload, options = {}) {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('importKeyPair', 'payload', payload);
            const localVarPath = `/core/keypairs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieves a list of your existing SSH key pairs, providing details for each. For additional information on SSH key pairs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/keypairs-available-features).
         * @summary List key pairs
         * @param {string} [page] Page Number
         * @param {string} [pageSize] Data Per Page
         * @param {string} [search]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKeyPairs: (page_1, pageSize_1, search_1, ...args_1) => __awaiter(this, [page_1, pageSize_1, search_1, ...args_1], void 0, function* (page, pageSize, search, options = {}) {
            const localVarPath = `/core/keypairs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates the name of a specified key pair. Include the key pair ID in the request path and the new `name` of the key pair in the request body.
         * @summary Update key pair name
         * @param {number} id
         * @param {UpdateKeypairName} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateKeyPairName: (id_1, payload_1, ...args_1) => __awaiter(this, [id_1, payload_1, ...args_1], void 0, function* (id, payload, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateKeyPairName', 'id', id);
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('updateKeyPairName', 'payload', payload);
            const localVarPath = `/core/keypair/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * KeypairApi - functional programming interface
 * @export
 */
export const KeypairApiFp = function (configuration) {
    const localVarAxiosParamCreator = KeypairApiAxiosParamCreator(configuration);
    return {
        /**
         * Permanently deletes a specified key pair. Include the key pair ID in the request path to remove the designated key pair.
         * @summary Delete key pair
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKeyPair(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteKeyPair(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['KeypairApi.deleteKeyPair']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Imports a new key pair for secure shell (SSH) access to your resources. To import a new key pair, include the key name, environment name, and public key in the request body. For additional information on importing SSH key pairs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/getting-started/create-keypair#importing-an-ssh-key).
         * @summary Import key pair
         * @param {ImportKeypairPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importKeyPair(payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.importKeyPair(payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['KeypairApi.importKeyPair']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieves a list of your existing SSH key pairs, providing details for each. For additional information on SSH key pairs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/keypairs-available-features).
         * @summary List key pairs
         * @param {string} [page] Page Number
         * @param {string} [pageSize] Data Per Page
         * @param {string} [search]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKeyPairs(page, pageSize, search, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listKeyPairs(page, pageSize, search, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['KeypairApi.listKeyPairs']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Updates the name of a specified key pair. Include the key pair ID in the request path and the new `name` of the key pair in the request body.
         * @summary Update key pair name
         * @param {number} id
         * @param {UpdateKeypairName} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateKeyPairName(id, payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateKeyPairName(id, payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['KeypairApi.updateKeyPairName']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * KeypairApi - factory interface
 * @export
 */
export const KeypairApiFactory = function (configuration, basePath, axios) {
    const localVarFp = KeypairApiFp(configuration);
    return {
        /**
         * Permanently deletes a specified key pair. Include the key pair ID in the request path to remove the designated key pair.
         * @summary Delete key pair
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKeyPair(id, options) {
            return localVarFp.deleteKeyPair(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Imports a new key pair for secure shell (SSH) access to your resources. To import a new key pair, include the key name, environment name, and public key in the request body. For additional information on importing SSH key pairs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/getting-started/create-keypair#importing-an-ssh-key).
         * @summary Import key pair
         * @param {ImportKeypairPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importKeyPair(payload, options) {
            return localVarFp.importKeyPair(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of your existing SSH key pairs, providing details for each. For additional information on SSH key pairs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/keypairs-available-features).
         * @summary List key pairs
         * @param {string} [page] Page Number
         * @param {string} [pageSize] Data Per Page
         * @param {string} [search]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listKeyPairs(page, pageSize, search, options) {
            return localVarFp.listKeyPairs(page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the name of a specified key pair. Include the key pair ID in the request path and the new `name` of the key pair in the request body.
         * @summary Update key pair name
         * @param {number} id
         * @param {UpdateKeypairName} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateKeyPairName(id, payload, options) {
            return localVarFp.updateKeyPairName(id, payload, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * KeypairApi - object-oriented interface
 * @export
 * @class KeypairApi
 * @extends {BaseAPI}
 */
export class KeypairApi extends BaseAPI {
    /**
     * Permanently deletes a specified key pair. Include the key pair ID in the request path to remove the designated key pair.
     * @summary Delete key pair
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeypairApi
     */
    deleteKeyPair(id, options) {
        return KeypairApiFp(this.configuration).deleteKeyPair(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Imports a new key pair for secure shell (SSH) access to your resources. To import a new key pair, include the key name, environment name, and public key in the request body. For additional information on importing SSH key pairs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/getting-started/create-keypair#importing-an-ssh-key).
     * @summary Import key pair
     * @param {ImportKeypairPayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeypairApi
     */
    importKeyPair(payload, options) {
        return KeypairApiFp(this.configuration).importKeyPair(payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of your existing SSH key pairs, providing details for each. For additional information on SSH key pairs, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/keypairs-available-features).
     * @summary List key pairs
     * @param {string} [page] Page Number
     * @param {string} [pageSize] Data Per Page
     * @param {string} [search]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeypairApi
     */
    listKeyPairs(page, pageSize, search, options) {
        return KeypairApiFp(this.configuration).listKeyPairs(page, pageSize, search, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the name of a specified key pair. Include the key pair ID in the request path and the new `name` of the key pair in the request body.
     * @summary Update key pair name
     * @param {number} id
     * @param {UpdateKeypairName} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeypairApi
     */
    updateKeyPairName(id, payload, options) {
        return KeypairApiFp(this.configuration).updateKeyPairName(id, payload, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * OrganizationApi - axios parameter creator
 * @export
 */
export const OrganizationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Removes a member from your organization. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/organization/remove-member).
         * @summary Remove Organization Member
         * @param {RemoveMemberPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOrganizationMember: (payload_1, ...args_1) => __awaiter(this, [payload_1, ...args_1], void 0, function* (payload, options = {}) {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('removeOrganizationMember', 'payload', payload);
            const localVarPath = `/auth/organizations/remove-member`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieves detailed information about your organization, including current credit, threshold, number of instances, and number of volumes. For additional information on organizations, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/organization/retrieve-org-details).
         * @summary Retrieve Organization Information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOrganizationInformation: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/auth/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates the name of the organization. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/organization/update-org-name).
         * @summary Update Organization Information
         * @param {UpdateOrganizationPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganizationInformation: (payload_1, ...args_1) => __awaiter(this, [payload_1, ...args_1], void 0, function* (payload, options = {}) {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('updateOrganizationInformation', 'payload', payload);
            const localVarPath = `/auth/organizations/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * OrganizationApi - functional programming interface
 * @export
 */
export const OrganizationApiFp = function (configuration) {
    const localVarAxiosParamCreator = OrganizationApiAxiosParamCreator(configuration);
    return {
        /**
         * Removes a member from your organization. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/organization/remove-member).
         * @summary Remove Organization Member
         * @param {RemoveMemberPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOrganizationMember(payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeOrganizationMember(payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['OrganizationApi.removeOrganizationMember']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieves detailed information about your organization, including current credit, threshold, number of instances, and number of volumes. For additional information on organizations, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/organization/retrieve-org-details).
         * @summary Retrieve Organization Information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOrganizationInformation(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveOrganizationInformation(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['OrganizationApi.retrieveOrganizationInformation']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Updates the name of the organization. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/organization/update-org-name).
         * @summary Update Organization Information
         * @param {UpdateOrganizationPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganizationInformation(payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateOrganizationInformation(payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['OrganizationApi.updateOrganizationInformation']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * OrganizationApi - factory interface
 * @export
 */
export const OrganizationApiFactory = function (configuration, basePath, axios) {
    const localVarFp = OrganizationApiFp(configuration);
    return {
        /**
         * Removes a member from your organization. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/organization/remove-member).
         * @summary Remove Organization Member
         * @param {RemoveMemberPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOrganizationMember(payload, options) {
            return localVarFp.removeOrganizationMember(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves detailed information about your organization, including current credit, threshold, number of instances, and number of volumes. For additional information on organizations, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/organization/retrieve-org-details).
         * @summary Retrieve Organization Information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveOrganizationInformation(options) {
            return localVarFp.retrieveOrganizationInformation(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the name of the organization. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/organization/update-org-name).
         * @summary Update Organization Information
         * @param {UpdateOrganizationPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganizationInformation(payload, options) {
            return localVarFp.updateOrganizationInformation(payload, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * OrganizationApi - object-oriented interface
 * @export
 * @class OrganizationApi
 * @extends {BaseAPI}
 */
export class OrganizationApi extends BaseAPI {
    /**
     * Removes a member from your organization. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/organization/remove-member).
     * @summary Remove Organization Member
     * @param {RemoveMemberPayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    removeOrganizationMember(payload, options) {
        return OrganizationApiFp(this.configuration).removeOrganizationMember(payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves detailed information about your organization, including current credit, threshold, number of instances, and number of volumes. For additional information on organizations, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/organization/retrieve-org-details).
     * @summary Retrieve Organization Information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    retrieveOrganizationInformation(options) {
        return OrganizationApiFp(this.configuration).retrieveOrganizationInformation(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the name of the organization. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/organization/update-org-name).
     * @summary Update Organization Information
     * @param {UpdateOrganizationPayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    updateOrganizationInformation(payload, options) {
        return OrganizationApiFp(this.configuration).updateOrganizationInformation(payload, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * PaymentApi - axios parameter creator
 * @export
 */
export const PaymentApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary GET: View payment details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getViewPaymentDetails: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/billing/payment/payment-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary POST: Initiate payment
         * @param {PaymentInitiatePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postInitiatePayment: (payload_1, ...args_1) => __awaiter(this, [payload_1, ...args_1], void 0, function* (payload, options = {}) {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('postInitiatePayment', 'payload', payload);
            const localVarPath = `/billing/payment/payment-initiate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PaymentApi - functional programming interface
 * @export
 */
export const PaymentApiFp = function (configuration) {
    const localVarAxiosParamCreator = PaymentApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary GET: View payment details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getViewPaymentDetails(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getViewPaymentDetails(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['PaymentApi.getViewPaymentDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary POST: Initiate payment
         * @param {PaymentInitiatePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postInitiatePayment(payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.postInitiatePayment(payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['PaymentApi.postInitiatePayment']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * PaymentApi - factory interface
 * @export
 */
export const PaymentApiFactory = function (configuration, basePath, axios) {
    const localVarFp = PaymentApiFp(configuration);
    return {
        /**
         *
         * @summary GET: View payment details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getViewPaymentDetails(options) {
            return localVarFp.getViewPaymentDetails(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary POST: Initiate payment
         * @param {PaymentInitiatePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postInitiatePayment(payload, options) {
            return localVarFp.postInitiatePayment(payload, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * PaymentApi - object-oriented interface
 * @export
 * @class PaymentApi
 * @extends {BaseAPI}
 */
export class PaymentApi extends BaseAPI {
    /**
     *
     * @summary GET: View payment details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    getViewPaymentDetails(options) {
        return PaymentApiFp(this.configuration).getViewPaymentDetails(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary POST: Initiate payment
     * @param {PaymentInitiatePayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    postInitiatePayment(payload, options) {
        return PaymentApiFp(this.configuration).postInitiatePayment(payload, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * PermissionApi - axios parameter creator
 * @export
 */
export const PermissionApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Retrieves a list of permissions that users can be granted to access a particular resource action. For additional information on permissions, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/permission/permissions).
         * @summary List Permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPermissions: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/auth/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PermissionApi - functional programming interface
 * @export
 */
export const PermissionApiFp = function (configuration) {
    const localVarAxiosParamCreator = PermissionApiAxiosParamCreator(configuration);
    return {
        /**
         * Retrieves a list of permissions that users can be granted to access a particular resource action. For additional information on permissions, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/permission/permissions).
         * @summary List Permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPermissions(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listPermissions(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['PermissionApi.listPermissions']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * PermissionApi - factory interface
 * @export
 */
export const PermissionApiFactory = function (configuration, basePath, axios) {
    const localVarFp = PermissionApiFp(configuration);
    return {
        /**
         * Retrieves a list of permissions that users can be granted to access a particular resource action. For additional information on permissions, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/permission/permissions).
         * @summary List Permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPermissions(options) {
            return localVarFp.listPermissions(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * PermissionApi - object-oriented interface
 * @export
 * @class PermissionApi
 * @extends {BaseAPI}
 */
export class PermissionApi extends BaseAPI {
    /**
     * Retrieves a list of permissions that users can be granted to access a particular resource action. For additional information on permissions, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/permission/permissions).
     * @summary List Permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionApi
     */
    listPermissions(options) {
        return PermissionApiFp(this.configuration).listPermissions(options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * PolicyApi - axios parameter creator
 * @export
 */
export const PolicyApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Retrieves a list of policies available for addition to RBAC roles. For additional information on policies, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/policies).
         * @summary List Policies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPolicies: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/auth/policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PolicyApi - functional programming interface
 * @export
 */
export const PolicyApiFp = function (configuration) {
    const localVarAxiosParamCreator = PolicyApiAxiosParamCreator(configuration);
    return {
        /**
         * Retrieves a list of policies available for addition to RBAC roles. For additional information on policies, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/policies).
         * @summary List Policies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPolicies(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listPolicies(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['PolicyApi.listPolicies']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * PolicyApi - factory interface
 * @export
 */
export const PolicyApiFactory = function (configuration, basePath, axios) {
    const localVarFp = PolicyApiFp(configuration);
    return {
        /**
         * Retrieves a list of policies available for addition to RBAC roles. For additional information on policies, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/policies).
         * @summary List Policies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPolicies(options) {
            return localVarFp.listPolicies(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * PolicyApi - object-oriented interface
 * @export
 * @class PolicyApi
 * @extends {BaseAPI}
 */
export class PolicyApi extends BaseAPI {
    /**
     * Retrieves a list of policies available for addition to RBAC roles. For additional information on policies, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/policies).
     * @summary List Policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    listPolicies(options) {
        return PolicyApiFp(this.configuration).listPolicies(options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * PricebookApi - axios parameter creator
 * @export
 */
export const PricebookApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrivePricebook: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/pricebook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PricebookApi - functional programming interface
 * @export
 */
export const PricebookApiFp = function (configuration) {
    const localVarAxiosParamCreator = PricebookApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrivePricebook(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrivePricebook(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['PricebookApi.retrivePricebook']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * PricebookApi - factory interface
 * @export
 */
export const PricebookApiFactory = function (configuration, basePath, axios) {
    const localVarFp = PricebookApiFp(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrivePricebook(options) {
            return localVarFp.retrivePricebook(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * PricebookApi - object-oriented interface
 * @export
 * @class PricebookApi
 * @extends {BaseAPI}
 */
export class PricebookApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricebookApi
     */
    retrivePricebook(options) {
        return PricebookApiFp(this.configuration).retrivePricebook(options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * ProfileApi - axios parameter creator
 * @export
 */
export const ProfileApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a provisioning profile to save the configuration of a virtual machine for future use. Include the profile name, description, and virtual machine configuration details in the request body. For more information about virtual machine profiles, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/provisioning-profiles).
         * @summary Create profile
         * @param {CreateProfilePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProfile: (payload_1, ...args_1) => __awaiter(this, [payload_1, ...args_1], void 0, function* (payload, options = {}) {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('createProfile', 'payload', payload);
            const localVarPath = `/core/profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Permanently deletes a provisioning profile. Supply the profile ID in the path to delete the specified profile.
         * @summary Delete profile
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProfile: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProfile', 'id', id);
            const localVarPath = `/core/profiles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of your existing provisioning profiles, providing virtual machine configuration details for each. For additional information about profiles, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/provisioning-profiles#retrieve-a-list-of-profiles).
         * @summary List profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProfiles: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/core/profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieves details for an existing provisioning profile by supplying the profile ID in the request path. For more information about profiles, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/provisioning-profiles).
         * @summary Retrieve profile details
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveProfileDetails: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveProfileDetails', 'id', id);
            const localVarPath = `/core/profiles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ProfileApi - functional programming interface
 * @export
 */
export const ProfileApiFp = function (configuration) {
    const localVarAxiosParamCreator = ProfileApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a provisioning profile to save the configuration of a virtual machine for future use. Include the profile name, description, and virtual machine configuration details in the request body. For more information about virtual machine profiles, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/provisioning-profiles).
         * @summary Create profile
         * @param {CreateProfilePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProfile(payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createProfile(payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ProfileApi.createProfile']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Permanently deletes a provisioning profile. Supply the profile ID in the path to delete the specified profile.
         * @summary Delete profile
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProfile(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteProfile(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ProfileApi.deleteProfile']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Returns a list of your existing provisioning profiles, providing virtual machine configuration details for each. For additional information about profiles, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/provisioning-profiles#retrieve-a-list-of-profiles).
         * @summary List profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProfiles(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listProfiles(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ProfileApi.listProfiles']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieves details for an existing provisioning profile by supplying the profile ID in the request path. For more information about profiles, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/provisioning-profiles).
         * @summary Retrieve profile details
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveProfileDetails(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveProfileDetails(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ProfileApi.retrieveProfileDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * ProfileApi - factory interface
 * @export
 */
export const ProfileApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ProfileApiFp(configuration);
    return {
        /**
         * Creates a provisioning profile to save the configuration of a virtual machine for future use. Include the profile name, description, and virtual machine configuration details in the request body. For more information about virtual machine profiles, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/provisioning-profiles).
         * @summary Create profile
         * @param {CreateProfilePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProfile(payload, options) {
            return localVarFp.createProfile(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Permanently deletes a provisioning profile. Supply the profile ID in the path to delete the specified profile.
         * @summary Delete profile
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProfile(id, options) {
            return localVarFp.deleteProfile(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of your existing provisioning profiles, providing virtual machine configuration details for each. For additional information about profiles, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/provisioning-profiles#retrieve-a-list-of-profiles).
         * @summary List profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProfiles(options) {
            return localVarFp.listProfiles(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves details for an existing provisioning profile by supplying the profile ID in the request path. For more information about profiles, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/provisioning-profiles).
         * @summary Retrieve profile details
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveProfileDetails(id, options) {
            return localVarFp.retrieveProfileDetails(id, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
export class ProfileApi extends BaseAPI {
    /**
     * Creates a provisioning profile to save the configuration of a virtual machine for future use. Include the profile name, description, and virtual machine configuration details in the request body. For more information about virtual machine profiles, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/provisioning-profiles).
     * @summary Create profile
     * @param {CreateProfilePayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    createProfile(payload, options) {
        return ProfileApiFp(this.configuration).createProfile(payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Permanently deletes a provisioning profile. Supply the profile ID in the path to delete the specified profile.
     * @summary Delete profile
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    deleteProfile(id, options) {
        return ProfileApiFp(this.configuration).deleteProfile(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of your existing provisioning profiles, providing virtual machine configuration details for each. For additional information about profiles, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/provisioning-profiles#retrieve-a-list-of-profiles).
     * @summary List profiles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    listProfiles(options) {
        return ProfileApiFp(this.configuration).listProfiles(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves details for an existing provisioning profile by supplying the profile ID in the request path. For more information about profiles, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/provisioning-profiles).
     * @summary Retrieve profile details
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    retrieveProfileDetails(id, options) {
        return ProfileApiFp(this.configuration).retrieveProfileDetails(id, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * RbacRoleApi - axios parameter creator
 * @export
 */
export const RbacRoleApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates an RBAC role that can be assigned to users, granting them access to specific resource actions. Provide the configuration of the RBAC role, including its name, description, and list of permissions and policy IDs in the request body. For additional information on creating RBAC roles, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/create-rbac-role).
         * @summary Create RBAC Role
         * @param {CreateUpdateRbacRolePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRbacRole: (payload_1, ...args_1) => __awaiter(this, [payload_1, ...args_1], void 0, function* (payload, options = {}) {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('createRbacRole', 'payload', payload);
            const localVarPath = `/auth/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes an RBAC role by providing its ID in the path. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/delete-rbac-role).
         * @summary Delete RBAC Role
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRbacRole: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRbacRole', 'id', id);
            const localVarPath = `/auth/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieves a list of RBAC roles that can be assigned to the users within an organization. For additional information on RBAC roles, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/list-rbac-roles).
         * @summary List RBAC Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRbacRoles: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/auth/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieves the details of a specified RBAC role by providing the RBAC role ID in the path. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/retrieve-rbac-details).
         * @summary Retrieve RBAC Role Details
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveRbacRoleDetails: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveRbacRoleDetails', 'id', id);
            const localVarPath = `/auth/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates an RBAC role by providing the role ID in the path and the modified role configuration in the request body, including its name, description, and list of permissions and policy IDs. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/update-rbac-role).
         * @summary Update RBAC Role
         * @param {number} id
         * @param {CreateUpdateRbacRolePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRbacRole: (id_1, payload_1, ...args_1) => __awaiter(this, [id_1, payload_1, ...args_1], void 0, function* (id, payload, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRbacRole', 'id', id);
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('updateRbacRole', 'payload', payload);
            const localVarPath = `/auth/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * RbacRoleApi - functional programming interface
 * @export
 */
export const RbacRoleApiFp = function (configuration) {
    const localVarAxiosParamCreator = RbacRoleApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates an RBAC role that can be assigned to users, granting them access to specific resource actions. Provide the configuration of the RBAC role, including its name, description, and list of permissions and policy IDs in the request body. For additional information on creating RBAC roles, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/create-rbac-role).
         * @summary Create RBAC Role
         * @param {CreateUpdateRbacRolePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRbacRole(payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createRbacRole(payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RbacRoleApi.createRbacRole']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Deletes an RBAC role by providing its ID in the path. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/delete-rbac-role).
         * @summary Delete RBAC Role
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRbacRole(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteRbacRole(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RbacRoleApi.deleteRbacRole']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieves a list of RBAC roles that can be assigned to the users within an organization. For additional information on RBAC roles, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/list-rbac-roles).
         * @summary List RBAC Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRbacRoles(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listRbacRoles(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RbacRoleApi.listRbacRoles']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieves the details of a specified RBAC role by providing the RBAC role ID in the path. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/retrieve-rbac-details).
         * @summary Retrieve RBAC Role Details
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveRbacRoleDetails(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveRbacRoleDetails(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RbacRoleApi.retrieveRbacRoleDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Updates an RBAC role by providing the role ID in the path and the modified role configuration in the request body, including its name, description, and list of permissions and policy IDs. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/update-rbac-role).
         * @summary Update RBAC Role
         * @param {number} id
         * @param {CreateUpdateRbacRolePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRbacRole(id, payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateRbacRole(id, payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RbacRoleApi.updateRbacRole']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * RbacRoleApi - factory interface
 * @export
 */
export const RbacRoleApiFactory = function (configuration, basePath, axios) {
    const localVarFp = RbacRoleApiFp(configuration);
    return {
        /**
         * Creates an RBAC role that can be assigned to users, granting them access to specific resource actions. Provide the configuration of the RBAC role, including its name, description, and list of permissions and policy IDs in the request body. For additional information on creating RBAC roles, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/create-rbac-role).
         * @summary Create RBAC Role
         * @param {CreateUpdateRbacRolePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRbacRole(payload, options) {
            return localVarFp.createRbacRole(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an RBAC role by providing its ID in the path. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/delete-rbac-role).
         * @summary Delete RBAC Role
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRbacRole(id, options) {
            return localVarFp.deleteRbacRole(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of RBAC roles that can be assigned to the users within an organization. For additional information on RBAC roles, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/list-rbac-roles).
         * @summary List RBAC Roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRbacRoles(options) {
            return localVarFp.listRbacRoles(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the details of a specified RBAC role by providing the RBAC role ID in the path. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/retrieve-rbac-details).
         * @summary Retrieve RBAC Role Details
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveRbacRoleDetails(id, options) {
            return localVarFp.retrieveRbacRoleDetails(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an RBAC role by providing the role ID in the path and the modified role configuration in the request body, including its name, description, and list of permissions and policy IDs. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/update-rbac-role).
         * @summary Update RBAC Role
         * @param {number} id
         * @param {CreateUpdateRbacRolePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRbacRole(id, payload, options) {
            return localVarFp.updateRbacRole(id, payload, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * RbacRoleApi - object-oriented interface
 * @export
 * @class RbacRoleApi
 * @extends {BaseAPI}
 */
export class RbacRoleApi extends BaseAPI {
    /**
     * Creates an RBAC role that can be assigned to users, granting them access to specific resource actions. Provide the configuration of the RBAC role, including its name, description, and list of permissions and policy IDs in the request body. For additional information on creating RBAC roles, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/create-rbac-role).
     * @summary Create RBAC Role
     * @param {CreateUpdateRbacRolePayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RbacRoleApi
     */
    createRbacRole(payload, options) {
        return RbacRoleApiFp(this.configuration).createRbacRole(payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes an RBAC role by providing its ID in the path. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/delete-rbac-role).
     * @summary Delete RBAC Role
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RbacRoleApi
     */
    deleteRbacRole(id, options) {
        return RbacRoleApiFp(this.configuration).deleteRbacRole(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of RBAC roles that can be assigned to the users within an organization. For additional information on RBAC roles, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/list-rbac-roles).
     * @summary List RBAC Roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RbacRoleApi
     */
    listRbacRoles(options) {
        return RbacRoleApiFp(this.configuration).listRbacRoles(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the details of a specified RBAC role by providing the RBAC role ID in the path. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/retrieve-rbac-details).
     * @summary Retrieve RBAC Role Details
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RbacRoleApi
     */
    retrieveRbacRoleDetails(id, options) {
        return RbacRoleApiFp(this.configuration).retrieveRbacRoleDetails(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates an RBAC role by providing the role ID in the path and the modified role configuration in the request body, including its name, description, and list of permissions and policy IDs. For additional information, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/rbac/update-rbac-role).
     * @summary Update RBAC Role
     * @param {number} id
     * @param {CreateUpdateRbacRolePayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RbacRoleApi
     */
    updateRbacRole(id, payload, options) {
        return RbacRoleApiFp(this.configuration).updateRbacRole(id, payload, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * RegionApi - axios parameter creator
 * @export
 */
export const RegionApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Lists the currently available regions, each representing a distinct geographic location housing a data center. For additional information on regions, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/regions).
         * @summary List regions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRegions: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/core/regions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * RegionApi - functional programming interface
 * @export
 */
export const RegionApiFp = function (configuration) {
    const localVarAxiosParamCreator = RegionApiAxiosParamCreator(configuration);
    return {
        /**
         * Lists the currently available regions, each representing a distinct geographic location housing a data center. For additional information on regions, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/regions).
         * @summary List regions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRegions(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listRegions(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['RegionApi.listRegions']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * RegionApi - factory interface
 * @export
 */
export const RegionApiFactory = function (configuration, basePath, axios) {
    const localVarFp = RegionApiFp(configuration);
    return {
        /**
         * Lists the currently available regions, each representing a distinct geographic location housing a data center. For additional information on regions, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/regions).
         * @summary List regions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRegions(options) {
            return localVarFp.listRegions(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * RegionApi - object-oriented interface
 * @export
 * @class RegionApi
 * @extends {BaseAPI}
 */
export class RegionApi extends BaseAPI {
    /**
     * Lists the currently available regions, each representing a distinct geographic location housing a data center. For additional information on regions, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/regions).
     * @summary List regions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionApi
     */
    listRegions(options) {
        return RegionApiFp(this.configuration).listRegions(options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * SecurityRulesApi - axios parameter creator
 * @export
 */
export const SecurityRulesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns a list of all available protocols that can be used in the creation of firewall rules for your virtual machines.
         * @summary List firewall rule protocols
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFirewallRuleProtocols: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/core/sg-rules-protocols`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SecurityRulesApi - functional programming interface
 * @export
 */
export const SecurityRulesApiFp = function (configuration) {
    const localVarAxiosParamCreator = SecurityRulesApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns a list of all available protocols that can be used in the creation of firewall rules for your virtual machines.
         * @summary List firewall rule protocols
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFirewallRuleProtocols(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listFirewallRuleProtocols(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['SecurityRulesApi.listFirewallRuleProtocols']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * SecurityRulesApi - factory interface
 * @export
 */
export const SecurityRulesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = SecurityRulesApiFp(configuration);
    return {
        /**
         * Returns a list of all available protocols that can be used in the creation of firewall rules for your virtual machines.
         * @summary List firewall rule protocols
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFirewallRuleProtocols(options) {
            return localVarFp.listFirewallRuleProtocols(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SecurityRulesApi - object-oriented interface
 * @export
 * @class SecurityRulesApi
 * @extends {BaseAPI}
 */
export class SecurityRulesApi extends BaseAPI {
    /**
     * Returns a list of all available protocols that can be used in the creation of firewall rules for your virtual machines.
     * @summary List firewall rule protocols
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityRulesApi
     */
    listFirewallRuleProtocols(options) {
        return SecurityRulesApiFp(this.configuration).listFirewallRuleProtocols(options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * SnapshotEventsApi - axios parameter creator
 * @export
 */
export const SnapshotEventsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Retrieves a list of all events for a Snapshot\'s history, which records actions performed on the specific snapshot. Requires the snapshot ID in the path.
         * @summary Fetch all events for a snapshot
         * @param {number} snapshotId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAllEventsForASnapshot: (snapshotId_1, ...args_1) => __awaiter(this, [snapshotId_1, ...args_1], void 0, function* (snapshotId, options = {}) {
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('fetchAllEventsForASnapshot', 'snapshotId', snapshotId);
            const localVarPath = `/core/snapshots/{snapshot_id}/events`
                .replace(`{${"snapshot_id"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SnapshotEventsApi - functional programming interface
 * @export
 */
export const SnapshotEventsApiFp = function (configuration) {
    const localVarAxiosParamCreator = SnapshotEventsApiAxiosParamCreator(configuration);
    return {
        /**
         * Retrieves a list of all events for a Snapshot\'s history, which records actions performed on the specific snapshot. Requires the snapshot ID in the path.
         * @summary Fetch all events for a snapshot
         * @param {number} snapshotId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAllEventsForASnapshot(snapshotId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchAllEventsForASnapshot(snapshotId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['SnapshotEventsApi.fetchAllEventsForASnapshot']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * SnapshotEventsApi - factory interface
 * @export
 */
export const SnapshotEventsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = SnapshotEventsApiFp(configuration);
    return {
        /**
         * Retrieves a list of all events for a Snapshot\'s history, which records actions performed on the specific snapshot. Requires the snapshot ID in the path.
         * @summary Fetch all events for a snapshot
         * @param {number} snapshotId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAllEventsForASnapshot(snapshotId, options) {
            return localVarFp.fetchAllEventsForASnapshot(snapshotId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SnapshotEventsApi - object-oriented interface
 * @export
 * @class SnapshotEventsApi
 * @extends {BaseAPI}
 */
export class SnapshotEventsApi extends BaseAPI {
    /**
     * Retrieves a list of all events for a Snapshot\'s history, which records actions performed on the specific snapshot. Requires the snapshot ID in the path.
     * @summary Fetch all events for a snapshot
     * @param {number} snapshotId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotEventsApi
     */
    fetchAllEventsForASnapshot(snapshotId, options) {
        return SnapshotEventsApiFp(this.configuration).fetchAllEventsForASnapshot(snapshotId, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * SnapshotsApi - axios parameter creator
 * @export
 */
export const SnapshotsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a new custom image from an existing snapshot.Requires a name and any labels for your new custom image.
         * @summary Create an image from a snapshot
         * @param {number} snapshotId
         * @param {CreateImagePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnImageFromASnapshot: (snapshotId_1, payload_1, ...args_1) => __awaiter(this, [snapshotId_1, payload_1, ...args_1], void 0, function* (snapshotId, payload, options = {}) {
            // verify required parameter 'snapshotId' is not null or undefined
            assertParamExists('createAnImageFromASnapshot', 'snapshotId', snapshotId);
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('createAnImageFromASnapshot', 'payload', payload);
            const localVarPath = `/core/snapshots/{snapshot_id}/image`
                .replace(`{${"snapshot_id"}}`, encodeURIComponent(String(snapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Delete a snapshot. Provide the snapshot ID in the path to delete the specified snapshot. If the snapshot is connected with an image, that image will also bedeleted and the deleted image ID will be returned in the success message response.
         * @summary Delete snapshot
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSnapshot: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSnapshot', 'id', id);
            const localVarPath = `/core/snapshots/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Check if a Snapshot name is available
         * @summary Fetch snapshot name availability
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSnapshotNameAvailability: (name_1, ...args_1) => __awaiter(this, [name_1, ...args_1], void 0, function* (name, options = {}) {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('fetchSnapshotNameAvailability', 'name', name);
            const localVarPath = `/core/snapshots/name-availability/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Restore a snapshot.
         * @summary Restore a snapshot
         * @param {number} id
         * @param {SnapshotRestoreRequest} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreASnapshot: (id_1, payload_1, ...args_1) => __awaiter(this, [id_1, payload_1, ...args_1], void 0, function* (id, payload, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('restoreASnapshot', 'id', id);
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('restoreASnapshot', 'payload', payload);
            const localVarPath = `/core/snapshots/{id}/restore`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieve a snapshot.
         * @summary Retrieve a snapshot
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveASnapshot: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveASnapshot', 'id', id);
            const localVarPath = `/core/snapshots/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieves a list of snapshot, providing details such as snapshot name, timestamp, VM ID, and other relevant information.
         * @summary Retrieve list of snapshots with pagination
         * @param {string} [page] Page Number
         * @param {string} [pageSize] Data Per Page
         * @param {string} [search] Search By Snapshot ID or Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveListOfSnapshotsWithPagination: (page_1, pageSize_1, search_1, ...args_1) => __awaiter(this, [page_1, pageSize_1, search_1, ...args_1], void 0, function* (page, pageSize, search, options = {}) {
            const localVarPath = `/core/snapshots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SnapshotsApi - functional programming interface
 * @export
 */
export const SnapshotsApiFp = function (configuration) {
    const localVarAxiosParamCreator = SnapshotsApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a new custom image from an existing snapshot.Requires a name and any labels for your new custom image.
         * @summary Create an image from a snapshot
         * @param {number} snapshotId
         * @param {CreateImagePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnImageFromASnapshot(snapshotId, payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAnImageFromASnapshot(snapshotId, payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['SnapshotsApi.createAnImageFromASnapshot']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Delete a snapshot. Provide the snapshot ID in the path to delete the specified snapshot. If the snapshot is connected with an image, that image will also bedeleted and the deleted image ID will be returned in the success message response.
         * @summary Delete snapshot
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSnapshot(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteSnapshot(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['SnapshotsApi.deleteSnapshot']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Check if a Snapshot name is available
         * @summary Fetch snapshot name availability
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSnapshotNameAvailability(name, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchSnapshotNameAvailability(name, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['SnapshotsApi.fetchSnapshotNameAvailability']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Restore a snapshot.
         * @summary Restore a snapshot
         * @param {number} id
         * @param {SnapshotRestoreRequest} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreASnapshot(id, payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.restoreASnapshot(id, payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['SnapshotsApi.restoreASnapshot']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieve a snapshot.
         * @summary Retrieve a snapshot
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveASnapshot(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveASnapshot(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['SnapshotsApi.retrieveASnapshot']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieves a list of snapshot, providing details such as snapshot name, timestamp, VM ID, and other relevant information.
         * @summary Retrieve list of snapshots with pagination
         * @param {string} [page] Page Number
         * @param {string} [pageSize] Data Per Page
         * @param {string} [search] Search By Snapshot ID or Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveListOfSnapshotsWithPagination(page, pageSize, search, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveListOfSnapshotsWithPagination(page, pageSize, search, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['SnapshotsApi.retrieveListOfSnapshotsWithPagination']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * SnapshotsApi - factory interface
 * @export
 */
export const SnapshotsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = SnapshotsApiFp(configuration);
    return {
        /**
         * Create a new custom image from an existing snapshot.Requires a name and any labels for your new custom image.
         * @summary Create an image from a snapshot
         * @param {number} snapshotId
         * @param {CreateImagePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnImageFromASnapshot(snapshotId, payload, options) {
            return localVarFp.createAnImageFromASnapshot(snapshotId, payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a snapshot. Provide the snapshot ID in the path to delete the specified snapshot. If the snapshot is connected with an image, that image will also bedeleted and the deleted image ID will be returned in the success message response.
         * @summary Delete snapshot
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSnapshot(id, options) {
            return localVarFp.deleteSnapshot(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if a Snapshot name is available
         * @summary Fetch snapshot name availability
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSnapshotNameAvailability(name, options) {
            return localVarFp.fetchSnapshotNameAvailability(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Restore a snapshot.
         * @summary Restore a snapshot
         * @param {number} id
         * @param {SnapshotRestoreRequest} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreASnapshot(id, payload, options) {
            return localVarFp.restoreASnapshot(id, payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a snapshot.
         * @summary Retrieve a snapshot
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveASnapshot(id, options) {
            return localVarFp.retrieveASnapshot(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of snapshot, providing details such as snapshot name, timestamp, VM ID, and other relevant information.
         * @summary Retrieve list of snapshots with pagination
         * @param {string} [page] Page Number
         * @param {string} [pageSize] Data Per Page
         * @param {string} [search] Search By Snapshot ID or Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveListOfSnapshotsWithPagination(page, pageSize, search, options) {
            return localVarFp.retrieveListOfSnapshotsWithPagination(page, pageSize, search, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SnapshotsApi - object-oriented interface
 * @export
 * @class SnapshotsApi
 * @extends {BaseAPI}
 */
export class SnapshotsApi extends BaseAPI {
    /**
     * Create a new custom image from an existing snapshot.Requires a name and any labels for your new custom image.
     * @summary Create an image from a snapshot
     * @param {number} snapshotId
     * @param {CreateImagePayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    createAnImageFromASnapshot(snapshotId, payload, options) {
        return SnapshotsApiFp(this.configuration).createAnImageFromASnapshot(snapshotId, payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a snapshot. Provide the snapshot ID in the path to delete the specified snapshot. If the snapshot is connected with an image, that image will also bedeleted and the deleted image ID will be returned in the success message response.
     * @summary Delete snapshot
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    deleteSnapshot(id, options) {
        return SnapshotsApiFp(this.configuration).deleteSnapshot(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Check if a Snapshot name is available
     * @summary Fetch snapshot name availability
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    fetchSnapshotNameAvailability(name, options) {
        return SnapshotsApiFp(this.configuration).fetchSnapshotNameAvailability(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Restore a snapshot.
     * @summary Restore a snapshot
     * @param {number} id
     * @param {SnapshotRestoreRequest} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    restoreASnapshot(id, payload, options) {
        return SnapshotsApiFp(this.configuration).restoreASnapshot(id, payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a snapshot.
     * @summary Retrieve a snapshot
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    retrieveASnapshot(id, options) {
        return SnapshotsApiFp(this.configuration).retrieveASnapshot(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of snapshot, providing details such as snapshot name, timestamp, VM ID, and other relevant information.
     * @summary Retrieve list of snapshots with pagination
     * @param {string} [page] Page Number
     * @param {string} [pageSize] Data Per Page
     * @param {string} [search] Search By Snapshot ID or Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SnapshotsApi
     */
    retrieveListOfSnapshotsWithPagination(page, pageSize, search, options) {
        return SnapshotsApiFp(this.configuration).retrieveListOfSnapshotsWithPagination(page, pageSize, search, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * StockApi - axios parameter creator
 * @export
 */
export const StockApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns information on current and upcoming GPU availability, organized by region and GPU model. For additional information on GPU stocks, [**click here**](https://infrahub-doc.nexgencloud.com/docs/hardware/gpu-stock-information).
         * @summary Retrieve GPU stocks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveGpuStocks: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/core/stocks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * StockApi - functional programming interface
 * @export
 */
export const StockApiFp = function (configuration) {
    const localVarAxiosParamCreator = StockApiAxiosParamCreator(configuration);
    return {
        /**
         * Returns information on current and upcoming GPU availability, organized by region and GPU model. For additional information on GPU stocks, [**click here**](https://infrahub-doc.nexgencloud.com/docs/hardware/gpu-stock-information).
         * @summary Retrieve GPU stocks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveGpuStocks(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveGpuStocks(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['StockApi.retrieveGpuStocks']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * StockApi - factory interface
 * @export
 */
export const StockApiFactory = function (configuration, basePath, axios) {
    const localVarFp = StockApiFp(configuration);
    return {
        /**
         * Returns information on current and upcoming GPU availability, organized by region and GPU model. For additional information on GPU stocks, [**click here**](https://infrahub-doc.nexgencloud.com/docs/hardware/gpu-stock-information).
         * @summary Retrieve GPU stocks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveGpuStocks(options) {
            return localVarFp.retrieveGpuStocks(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * StockApi - object-oriented interface
 * @export
 * @class StockApi
 * @extends {BaseAPI}
 */
export class StockApi extends BaseAPI {
    /**
     * Returns information on current and upcoming GPU availability, organized by region and GPU model. For additional information on GPU stocks, [**click here**](https://infrahub-doc.nexgencloud.com/docs/hardware/gpu-stock-information).
     * @summary Retrieve GPU stocks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApi
     */
    retrieveGpuStocks(options) {
        return StockApiFp(this.configuration).retrieveGpuStocks(options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * TemplateApi - axios parameter creator
 * @export
 */
export const TemplateApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a resource template for deployment.
         * @summary Create template
         * @param {File} content YAML file is required
         * @param {string} description description is required
         * @param {string} isPublic is_public is required
         * @param {string} name name is required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate: (content_1, description_1, isPublic_1, name_1, ...args_1) => __awaiter(this, [content_1, description_1, isPublic_1, name_1, ...args_1], void 0, function* (content, description, isPublic, name, options = {}) {
            // verify required parameter 'content' is not null or undefined
            assertParamExists('createTemplate', 'content', content);
            // verify required parameter 'description' is not null or undefined
            assertParamExists('createTemplate', 'description', description);
            // verify required parameter 'isPublic' is not null or undefined
            assertParamExists('createTemplate', 'isPublic', isPublic);
            // verify required parameter 'name' is not null or undefined
            assertParamExists('createTemplate', 'name', name);
            const localVarPath = `/core/marketplace/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (content !== undefined) {
                localVarFormParams.append('content', content);
            }
            if (description !== undefined) {
                localVarFormParams.append('description', description);
            }
            if (isPublic !== undefined) {
                localVarFormParams.append('is_public', isPublic);
            }
            if (name !== undefined) {
                localVarFormParams.append('name', name);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Permanently deletes a template. Supply the template ID in the path to delete the specified template.
         * @summary Delete template
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTemplate', 'id', id);
            const localVarPath = `/core/marketplace/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a comprehensive list of templates, providing resource configuration details for each. Optionally, specify the `visibility` as `public` or `private` to retrieve templates with the desired visibility status. To learn more about the templates feature, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/templates#view-a-list-of-templates).
         * @summary List templates
         * @param {string} [visibility] Specify the &#x60;visibility&#x60; status as either &#x60;public&#x60; or &#x60;private&#x60; to filter and retrieve templates with the desired visibility.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTemplates: (visibility_1, ...args_1) => __awaiter(this, [visibility_1, ...args_1], void 0, function* (visibility, options = {}) {
            const localVarPath = `/core/marketplace/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (visibility !== undefined) {
                localVarQueryParameter['visibility'] = visibility;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieves the resource configuration details for a specified template. Provide the template ID in the path to retrieve details for the specified template. For additional information on template configuration details, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/templates#retrieve-the-details-for-a-template).
         * @summary Retrieve template details
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTemplateDetails: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveTemplateDetails', 'id', id);
            const localVarPath = `/core/marketplace/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates the details of a template. Modify the template name, description and/or `is_public` status to change the public/private visibility of the template.
         * @summary Update template
         * @param {number} id
         * @param {UpdateTemplate} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate: (id_1, payload_1, ...args_1) => __awaiter(this, [id_1, payload_1, ...args_1], void 0, function* (id, payload, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTemplate', 'id', id);
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('updateTemplate', 'payload', payload);
            const localVarPath = `/core/marketplace/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * TemplateApi - functional programming interface
 * @export
 */
export const TemplateApiFp = function (configuration) {
    const localVarAxiosParamCreator = TemplateApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a resource template for deployment.
         * @summary Create template
         * @param {File} content YAML file is required
         * @param {string} description description is required
         * @param {string} isPublic is_public is required
         * @param {string} name name is required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate(content, description, isPublic, name, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createTemplate(content, description, isPublic, name, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['TemplateApi.createTemplate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Permanently deletes a template. Supply the template ID in the path to delete the specified template.
         * @summary Delete template
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteTemplate(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['TemplateApi.deleteTemplate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Returns a comprehensive list of templates, providing resource configuration details for each. Optionally, specify the `visibility` as `public` or `private` to retrieve templates with the desired visibility status. To learn more about the templates feature, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/templates#view-a-list-of-templates).
         * @summary List templates
         * @param {string} [visibility] Specify the &#x60;visibility&#x60; status as either &#x60;public&#x60; or &#x60;private&#x60; to filter and retrieve templates with the desired visibility.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTemplates(visibility, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listTemplates(visibility, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['TemplateApi.listTemplates']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieves the resource configuration details for a specified template. Provide the template ID in the path to retrieve details for the specified template. For additional information on template configuration details, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/templates#retrieve-the-details-for-a-template).
         * @summary Retrieve template details
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTemplateDetails(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveTemplateDetails(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['TemplateApi.retrieveTemplateDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Updates the details of a template. Modify the template name, description and/or `is_public` status to change the public/private visibility of the template.
         * @summary Update template
         * @param {number} id
         * @param {UpdateTemplate} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate(id, payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateTemplate(id, payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['TemplateApi.updateTemplate']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * TemplateApi - factory interface
 * @export
 */
export const TemplateApiFactory = function (configuration, basePath, axios) {
    const localVarFp = TemplateApiFp(configuration);
    return {
        /**
         * Creates a resource template for deployment.
         * @summary Create template
         * @param {File} content YAML file is required
         * @param {string} description description is required
         * @param {string} isPublic is_public is required
         * @param {string} name name is required
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate(content, description, isPublic, name, options) {
            return localVarFp.createTemplate(content, description, isPublic, name, options).then((request) => request(axios, basePath));
        },
        /**
         * Permanently deletes a template. Supply the template ID in the path to delete the specified template.
         * @summary Delete template
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate(id, options) {
            return localVarFp.deleteTemplate(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a comprehensive list of templates, providing resource configuration details for each. Optionally, specify the `visibility` as `public` or `private` to retrieve templates with the desired visibility status. To learn more about the templates feature, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/templates#view-a-list-of-templates).
         * @summary List templates
         * @param {string} [visibility] Specify the &#x60;visibility&#x60; status as either &#x60;public&#x60; or &#x60;private&#x60; to filter and retrieve templates with the desired visibility.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTemplates(visibility, options) {
            return localVarFp.listTemplates(visibility, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the resource configuration details for a specified template. Provide the template ID in the path to retrieve details for the specified template. For additional information on template configuration details, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/templates#retrieve-the-details-for-a-template).
         * @summary Retrieve template details
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveTemplateDetails(id, options) {
            return localVarFp.retrieveTemplateDetails(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the details of a template. Modify the template name, description and/or `is_public` status to change the public/private visibility of the template.
         * @summary Update template
         * @param {number} id
         * @param {UpdateTemplate} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate(id, payload, options) {
            return localVarFp.updateTemplate(id, payload, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * TemplateApi - object-oriented interface
 * @export
 * @class TemplateApi
 * @extends {BaseAPI}
 */
export class TemplateApi extends BaseAPI {
    /**
     * Creates a resource template for deployment.
     * @summary Create template
     * @param {File} content YAML file is required
     * @param {string} description description is required
     * @param {string} isPublic is_public is required
     * @param {string} name name is required
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    createTemplate(content, description, isPublic, name, options) {
        return TemplateApiFp(this.configuration).createTemplate(content, description, isPublic, name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Permanently deletes a template. Supply the template ID in the path to delete the specified template.
     * @summary Delete template
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    deleteTemplate(id, options) {
        return TemplateApiFp(this.configuration).deleteTemplate(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a comprehensive list of templates, providing resource configuration details for each. Optionally, specify the `visibility` as `public` or `private` to retrieve templates with the desired visibility status. To learn more about the templates feature, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/templates#view-a-list-of-templates).
     * @summary List templates
     * @param {string} [visibility] Specify the &#x60;visibility&#x60; status as either &#x60;public&#x60; or &#x60;private&#x60; to filter and retrieve templates with the desired visibility.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    listTemplates(visibility, options) {
        return TemplateApiFp(this.configuration).listTemplates(visibility, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the resource configuration details for a specified template. Provide the template ID in the path to retrieve details for the specified template. For additional information on template configuration details, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/templates#retrieve-the-details-for-a-template).
     * @summary Retrieve template details
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    retrieveTemplateDetails(id, options) {
        return TemplateApiFp(this.configuration).retrieveTemplateDetails(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the details of a template. Modify the template name, description and/or `is_public` status to change the public/private visibility of the template.
     * @summary Update template
     * @param {number} id
     * @param {UpdateTemplate} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    updateTemplate(id, payload, options) {
        return TemplateApiFp(this.configuration).updateTemplate(id, payload, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary GET: Fetch User Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFetchUserInfo: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/billing/user/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary POST: Insert user info
         * @param {Userinfopostpayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postInsertUserInfo: (payload_1, ...args_1) => __awaiter(this, [payload_1, ...args_1], void 0, function* (payload, options = {}) {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('postInsertUserInfo', 'payload', payload);
            const localVarPath = `/billing/user/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary PUT: Update user info
         * @param {Userinfopostpayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUpdateUserInfo: (payload_1, ...args_1) => __awaiter(this, [payload_1, ...args_1], void 0, function* (payload, options = {}) {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('putUpdateUserInfo', 'payload', payload);
            const localVarPath = `/billing/user/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary GET: Fetch User Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFetchUserInfo(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getFetchUserInfo(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['UserApi.getFetchUserInfo']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary POST: Insert user info
         * @param {Userinfopostpayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postInsertUserInfo(payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.postInsertUserInfo(payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['UserApi.postInsertUserInfo']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary PUT: Update user info
         * @param {Userinfopostpayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUpdateUserInfo(payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.putUpdateUserInfo(payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['UserApi.putUpdateUserInfo']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration, basePath, axios) {
    const localVarFp = UserApiFp(configuration);
    return {
        /**
         *
         * @summary GET: Fetch User Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFetchUserInfo(options) {
            return localVarFp.getFetchUserInfo(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary POST: Insert user info
         * @param {Userinfopostpayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postInsertUserInfo(payload, options) {
            return localVarFp.postInsertUserInfo(payload, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary PUT: Update user info
         * @param {Userinfopostpayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUpdateUserInfo(payload, options) {
            return localVarFp.putUpdateUserInfo(payload, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     *
     * @summary GET: Fetch User Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getFetchUserInfo(options) {
        return UserApiFp(this.configuration).getFetchUserInfo(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary POST: Insert user info
     * @param {Userinfopostpayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    postInsertUserInfo(payload, options) {
        return UserApiFp(this.configuration).postInsertUserInfo(payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary PUT: Update user info
     * @param {Userinfopostpayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    putUpdateUserInfo(payload, options) {
        return UserApiFp(this.configuration).putUpdateUserInfo(payload, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * UserDetailChoiceApi - axios parameter creator
 * @export
 */
export const UserDetailChoiceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Retrieve the default choices for virtual machine deployment, including the default region, flavor, and image.
         * @summary Retrieve Default Flavors and Images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveDefaultFlavorsAndImages: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/core/user/resources/defaults`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * UserDetailChoiceApi - functional programming interface
 * @export
 */
export const UserDetailChoiceApiFp = function (configuration) {
    const localVarAxiosParamCreator = UserDetailChoiceApiAxiosParamCreator(configuration);
    return {
        /**
         * Retrieve the default choices for virtual machine deployment, including the default region, flavor, and image.
         * @summary Retrieve Default Flavors and Images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveDefaultFlavorsAndImages(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveDefaultFlavorsAndImages(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['UserDetailChoiceApi.retrieveDefaultFlavorsAndImages']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * UserDetailChoiceApi - factory interface
 * @export
 */
export const UserDetailChoiceApiFactory = function (configuration, basePath, axios) {
    const localVarFp = UserDetailChoiceApiFp(configuration);
    return {
        /**
         * Retrieve the default choices for virtual machine deployment, including the default region, flavor, and image.
         * @summary Retrieve Default Flavors and Images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveDefaultFlavorsAndImages(options) {
            return localVarFp.retrieveDefaultFlavorsAndImages(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * UserDetailChoiceApi - object-oriented interface
 * @export
 * @class UserDetailChoiceApi
 * @extends {BaseAPI}
 */
export class UserDetailChoiceApi extends BaseAPI {
    /**
     * Retrieve the default choices for virtual machine deployment, including the default region, flavor, and image.
     * @summary Retrieve Default Flavors and Images
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserDetailChoiceApi
     */
    retrieveDefaultFlavorsAndImages(options) {
        return UserDetailChoiceApiFp(this.configuration).retrieveDefaultFlavorsAndImages(options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * UserPermissionApi - axios parameter creator
 * @export
 */
export const UserPermissionApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Retrieves a list of permissions granted to your account. For additional information on your permissions, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/permission/list-my-permissions).
         * @summary List My User Permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyUserPermissions: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/auth/users/me/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieves a list of permissions granted to a specific user within your organization. Provide the ID of the user in the path. For additional information on user permissions, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/permission/list-user-permissions).
         * @summary List User Permissions
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserPermissions: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listUserPermissions', 'id', id);
            const localVarPath = `/auth/users/{id}/permissions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * UserPermissionApi - functional programming interface
 * @export
 */
export const UserPermissionApiFp = function (configuration) {
    const localVarAxiosParamCreator = UserPermissionApiAxiosParamCreator(configuration);
    return {
        /**
         * Retrieves a list of permissions granted to your account. For additional information on your permissions, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/permission/list-my-permissions).
         * @summary List My User Permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyUserPermissions(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listMyUserPermissions(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['UserPermissionApi.listMyUserPermissions']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieves a list of permissions granted to a specific user within your organization. Provide the ID of the user in the path. For additional information on user permissions, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/permission/list-user-permissions).
         * @summary List User Permissions
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserPermissions(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listUserPermissions(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['UserPermissionApi.listUserPermissions']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * UserPermissionApi - factory interface
 * @export
 */
export const UserPermissionApiFactory = function (configuration, basePath, axios) {
    const localVarFp = UserPermissionApiFp(configuration);
    return {
        /**
         * Retrieves a list of permissions granted to your account. For additional information on your permissions, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/permission/list-my-permissions).
         * @summary List My User Permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyUserPermissions(options) {
            return localVarFp.listMyUserPermissions(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of permissions granted to a specific user within your organization. Provide the ID of the user in the path. For additional information on user permissions, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/permission/list-user-permissions).
         * @summary List User Permissions
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserPermissions(id, options) {
            return localVarFp.listUserPermissions(id, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * UserPermissionApi - object-oriented interface
 * @export
 * @class UserPermissionApi
 * @extends {BaseAPI}
 */
export class UserPermissionApi extends BaseAPI {
    /**
     * Retrieves a list of permissions granted to your account. For additional information on your permissions, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/permission/list-my-permissions).
     * @summary List My User Permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPermissionApi
     */
    listMyUserPermissions(options) {
        return UserPermissionApiFp(this.configuration).listMyUserPermissions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of permissions granted to a specific user within your organization. Provide the ID of the user in the path. For additional information on user permissions, [click here](https://infrahub-doc.nexgencloud.com/docs/api-reference/auth-resources/permission/list-user-permissions).
     * @summary List User Permissions
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserPermissionApi
     */
    listUserPermissions(id, options) {
        return UserPermissionApiFp(this.configuration).listUserPermissions(id, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * VirtualMachineApi - axios parameter creator
 * @export
 */
export const VirtualMachineApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a firewall rule for a virtual machine. Include the virtual machine ID in the path, and provide the firewall rule configuration in the request body, as detailed below. For additional information on firewall rules, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/core-resources/virtual-machines/vm-firewall-rules/add-firewall-rule-to-vm).
         * @summary Add firewall rule to virtual machine
         * @param {number} id
         * @param {CreateSecurityRulePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFirewallRuleToVirtualMachine: (id_1, payload_1, ...args_1) => __awaiter(this, [id_1, payload_1, ...args_1], void 0, function* (id, payload, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addFirewallRuleToVirtualMachine', 'id', id);
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('addFirewallRuleToVirtualMachine', 'payload', payload);
            const localVarPath = `/core/virtual-machines/{id}/sg-rules`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Attach firewalls to a virtual machine by providing the virtual machine ID in the path and the IDs of the firewalls in the request body; any firewalls not included will be detached.
         * @summary Attach firewalls to a virtual machine
         * @param {number} vmId
         * @param {AttachFirewallsToVMPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachFirewallsToAVirtualMachine: (vmId_1, payload_1, ...args_1) => __awaiter(this, [vmId_1, payload_1, ...args_1], void 0, function* (vmId, payload, options = {}) {
            // verify required parameter 'vmId' is not null or undefined
            assertParamExists('attachFirewallsToAVirtualMachine', 'vmId', vmId);
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('attachFirewallsToAVirtualMachine', 'payload', payload);
            const localVarPath = `/core/virtual-machines/{vm_id}/attach-firewalls`
                .replace(`{${"vm_id"}}`, encodeURIComponent(String(vmId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Create snapshots of a virtual machine by providing the virtual machine ID in the path
         * @summary Create snapshot from a virtual machine
         * @param {number} vmId
         * @param {CreateSnapshotPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSnapshotFromAVirtualMachine: (vmId_1, payload_1, ...args_1) => __awaiter(this, [vmId_1, payload_1, ...args_1], void 0, function* (vmId, payload, options = {}) {
            // verify required parameter 'vmId' is not null or undefined
            assertParamExists('createSnapshotFromAVirtualMachine', 'vmId', vmId);
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('createSnapshotFromAVirtualMachine', 'payload', payload);
            const localVarPath = `/core/virtual-machines/{vm_id}/snapshots`
                .replace(`{${"vm_id"}}`, encodeURIComponent(String(vmId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Creates one or more virtual machines with the specified custom configuration and features provided in the request body. For more information about the virtual machine features offered by Infrahub, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/virtual-machine-features#create-a-virtual-machine-with-custom-features).
         * @summary Create virtual machines
         * @param {CreateInstancesPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVirtualMachines: (payload_1, ...args_1) => __awaiter(this, [payload_1, ...args_1], void 0, function* (payload, options = {}) {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('createVirtualMachines', 'payload', payload);
            const localVarPath = `/core/virtual-machines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes a firewall rule associated with a virtual machine. Provide the virtual machine ID and the firewall rule ID in the path to remove the specified rule from the specified virtual machine.
         * @summary Delete firewall rule from virtual machine
         * @param {number} virtualMachineId
         * @param {number} sgRuleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFirewallRuleFromVirtualMachine: (virtualMachineId_1, sgRuleId_1, ...args_1) => __awaiter(this, [virtualMachineId_1, sgRuleId_1, ...args_1], void 0, function* (virtualMachineId, sgRuleId, options = {}) {
            // verify required parameter 'virtualMachineId' is not null or undefined
            assertParamExists('deleteFirewallRuleFromVirtualMachine', 'virtualMachineId', virtualMachineId);
            // verify required parameter 'sgRuleId' is not null or undefined
            assertParamExists('deleteFirewallRuleFromVirtualMachine', 'sgRuleId', sgRuleId);
            const localVarPath = `/core/virtual-machines/{virtual_machine_id}/sg-rules/{sg_rule_id}`
                .replace(`{${"virtual_machine_id"}}`, encodeURIComponent(String(virtualMachineId)))
                .replace(`{${"sg_rule_id"}}`, encodeURIComponent(String(sgRuleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Permanently deletes a virtual machine. Provide the virtual machine ID in the path to delete the specified virtual machine.
         * @summary Delete virtual machine
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVirtualMachine: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteVirtualMachine', 'id', id);
            const localVarPath = `/core/virtual-machines/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Adds one or more labels to an existing virtual machine. Provide the virtual machine ID in the path to add labels to the specified VM. For multiple labels, add a space between each label in the request body.
         * @summary Edit virtual machine labels
         * @param {number} virtualMachineId
         * @param {EditlabelofanexistingVMPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editVirtualMachineLabels: (virtualMachineId_1, payload_1, ...args_1) => __awaiter(this, [virtualMachineId_1, payload_1, ...args_1], void 0, function* (virtualMachineId, payload, options = {}) {
            // verify required parameter 'virtualMachineId' is not null or undefined
            assertParamExists('editVirtualMachineLabels', 'virtualMachineId', virtualMachineId);
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('editVirtualMachineLabels', 'payload', payload);
            const localVarPath = `/core/virtual-machines/{virtual_machine_id}/label`
                .replace(`{${"virtual_machine_id"}}`, encodeURIComponent(String(virtualMachineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Check if a Virtual Machine name is available
         * @summary Fetch virtual machine name availability
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVirtualMachineNameAvailability: (name_1, ...args_1) => __awaiter(this, [name_1, ...args_1], void 0, function* (name, options = {}) {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('fetchVirtualMachineNameAvailability', 'name', name);
            const localVarPath = `/core/virtual-machines/name-availability/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Initiates a hard reboot for a virtual machine, simulating the process of unplugging and rebooting a physical machine. Provide the virtual machine ID in the path to execute a hard reboot for the specified virtual machine.
         * @summary Hard reboot virtual machine
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hardRebootVirtualMachine: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('hardRebootVirtualMachine', 'id', id);
            const localVarPath = `/core/virtual-machines/{id}/hard-reboot`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Initiates the hibernation of a virtual machine, saving its current state to disk before powering off. Provide the virtual machine ID in the path to specify the virtual machine to be hibernated.
         * @summary Hibernate virtual machine
         * @param {number} virtualMachineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hibernateVirtualMachine: (virtualMachineId_1, ...args_1) => __awaiter(this, [virtualMachineId_1, ...args_1], void 0, function* (virtualMachineId, options = {}) {
            // verify required parameter 'virtualMachineId' is not null or undefined
            assertParamExists('hibernateVirtualMachine', 'virtualMachineId', virtualMachineId);
            const localVarPath = `/core/virtual-machines/{virtual_machine_id}/hibernate`
                .replace(`{${"virtual_machine_id"}}`, encodeURIComponent(String(virtualMachineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of your existing virtual machines, providing configuration details for each. The list is sorted by creation date, with the oldest virtual machines displayed first.
         * @summary List virtual machines
         * @param {string} [page] Page Number
         * @param {string} [pageSize] Data Per Page
         * @param {string} [search]
         * @param {string} [environment] Filter Environment ID or Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVirtualMachines: (page_1, pageSize_1, search_1, environment_1, ...args_1) => __awaiter(this, [page_1, pageSize_1, search_1, environment_1, ...args_1], void 0, function* (page, pageSize, search, environment, options = {}) {
            const localVarPath = `/core/virtual-machines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (environment !== undefined) {
                localVarQueryParameter['environment'] = environment;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Updates the hardware configuration for an existing virtual machine. Include the virtual machine ID in the path and provide the new configuration, referred to as a `flavor`, in the body of the request. For additional information resizing, [**click here**](https://infrahub-doc.nexgencloud.com/docs/hardware/flavors#modify-the-flavor-of-an-existing-virtual-machine).
         * @summary Resize virtual machine
         * @param {number} virtualMachineId
         * @param {InstanceResizePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resizeVirtualMachine: (virtualMachineId_1, payload_1, ...args_1) => __awaiter(this, [virtualMachineId_1, payload_1, ...args_1], void 0, function* (virtualMachineId, payload, options = {}) {
            // verify required parameter 'virtualMachineId' is not null or undefined
            assertParamExists('resizeVirtualMachine', 'virtualMachineId', virtualMachineId);
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('resizeVirtualMachine', 'payload', payload);
            const localVarPath = `/core/virtual-machines/{virtual_machine_id}/resize`
                .replace(`{${"virtual_machine_id"}}`, encodeURIComponent(String(virtualMachineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Resumes a virtual machine from hibernation, bringing it back to an active state. Provide the virtual machine ID in the path to specify the virtual machine to be restored from hibernation.
         * @summary Restore virtual machine from hibernation
         * @param {number} virtualMachineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreVirtualMachineFromHibernation: (virtualMachineId_1, ...args_1) => __awaiter(this, [virtualMachineId_1, ...args_1], void 0, function* (virtualMachineId, options = {}) {
            // verify required parameter 'virtualMachineId' is not null or undefined
            assertParamExists('restoreVirtualMachineFromHibernation', 'virtualMachineId', virtualMachineId);
            const localVarPath = `/core/virtual-machines/{virtual_machine_id}/hibernate-restore`
                .replace(`{${"virtual_machine_id"}}`, encodeURIComponent(String(virtualMachineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieves the details of an existing virtual machine. Provide the virtual machine ID in the path, and Infrahub will return information about the corresponding VM.
         * @summary Retrieve virtual machine details
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveVirtualMachineDetails: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieveVirtualMachineDetails', 'id', id);
            const localVarPath = `/core/virtual-machines/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieves performance metrics data for a virtual machine. Provide the virtual machine ID in the path to retrieve the following data for the specified virtual machine: CPU usage, memory usage (RAM), `network.in`, `network.out`, `disk.read`, and `disk.write`. The optional `duration` parameter can be used to specify the period for retrieving performance metrics; the default value will retrieve all available data. To learn more about virtual machine performance metrics, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/vm-performance-metrics-and-events-history#performance-metrics).
         * @summary Retrieve virtual machine performance metrics
         * @param {number} virtualMachineId
         * @param {RetrieveVirtualMachinePerformanceMetricsDurationEnum} [duration]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveVirtualMachinePerformanceMetrics: (virtualMachineId_1, duration_1, ...args_1) => __awaiter(this, [virtualMachineId_1, duration_1, ...args_1], void 0, function* (virtualMachineId, duration, options = {}) {
            // verify required parameter 'virtualMachineId' is not null or undefined
            assertParamExists('retrieveVirtualMachinePerformanceMetrics', 'virtualMachineId', virtualMachineId);
            const localVarPath = `/core/virtual-machines/{virtual_machine_id}/metrics`
                .replace(`{${"virtual_machine_id"}}`, encodeURIComponent(String(virtualMachineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieves a list of virtual machines associated with a contract, providing details such as virtual machine name, timestamp, flavor name, and other relevant information. Please provide the ID of the relevant contract in the path.
         * @summary Retrieve virtual machines associated with a contract
         * @param {number} contractId
         * @param {string} [page] Page Number
         * @param {string} [pageSize] Data Per Page
         * @param {string} [search] Search By Instance ID or Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveVirtualMachinesAssociatedWithAContract: (contractId_1, page_1, pageSize_1, search_1, ...args_1) => __awaiter(this, [contractId_1, page_1, pageSize_1, search_1, ...args_1], void 0, function* (contractId, page, pageSize, search, options = {}) {
            // verify required parameter 'contractId' is not null or undefined
            assertParamExists('retrieveVirtualMachinesAssociatedWithAContract', 'contractId', contractId);
            const localVarPath = `/core/virtual-machines/contract/{contract_id}/virtual-machines`
                .replace(`{${"contract_id"}}`, encodeURIComponent(String(contractId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Initiates the startup of a virtual machine. Provide the virtual machine ID in the path to initiate the starting of the specified virtual machine.
         * @summary Start virtual machine
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startVirtualMachine: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('startVirtualMachine', 'id', id);
            const localVarPath = `/core/virtual-machines/{id}/start`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Shuts down a virtual machine. Provide the virtual machine ID in the path to initiate the shutdown process for the specified virtual machine.
         * @summary Stop virtual machine
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopVirtualMachine: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('stopVirtualMachine', 'id', id);
            const localVarPath = `/core/virtual-machines/{id}/stop`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * VirtualMachineApi - functional programming interface
 * @export
 */
export const VirtualMachineApiFp = function (configuration) {
    const localVarAxiosParamCreator = VirtualMachineApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a firewall rule for a virtual machine. Include the virtual machine ID in the path, and provide the firewall rule configuration in the request body, as detailed below. For additional information on firewall rules, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/core-resources/virtual-machines/vm-firewall-rules/add-firewall-rule-to-vm).
         * @summary Add firewall rule to virtual machine
         * @param {number} id
         * @param {CreateSecurityRulePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFirewallRuleToVirtualMachine(id, payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addFirewallRuleToVirtualMachine(id, payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VirtualMachineApi.addFirewallRuleToVirtualMachine']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Attach firewalls to a virtual machine by providing the virtual machine ID in the path and the IDs of the firewalls in the request body; any firewalls not included will be detached.
         * @summary Attach firewalls to a virtual machine
         * @param {number} vmId
         * @param {AttachFirewallsToVMPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachFirewallsToAVirtualMachine(vmId, payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.attachFirewallsToAVirtualMachine(vmId, payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VirtualMachineApi.attachFirewallsToAVirtualMachine']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Create snapshots of a virtual machine by providing the virtual machine ID in the path
         * @summary Create snapshot from a virtual machine
         * @param {number} vmId
         * @param {CreateSnapshotPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSnapshotFromAVirtualMachine(vmId, payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createSnapshotFromAVirtualMachine(vmId, payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VirtualMachineApi.createSnapshotFromAVirtualMachine']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Creates one or more virtual machines with the specified custom configuration and features provided in the request body. For more information about the virtual machine features offered by Infrahub, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/virtual-machine-features#create-a-virtual-machine-with-custom-features).
         * @summary Create virtual machines
         * @param {CreateInstancesPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVirtualMachines(payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createVirtualMachines(payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VirtualMachineApi.createVirtualMachines']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Deletes a firewall rule associated with a virtual machine. Provide the virtual machine ID and the firewall rule ID in the path to remove the specified rule from the specified virtual machine.
         * @summary Delete firewall rule from virtual machine
         * @param {number} virtualMachineId
         * @param {number} sgRuleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFirewallRuleFromVirtualMachine(virtualMachineId, sgRuleId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteFirewallRuleFromVirtualMachine(virtualMachineId, sgRuleId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VirtualMachineApi.deleteFirewallRuleFromVirtualMachine']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Permanently deletes a virtual machine. Provide the virtual machine ID in the path to delete the specified virtual machine.
         * @summary Delete virtual machine
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVirtualMachine(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteVirtualMachine(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VirtualMachineApi.deleteVirtualMachine']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Adds one or more labels to an existing virtual machine. Provide the virtual machine ID in the path to add labels to the specified VM. For multiple labels, add a space between each label in the request body.
         * @summary Edit virtual machine labels
         * @param {number} virtualMachineId
         * @param {EditlabelofanexistingVMPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editVirtualMachineLabels(virtualMachineId, payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.editVirtualMachineLabels(virtualMachineId, payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VirtualMachineApi.editVirtualMachineLabels']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Check if a Virtual Machine name is available
         * @summary Fetch virtual machine name availability
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVirtualMachineNameAvailability(name, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchVirtualMachineNameAvailability(name, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VirtualMachineApi.fetchVirtualMachineNameAvailability']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Initiates a hard reboot for a virtual machine, simulating the process of unplugging and rebooting a physical machine. Provide the virtual machine ID in the path to execute a hard reboot for the specified virtual machine.
         * @summary Hard reboot virtual machine
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hardRebootVirtualMachine(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.hardRebootVirtualMachine(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VirtualMachineApi.hardRebootVirtualMachine']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Initiates the hibernation of a virtual machine, saving its current state to disk before powering off. Provide the virtual machine ID in the path to specify the virtual machine to be hibernated.
         * @summary Hibernate virtual machine
         * @param {number} virtualMachineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hibernateVirtualMachine(virtualMachineId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.hibernateVirtualMachine(virtualMachineId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VirtualMachineApi.hibernateVirtualMachine']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Returns a list of your existing virtual machines, providing configuration details for each. The list is sorted by creation date, with the oldest virtual machines displayed first.
         * @summary List virtual machines
         * @param {string} [page] Page Number
         * @param {string} [pageSize] Data Per Page
         * @param {string} [search]
         * @param {string} [environment] Filter Environment ID or Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVirtualMachines(page, pageSize, search, environment, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listVirtualMachines(page, pageSize, search, environment, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VirtualMachineApi.listVirtualMachines']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Updates the hardware configuration for an existing virtual machine. Include the virtual machine ID in the path and provide the new configuration, referred to as a `flavor`, in the body of the request. For additional information resizing, [**click here**](https://infrahub-doc.nexgencloud.com/docs/hardware/flavors#modify-the-flavor-of-an-existing-virtual-machine).
         * @summary Resize virtual machine
         * @param {number} virtualMachineId
         * @param {InstanceResizePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resizeVirtualMachine(virtualMachineId, payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.resizeVirtualMachine(virtualMachineId, payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VirtualMachineApi.resizeVirtualMachine']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Resumes a virtual machine from hibernation, bringing it back to an active state. Provide the virtual machine ID in the path to specify the virtual machine to be restored from hibernation.
         * @summary Restore virtual machine from hibernation
         * @param {number} virtualMachineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreVirtualMachineFromHibernation(virtualMachineId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.restoreVirtualMachineFromHibernation(virtualMachineId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VirtualMachineApi.restoreVirtualMachineFromHibernation']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieves the details of an existing virtual machine. Provide the virtual machine ID in the path, and Infrahub will return information about the corresponding VM.
         * @summary Retrieve virtual machine details
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveVirtualMachineDetails(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveVirtualMachineDetails(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VirtualMachineApi.retrieveVirtualMachineDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieves performance metrics data for a virtual machine. Provide the virtual machine ID in the path to retrieve the following data for the specified virtual machine: CPU usage, memory usage (RAM), `network.in`, `network.out`, `disk.read`, and `disk.write`. The optional `duration` parameter can be used to specify the period for retrieving performance metrics; the default value will retrieve all available data. To learn more about virtual machine performance metrics, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/vm-performance-metrics-and-events-history#performance-metrics).
         * @summary Retrieve virtual machine performance metrics
         * @param {number} virtualMachineId
         * @param {RetrieveVirtualMachinePerformanceMetricsDurationEnum} [duration]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveVirtualMachinePerformanceMetrics(virtualMachineId, duration, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveVirtualMachinePerformanceMetrics(virtualMachineId, duration, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VirtualMachineApi.retrieveVirtualMachinePerformanceMetrics']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieves a list of virtual machines associated with a contract, providing details such as virtual machine name, timestamp, flavor name, and other relevant information. Please provide the ID of the relevant contract in the path.
         * @summary Retrieve virtual machines associated with a contract
         * @param {number} contractId
         * @param {string} [page] Page Number
         * @param {string} [pageSize] Data Per Page
         * @param {string} [search] Search By Instance ID or Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveVirtualMachinesAssociatedWithAContract(contractId, page, pageSize, search, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveVirtualMachinesAssociatedWithAContract(contractId, page, pageSize, search, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VirtualMachineApi.retrieveVirtualMachinesAssociatedWithAContract']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Initiates the startup of a virtual machine. Provide the virtual machine ID in the path to initiate the starting of the specified virtual machine.
         * @summary Start virtual machine
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startVirtualMachine(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.startVirtualMachine(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VirtualMachineApi.startVirtualMachine']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Shuts down a virtual machine. Provide the virtual machine ID in the path to initiate the shutdown process for the specified virtual machine.
         * @summary Stop virtual machine
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopVirtualMachine(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.stopVirtualMachine(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VirtualMachineApi.stopVirtualMachine']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * VirtualMachineApi - factory interface
 * @export
 */
export const VirtualMachineApiFactory = function (configuration, basePath, axios) {
    const localVarFp = VirtualMachineApiFp(configuration);
    return {
        /**
         * Creates a firewall rule for a virtual machine. Include the virtual machine ID in the path, and provide the firewall rule configuration in the request body, as detailed below. For additional information on firewall rules, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/core-resources/virtual-machines/vm-firewall-rules/add-firewall-rule-to-vm).
         * @summary Add firewall rule to virtual machine
         * @param {number} id
         * @param {CreateSecurityRulePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFirewallRuleToVirtualMachine(id, payload, options) {
            return localVarFp.addFirewallRuleToVirtualMachine(id, payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Attach firewalls to a virtual machine by providing the virtual machine ID in the path and the IDs of the firewalls in the request body; any firewalls not included will be detached.
         * @summary Attach firewalls to a virtual machine
         * @param {number} vmId
         * @param {AttachFirewallsToVMPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachFirewallsToAVirtualMachine(vmId, payload, options) {
            return localVarFp.attachFirewallsToAVirtualMachine(vmId, payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Create snapshots of a virtual machine by providing the virtual machine ID in the path
         * @summary Create snapshot from a virtual machine
         * @param {number} vmId
         * @param {CreateSnapshotPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSnapshotFromAVirtualMachine(vmId, payload, options) {
            return localVarFp.createSnapshotFromAVirtualMachine(vmId, payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates one or more virtual machines with the specified custom configuration and features provided in the request body. For more information about the virtual machine features offered by Infrahub, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/virtual-machine-features#create-a-virtual-machine-with-custom-features).
         * @summary Create virtual machines
         * @param {CreateInstancesPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVirtualMachines(payload, options) {
            return localVarFp.createVirtualMachines(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a firewall rule associated with a virtual machine. Provide the virtual machine ID and the firewall rule ID in the path to remove the specified rule from the specified virtual machine.
         * @summary Delete firewall rule from virtual machine
         * @param {number} virtualMachineId
         * @param {number} sgRuleId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFirewallRuleFromVirtualMachine(virtualMachineId, sgRuleId, options) {
            return localVarFp.deleteFirewallRuleFromVirtualMachine(virtualMachineId, sgRuleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Permanently deletes a virtual machine. Provide the virtual machine ID in the path to delete the specified virtual machine.
         * @summary Delete virtual machine
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVirtualMachine(id, options) {
            return localVarFp.deleteVirtualMachine(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds one or more labels to an existing virtual machine. Provide the virtual machine ID in the path to add labels to the specified VM. For multiple labels, add a space between each label in the request body.
         * @summary Edit virtual machine labels
         * @param {number} virtualMachineId
         * @param {EditlabelofanexistingVMPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editVirtualMachineLabels(virtualMachineId, payload, options) {
            return localVarFp.editVirtualMachineLabels(virtualMachineId, payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if a Virtual Machine name is available
         * @summary Fetch virtual machine name availability
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVirtualMachineNameAvailability(name, options) {
            return localVarFp.fetchVirtualMachineNameAvailability(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Initiates a hard reboot for a virtual machine, simulating the process of unplugging and rebooting a physical machine. Provide the virtual machine ID in the path to execute a hard reboot for the specified virtual machine.
         * @summary Hard reboot virtual machine
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hardRebootVirtualMachine(id, options) {
            return localVarFp.hardRebootVirtualMachine(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Initiates the hibernation of a virtual machine, saving its current state to disk before powering off. Provide the virtual machine ID in the path to specify the virtual machine to be hibernated.
         * @summary Hibernate virtual machine
         * @param {number} virtualMachineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hibernateVirtualMachine(virtualMachineId, options) {
            return localVarFp.hibernateVirtualMachine(virtualMachineId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of your existing virtual machines, providing configuration details for each. The list is sorted by creation date, with the oldest virtual machines displayed first.
         * @summary List virtual machines
         * @param {string} [page] Page Number
         * @param {string} [pageSize] Data Per Page
         * @param {string} [search]
         * @param {string} [environment] Filter Environment ID or Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVirtualMachines(page, pageSize, search, environment, options) {
            return localVarFp.listVirtualMachines(page, pageSize, search, environment, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the hardware configuration for an existing virtual machine. Include the virtual machine ID in the path and provide the new configuration, referred to as a `flavor`, in the body of the request. For additional information resizing, [**click here**](https://infrahub-doc.nexgencloud.com/docs/hardware/flavors#modify-the-flavor-of-an-existing-virtual-machine).
         * @summary Resize virtual machine
         * @param {number} virtualMachineId
         * @param {InstanceResizePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resizeVirtualMachine(virtualMachineId, payload, options) {
            return localVarFp.resizeVirtualMachine(virtualMachineId, payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Resumes a virtual machine from hibernation, bringing it back to an active state. Provide the virtual machine ID in the path to specify the virtual machine to be restored from hibernation.
         * @summary Restore virtual machine from hibernation
         * @param {number} virtualMachineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreVirtualMachineFromHibernation(virtualMachineId, options) {
            return localVarFp.restoreVirtualMachineFromHibernation(virtualMachineId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the details of an existing virtual machine. Provide the virtual machine ID in the path, and Infrahub will return information about the corresponding VM.
         * @summary Retrieve virtual machine details
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveVirtualMachineDetails(id, options) {
            return localVarFp.retrieveVirtualMachineDetails(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves performance metrics data for a virtual machine. Provide the virtual machine ID in the path to retrieve the following data for the specified virtual machine: CPU usage, memory usage (RAM), `network.in`, `network.out`, `disk.read`, and `disk.write`. The optional `duration` parameter can be used to specify the period for retrieving performance metrics; the default value will retrieve all available data. To learn more about virtual machine performance metrics, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/vm-performance-metrics-and-events-history#performance-metrics).
         * @summary Retrieve virtual machine performance metrics
         * @param {number} virtualMachineId
         * @param {RetrieveVirtualMachinePerformanceMetricsDurationEnum} [duration]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveVirtualMachinePerformanceMetrics(virtualMachineId, duration, options) {
            return localVarFp.retrieveVirtualMachinePerformanceMetrics(virtualMachineId, duration, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of virtual machines associated with a contract, providing details such as virtual machine name, timestamp, flavor name, and other relevant information. Please provide the ID of the relevant contract in the path.
         * @summary Retrieve virtual machines associated with a contract
         * @param {number} contractId
         * @param {string} [page] Page Number
         * @param {string} [pageSize] Data Per Page
         * @param {string} [search] Search By Instance ID or Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveVirtualMachinesAssociatedWithAContract(contractId, page, pageSize, search, options) {
            return localVarFp.retrieveVirtualMachinesAssociatedWithAContract(contractId, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Initiates the startup of a virtual machine. Provide the virtual machine ID in the path to initiate the starting of the specified virtual machine.
         * @summary Start virtual machine
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startVirtualMachine(id, options) {
            return localVarFp.startVirtualMachine(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Shuts down a virtual machine. Provide the virtual machine ID in the path to initiate the shutdown process for the specified virtual machine.
         * @summary Stop virtual machine
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopVirtualMachine(id, options) {
            return localVarFp.stopVirtualMachine(id, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * VirtualMachineApi - object-oriented interface
 * @export
 * @class VirtualMachineApi
 * @extends {BaseAPI}
 */
export class VirtualMachineApi extends BaseAPI {
    /**
     * Creates a firewall rule for a virtual machine. Include the virtual machine ID in the path, and provide the firewall rule configuration in the request body, as detailed below. For additional information on firewall rules, [**click here**](https://infrahub-doc.nexgencloud.com/docs/api-reference/core-resources/virtual-machines/vm-firewall-rules/add-firewall-rule-to-vm).
     * @summary Add firewall rule to virtual machine
     * @param {number} id
     * @param {CreateSecurityRulePayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualMachineApi
     */
    addFirewallRuleToVirtualMachine(id, payload, options) {
        return VirtualMachineApiFp(this.configuration).addFirewallRuleToVirtualMachine(id, payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Attach firewalls to a virtual machine by providing the virtual machine ID in the path and the IDs of the firewalls in the request body; any firewalls not included will be detached.
     * @summary Attach firewalls to a virtual machine
     * @param {number} vmId
     * @param {AttachFirewallsToVMPayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualMachineApi
     */
    attachFirewallsToAVirtualMachine(vmId, payload, options) {
        return VirtualMachineApiFp(this.configuration).attachFirewallsToAVirtualMachine(vmId, payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create snapshots of a virtual machine by providing the virtual machine ID in the path
     * @summary Create snapshot from a virtual machine
     * @param {number} vmId
     * @param {CreateSnapshotPayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualMachineApi
     */
    createSnapshotFromAVirtualMachine(vmId, payload, options) {
        return VirtualMachineApiFp(this.configuration).createSnapshotFromAVirtualMachine(vmId, payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates one or more virtual machines with the specified custom configuration and features provided in the request body. For more information about the virtual machine features offered by Infrahub, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/virtual-machine-features#create-a-virtual-machine-with-custom-features).
     * @summary Create virtual machines
     * @param {CreateInstancesPayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualMachineApi
     */
    createVirtualMachines(payload, options) {
        return VirtualMachineApiFp(this.configuration).createVirtualMachines(payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a firewall rule associated with a virtual machine. Provide the virtual machine ID and the firewall rule ID in the path to remove the specified rule from the specified virtual machine.
     * @summary Delete firewall rule from virtual machine
     * @param {number} virtualMachineId
     * @param {number} sgRuleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualMachineApi
     */
    deleteFirewallRuleFromVirtualMachine(virtualMachineId, sgRuleId, options) {
        return VirtualMachineApiFp(this.configuration).deleteFirewallRuleFromVirtualMachine(virtualMachineId, sgRuleId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Permanently deletes a virtual machine. Provide the virtual machine ID in the path to delete the specified virtual machine.
     * @summary Delete virtual machine
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualMachineApi
     */
    deleteVirtualMachine(id, options) {
        return VirtualMachineApiFp(this.configuration).deleteVirtualMachine(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Adds one or more labels to an existing virtual machine. Provide the virtual machine ID in the path to add labels to the specified VM. For multiple labels, add a space between each label in the request body.
     * @summary Edit virtual machine labels
     * @param {number} virtualMachineId
     * @param {EditlabelofanexistingVMPayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualMachineApi
     */
    editVirtualMachineLabels(virtualMachineId, payload, options) {
        return VirtualMachineApiFp(this.configuration).editVirtualMachineLabels(virtualMachineId, payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Check if a Virtual Machine name is available
     * @summary Fetch virtual machine name availability
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualMachineApi
     */
    fetchVirtualMachineNameAvailability(name, options) {
        return VirtualMachineApiFp(this.configuration).fetchVirtualMachineNameAvailability(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Initiates a hard reboot for a virtual machine, simulating the process of unplugging and rebooting a physical machine. Provide the virtual machine ID in the path to execute a hard reboot for the specified virtual machine.
     * @summary Hard reboot virtual machine
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualMachineApi
     */
    hardRebootVirtualMachine(id, options) {
        return VirtualMachineApiFp(this.configuration).hardRebootVirtualMachine(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Initiates the hibernation of a virtual machine, saving its current state to disk before powering off. Provide the virtual machine ID in the path to specify the virtual machine to be hibernated.
     * @summary Hibernate virtual machine
     * @param {number} virtualMachineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualMachineApi
     */
    hibernateVirtualMachine(virtualMachineId, options) {
        return VirtualMachineApiFp(this.configuration).hibernateVirtualMachine(virtualMachineId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of your existing virtual machines, providing configuration details for each. The list is sorted by creation date, with the oldest virtual machines displayed first.
     * @summary List virtual machines
     * @param {string} [page] Page Number
     * @param {string} [pageSize] Data Per Page
     * @param {string} [search]
     * @param {string} [environment] Filter Environment ID or Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualMachineApi
     */
    listVirtualMachines(page, pageSize, search, environment, options) {
        return VirtualMachineApiFp(this.configuration).listVirtualMachines(page, pageSize, search, environment, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates the hardware configuration for an existing virtual machine. Include the virtual machine ID in the path and provide the new configuration, referred to as a `flavor`, in the body of the request. For additional information resizing, [**click here**](https://infrahub-doc.nexgencloud.com/docs/hardware/flavors#modify-the-flavor-of-an-existing-virtual-machine).
     * @summary Resize virtual machine
     * @param {number} virtualMachineId
     * @param {InstanceResizePayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualMachineApi
     */
    resizeVirtualMachine(virtualMachineId, payload, options) {
        return VirtualMachineApiFp(this.configuration).resizeVirtualMachine(virtualMachineId, payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Resumes a virtual machine from hibernation, bringing it back to an active state. Provide the virtual machine ID in the path to specify the virtual machine to be restored from hibernation.
     * @summary Restore virtual machine from hibernation
     * @param {number} virtualMachineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualMachineApi
     */
    restoreVirtualMachineFromHibernation(virtualMachineId, options) {
        return VirtualMachineApiFp(this.configuration).restoreVirtualMachineFromHibernation(virtualMachineId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the details of an existing virtual machine. Provide the virtual machine ID in the path, and Infrahub will return information about the corresponding VM.
     * @summary Retrieve virtual machine details
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualMachineApi
     */
    retrieveVirtualMachineDetails(id, options) {
        return VirtualMachineApiFp(this.configuration).retrieveVirtualMachineDetails(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves performance metrics data for a virtual machine. Provide the virtual machine ID in the path to retrieve the following data for the specified virtual machine: CPU usage, memory usage (RAM), `network.in`, `network.out`, `disk.read`, and `disk.write`. The optional `duration` parameter can be used to specify the period for retrieving performance metrics; the default value will retrieve all available data. To learn more about virtual machine performance metrics, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/vm-performance-metrics-and-events-history#performance-metrics).
     * @summary Retrieve virtual machine performance metrics
     * @param {number} virtualMachineId
     * @param {RetrieveVirtualMachinePerformanceMetricsDurationEnum} [duration]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualMachineApi
     */
    retrieveVirtualMachinePerformanceMetrics(virtualMachineId, duration, options) {
        return VirtualMachineApiFp(this.configuration).retrieveVirtualMachinePerformanceMetrics(virtualMachineId, duration, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of virtual machines associated with a contract, providing details such as virtual machine name, timestamp, flavor name, and other relevant information. Please provide the ID of the relevant contract in the path.
     * @summary Retrieve virtual machines associated with a contract
     * @param {number} contractId
     * @param {string} [page] Page Number
     * @param {string} [pageSize] Data Per Page
     * @param {string} [search] Search By Instance ID or Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualMachineApi
     */
    retrieveVirtualMachinesAssociatedWithAContract(contractId, page, pageSize, search, options) {
        return VirtualMachineApiFp(this.configuration).retrieveVirtualMachinesAssociatedWithAContract(contractId, page, pageSize, search, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Initiates the startup of a virtual machine. Provide the virtual machine ID in the path to initiate the starting of the specified virtual machine.
     * @summary Start virtual machine
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualMachineApi
     */
    startVirtualMachine(id, options) {
        return VirtualMachineApiFp(this.configuration).startVirtualMachine(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Shuts down a virtual machine. Provide the virtual machine ID in the path to initiate the shutdown process for the specified virtual machine.
     * @summary Stop virtual machine
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualMachineApi
     */
    stopVirtualMachine(id, options) {
        return VirtualMachineApiFp(this.configuration).stopVirtualMachine(id, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * @export
 */
export const RetrieveVirtualMachinePerformanceMetricsDurationEnum = {
    _1h: '1h',
    _2h: '2h',
    _4h: '4h',
    _6h: '6h',
    _12h: '12h',
    _1d: '1d',
    _3d: '3d',
    _7d: '7d',
    _15d: '15d',
    _30d: '30d'
};
/**
 * VirtualMachineEventsApi - axios parameter creator
 * @export
 */
export const VirtualMachineEventsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Retrieves a list of all events in a virtual machine\'s history, which records actions performed on the specified virtual machine. Include the virtual machine ID in the path to retrieve the history of events. For more details on virtual machine events history, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/vm-performance-metrics-and-events-history#events-history).
         * @summary List virtual machine events
         * @param {string} virtualMachineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVirtualMachineEvents: (virtualMachineId_1, ...args_1) => __awaiter(this, [virtualMachineId_1, ...args_1], void 0, function* (virtualMachineId, options = {}) {
            // verify required parameter 'virtualMachineId' is not null or undefined
            assertParamExists('listVirtualMachineEvents', 'virtualMachineId', virtualMachineId);
            const localVarPath = `/core/virtual-machines/{virtual_machine_id}/events`
                .replace(`{${"virtual_machine_id"}}`, encodeURIComponent(String(virtualMachineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * VirtualMachineEventsApi - functional programming interface
 * @export
 */
export const VirtualMachineEventsApiFp = function (configuration) {
    const localVarAxiosParamCreator = VirtualMachineEventsApiAxiosParamCreator(configuration);
    return {
        /**
         * Retrieves a list of all events in a virtual machine\'s history, which records actions performed on the specified virtual machine. Include the virtual machine ID in the path to retrieve the history of events. For more details on virtual machine events history, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/vm-performance-metrics-and-events-history#events-history).
         * @summary List virtual machine events
         * @param {string} virtualMachineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVirtualMachineEvents(virtualMachineId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listVirtualMachineEvents(virtualMachineId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VirtualMachineEventsApi.listVirtualMachineEvents']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * VirtualMachineEventsApi - factory interface
 * @export
 */
export const VirtualMachineEventsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = VirtualMachineEventsApiFp(configuration);
    return {
        /**
         * Retrieves a list of all events in a virtual machine\'s history, which records actions performed on the specified virtual machine. Include the virtual machine ID in the path to retrieve the history of events. For more details on virtual machine events history, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/vm-performance-metrics-and-events-history#events-history).
         * @summary List virtual machine events
         * @param {string} virtualMachineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVirtualMachineEvents(virtualMachineId, options) {
            return localVarFp.listVirtualMachineEvents(virtualMachineId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * VirtualMachineEventsApi - object-oriented interface
 * @export
 * @class VirtualMachineEventsApi
 * @extends {BaseAPI}
 */
export class VirtualMachineEventsApi extends BaseAPI {
    /**
     * Retrieves a list of all events in a virtual machine\'s history, which records actions performed on the specified virtual machine. Include the virtual machine ID in the path to retrieve the history of events. For more details on virtual machine events history, [**click here**](https://infrahub-doc.nexgencloud.com/docs/virtual-machines/vm-performance-metrics-and-events-history#events-history).
     * @summary List virtual machine events
     * @param {string} virtualMachineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualMachineEventsApi
     */
    listVirtualMachineEvents(virtualMachineId, options) {
        return VirtualMachineEventsApiFp(this.configuration).listVirtualMachineEvents(virtualMachineId, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * VncUrlApi - axios parameter creator
 * @export
 */
export const VncUrlApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get VNC Console Link
         * @param {number} virtualMachineId
         * @param {number} jobId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVncConsoleLink: (virtualMachineId_1, jobId_1, ...args_1) => __awaiter(this, [virtualMachineId_1, jobId_1, ...args_1], void 0, function* (virtualMachineId, jobId, options = {}) {
            // verify required parameter 'virtualMachineId' is not null or undefined
            assertParamExists('getVncConsoleLink', 'virtualMachineId', virtualMachineId);
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('getVncConsoleLink', 'jobId', jobId);
            const localVarPath = `/core/virtual-machines/{virtual_machine_id}/console/{job_id}`
                .replace(`{${"virtual_machine_id"}}`, encodeURIComponent(String(virtualMachineId)))
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Request Instance Console
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestInstanceConsole: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('requestInstanceConsole', 'id', id);
            const localVarPath = `/core/virtual-machines/{id}/request-console`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * VncUrlApi - functional programming interface
 * @export
 */
export const VncUrlApiFp = function (configuration) {
    const localVarAxiosParamCreator = VncUrlApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Get VNC Console Link
         * @param {number} virtualMachineId
         * @param {number} jobId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVncConsoleLink(virtualMachineId, jobId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getVncConsoleLink(virtualMachineId, jobId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VncUrlApi.getVncConsoleLink']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         *
         * @summary Request Instance Console
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestInstanceConsole(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.requestInstanceConsole(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VncUrlApi.requestInstanceConsole']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * VncUrlApi - factory interface
 * @export
 */
export const VncUrlApiFactory = function (configuration, basePath, axios) {
    const localVarFp = VncUrlApiFp(configuration);
    return {
        /**
         *
         * @summary Get VNC Console Link
         * @param {number} virtualMachineId
         * @param {number} jobId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVncConsoleLink(virtualMachineId, jobId, options) {
            return localVarFp.getVncConsoleLink(virtualMachineId, jobId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Request Instance Console
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestInstanceConsole(id, options) {
            return localVarFp.requestInstanceConsole(id, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * VncUrlApi - object-oriented interface
 * @export
 * @class VncUrlApi
 * @extends {BaseAPI}
 */
export class VncUrlApi extends BaseAPI {
    /**
     *
     * @summary Get VNC Console Link
     * @param {number} virtualMachineId
     * @param {number} jobId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VncUrlApi
     */
    getVncConsoleLink(virtualMachineId, jobId, options) {
        return VncUrlApiFp(this.configuration).getVncConsoleLink(virtualMachineId, jobId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Request Instance Console
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VncUrlApi
     */
    requestInstanceConsole(id, options) {
        return VncUrlApiFp(this.configuration).requestInstanceConsole(id, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * VolumeApi - axios parameter creator
 * @export
 */
export const VolumeApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Creates a volume that can be attached to a virtual machine, expanding its storage capacity. Specify the volume type and custom configuration in the request body. For additional details on volumes, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/volumes-available-features).
         * @summary Create volume
         * @param {CreateVolumePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVolume: (payload_1, ...args_1) => __awaiter(this, [payload_1, ...args_1], void 0, function* (payload, options = {}) {
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('createVolume', 'payload', payload);
            const localVarPath = `/core/volumes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Deletes a volume permanently. Provide the volume ID in the path to specify the volume to be deleted.
         * @summary Delete volume
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVolume: (id_1, ...args_1) => __awaiter(this, [id_1, ...args_1], void 0, function* (id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteVolume', 'id', id);
            const localVarPath = `/core/volumes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Fetch volume details for specific volume. This endpoint returns id, name, volume size, volume type, status, description, image_id, os_image, created_at, updated_at etc.
         * @summary Fetch Volume Details
         * @param {number} volumeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVolumeDetails: (volumeId_1, ...args_1) => __awaiter(this, [volumeId_1, ...args_1], void 0, function* (volumeId, options = {}) {
            // verify required parameter 'volumeId' is not null or undefined
            assertParamExists('fetchVolumeDetails', 'volumeId', volumeId);
            const localVarPath = `/core/volume/{volume_id}`
                .replace(`{${"volume_id"}}`, encodeURIComponent(String(volumeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Check if a Volume name is available
         * @summary Fetch volume name availability
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVolumeNameAvailability: (name_1, ...args_1) => __awaiter(this, [name_1, ...args_1], void 0, function* (name, options = {}) {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('fetchVolumeNameAvailability', 'name', name);
            const localVarPath = `/core/volume/name-availability/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Retrieves a list of available volume types that can be used in the creation of a new volume.
         * @summary List volume types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeTypes: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/core/volume-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Returns a list of your existing volumes, providing details for each. For more information on volumes, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/volumes-available-features).
         * @summary List volumes
         * @param {string} [page] Page Number
         * @param {string} [pageSize] Data Per Page
         * @param {string} [search]
         * @param {string} [environment] Filter Environment ID or Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumes: (page_1, pageSize_1, search_1, environment_1, ...args_1) => __awaiter(this, [page_1, pageSize_1, search_1, environment_1, ...args_1], void 0, function* (page, pageSize, search, environment, options = {}) {
            const localVarPath = `/core/volumes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (environment !== undefined) {
                localVarQueryParameter['environment'] = environment;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * VolumeApi - functional programming interface
 * @export
 */
export const VolumeApiFp = function (configuration) {
    const localVarAxiosParamCreator = VolumeApiAxiosParamCreator(configuration);
    return {
        /**
         * Creates a volume that can be attached to a virtual machine, expanding its storage capacity. Specify the volume type and custom configuration in the request body. For additional details on volumes, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/volumes-available-features).
         * @summary Create volume
         * @param {CreateVolumePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVolume(payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createVolume(payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VolumeApi.createVolume']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Deletes a volume permanently. Provide the volume ID in the path to specify the volume to be deleted.
         * @summary Delete volume
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVolume(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteVolume(id, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VolumeApi.deleteVolume']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Fetch volume details for specific volume. This endpoint returns id, name, volume size, volume type, status, description, image_id, os_image, created_at, updated_at etc.
         * @summary Fetch Volume Details
         * @param {number} volumeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVolumeDetails(volumeId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchVolumeDetails(volumeId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VolumeApi.fetchVolumeDetails']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Check if a Volume name is available
         * @summary Fetch volume name availability
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVolumeNameAvailability(name, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchVolumeNameAvailability(name, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VolumeApi.fetchVolumeNameAvailability']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Retrieves a list of available volume types that can be used in the creation of a new volume.
         * @summary List volume types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeTypes(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listVolumeTypes(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VolumeApi.listVolumeTypes']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Returns a list of your existing volumes, providing details for each. For more information on volumes, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/volumes-available-features).
         * @summary List volumes
         * @param {string} [page] Page Number
         * @param {string} [pageSize] Data Per Page
         * @param {string} [search]
         * @param {string} [environment] Filter Environment ID or Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumes(page, pageSize, search, environment, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listVolumes(page, pageSize, search, environment, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VolumeApi.listVolumes']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * VolumeApi - factory interface
 * @export
 */
export const VolumeApiFactory = function (configuration, basePath, axios) {
    const localVarFp = VolumeApiFp(configuration);
    return {
        /**
         * Creates a volume that can be attached to a virtual machine, expanding its storage capacity. Specify the volume type and custom configuration in the request body. For additional details on volumes, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/volumes-available-features).
         * @summary Create volume
         * @param {CreateVolumePayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVolume(payload, options) {
            return localVarFp.createVolume(payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a volume permanently. Provide the volume ID in the path to specify the volume to be deleted.
         * @summary Delete volume
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVolume(id, options) {
            return localVarFp.deleteVolume(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch volume details for specific volume. This endpoint returns id, name, volume size, volume type, status, description, image_id, os_image, created_at, updated_at etc.
         * @summary Fetch Volume Details
         * @param {number} volumeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVolumeDetails(volumeId, options) {
            return localVarFp.fetchVolumeDetails(volumeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if a Volume name is available
         * @summary Fetch volume name availability
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVolumeNameAvailability(name, options) {
            return localVarFp.fetchVolumeNameAvailability(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of available volume types that can be used in the creation of a new volume.
         * @summary List volume types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeTypes(options) {
            return localVarFp.listVolumeTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of your existing volumes, providing details for each. For more information on volumes, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/volumes-available-features).
         * @summary List volumes
         * @param {string} [page] Page Number
         * @param {string} [pageSize] Data Per Page
         * @param {string} [search]
         * @param {string} [environment] Filter Environment ID or Name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumes(page, pageSize, search, environment, options) {
            return localVarFp.listVolumes(page, pageSize, search, environment, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * VolumeApi - object-oriented interface
 * @export
 * @class VolumeApi
 * @extends {BaseAPI}
 */
export class VolumeApi extends BaseAPI {
    /**
     * Creates a volume that can be attached to a virtual machine, expanding its storage capacity. Specify the volume type and custom configuration in the request body. For additional details on volumes, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/volumes-available-features).
     * @summary Create volume
     * @param {CreateVolumePayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeApi
     */
    createVolume(payload, options) {
        return VolumeApiFp(this.configuration).createVolume(payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a volume permanently. Provide the volume ID in the path to specify the volume to be deleted.
     * @summary Delete volume
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeApi
     */
    deleteVolume(id, options) {
        return VolumeApiFp(this.configuration).deleteVolume(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch volume details for specific volume. This endpoint returns id, name, volume size, volume type, status, description, image_id, os_image, created_at, updated_at etc.
     * @summary Fetch Volume Details
     * @param {number} volumeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeApi
     */
    fetchVolumeDetails(volumeId, options) {
        return VolumeApiFp(this.configuration).fetchVolumeDetails(volumeId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Check if a Volume name is available
     * @summary Fetch volume name availability
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeApi
     */
    fetchVolumeNameAvailability(name, options) {
        return VolumeApiFp(this.configuration).fetchVolumeNameAvailability(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of available volume types that can be used in the creation of a new volume.
     * @summary List volume types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeApi
     */
    listVolumeTypes(options) {
        return VolumeApiFp(this.configuration).listVolumeTypes(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of your existing volumes, providing details for each. For more information on volumes, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/volumes-available-features).
     * @summary List volumes
     * @param {string} [page] Page Number
     * @param {string} [pageSize] Data Per Page
     * @param {string} [search]
     * @param {string} [environment] Filter Environment ID or Name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeApi
     */
    listVolumes(page, pageSize, search, environment, options) {
        return VolumeApiFp(this.configuration).listVolumes(page, pageSize, search, environment, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * VolumeAttachmentApi - axios parameter creator
 * @export
 */
export const VolumeAttachmentApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Attaches one or more volumes to an existing virtual machine, expanding its storage capacity by 2PB per attached volume. Include the virtual machine ID in the path and the volume IDs in the request body to attach the specified volumes to the designated virtual machine. For additional details on volume attachment, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/volumes-available-features#attach-a-volume-to-a-virtual-machine-1).
         * @summary Attach volumes to virtual machine
         * @param {number} virtualMachineId
         * @param {AttachVolumesPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachVolumesToVirtualMachine: (virtualMachineId_1, payload_1, ...args_1) => __awaiter(this, [virtualMachineId_1, payload_1, ...args_1], void 0, function* (virtualMachineId, payload, options = {}) {
            // verify required parameter 'virtualMachineId' is not null or undefined
            assertParamExists('attachVolumesToVirtualMachine', 'virtualMachineId', virtualMachineId);
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('attachVolumesToVirtualMachine', 'payload', payload);
            const localVarPath = `/core/virtual-machines/{virtual_machine_id}/attach-volumes`
                .replace(`{${"virtual_machine_id"}}`, encodeURIComponent(String(virtualMachineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Detaches one or more volumes currently attached to an existing virtual machine. Include the virtual machine ID in the path and the volume IDs in the request body to detach the specified volumes from the designated virtual machine.
         * @summary Detach volumes from virtual machine
         * @param {number} virtualMachineId
         * @param {DetachVolumesPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detachVolumesFromVirtualMachine: (virtualMachineId_1, payload_1, ...args_1) => __awaiter(this, [virtualMachineId_1, payload_1, ...args_1], void 0, function* (virtualMachineId, payload, options = {}) {
            // verify required parameter 'virtualMachineId' is not null or undefined
            assertParamExists('detachVolumesFromVirtualMachine', 'virtualMachineId', virtualMachineId);
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('detachVolumesFromVirtualMachine', 'payload', payload);
            const localVarPath = `/core/virtual-machines/{virtual_machine_id}/detach-volumes`
                .replace(`{${"virtual_machine_id"}}`, encodeURIComponent(String(virtualMachineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication apiKey required
            yield setApiKeyToObject(localVarHeaderParameter, "api_key", configuration);
            // authentication accessToken required
            yield setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * VolumeAttachmentApi - functional programming interface
 * @export
 */
export const VolumeAttachmentApiFp = function (configuration) {
    const localVarAxiosParamCreator = VolumeAttachmentApiAxiosParamCreator(configuration);
    return {
        /**
         * Attaches one or more volumes to an existing virtual machine, expanding its storage capacity by 2PB per attached volume. Include the virtual machine ID in the path and the volume IDs in the request body to attach the specified volumes to the designated virtual machine. For additional details on volume attachment, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/volumes-available-features#attach-a-volume-to-a-virtual-machine-1).
         * @summary Attach volumes to virtual machine
         * @param {number} virtualMachineId
         * @param {AttachVolumesPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachVolumesToVirtualMachine(virtualMachineId, payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.attachVolumesToVirtualMachine(virtualMachineId, payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VolumeAttachmentApi.attachVolumesToVirtualMachine']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Detaches one or more volumes currently attached to an existing virtual machine. Include the virtual machine ID in the path and the volume IDs in the request body to detach the specified volumes from the designated virtual machine.
         * @summary Detach volumes from virtual machine
         * @param {number} virtualMachineId
         * @param {DetachVolumesPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detachVolumesFromVirtualMachine(virtualMachineId, payload, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.detachVolumesFromVirtualMachine(virtualMachineId, payload, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['VolumeAttachmentApi.detachVolumesFromVirtualMachine']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * VolumeAttachmentApi - factory interface
 * @export
 */
export const VolumeAttachmentApiFactory = function (configuration, basePath, axios) {
    const localVarFp = VolumeAttachmentApiFp(configuration);
    return {
        /**
         * Attaches one or more volumes to an existing virtual machine, expanding its storage capacity by 2PB per attached volume. Include the virtual machine ID in the path and the volume IDs in the request body to attach the specified volumes to the designated virtual machine. For additional details on volume attachment, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/volumes-available-features#attach-a-volume-to-a-virtual-machine-1).
         * @summary Attach volumes to virtual machine
         * @param {number} virtualMachineId
         * @param {AttachVolumesPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachVolumesToVirtualMachine(virtualMachineId, payload, options) {
            return localVarFp.attachVolumesToVirtualMachine(virtualMachineId, payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Detaches one or more volumes currently attached to an existing virtual machine. Include the virtual machine ID in the path and the volume IDs in the request body to detach the specified volumes from the designated virtual machine.
         * @summary Detach volumes from virtual machine
         * @param {number} virtualMachineId
         * @param {DetachVolumesPayload} payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detachVolumesFromVirtualMachine(virtualMachineId, payload, options) {
            return localVarFp.detachVolumesFromVirtualMachine(virtualMachineId, payload, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * VolumeAttachmentApi - object-oriented interface
 * @export
 * @class VolumeAttachmentApi
 * @extends {BaseAPI}
 */
export class VolumeAttachmentApi extends BaseAPI {
    /**
     * Attaches one or more volumes to an existing virtual machine, expanding its storage capacity by 2PB per attached volume. Include the virtual machine ID in the path and the volume IDs in the request body to attach the specified volumes to the designated virtual machine. For additional details on volume attachment, [**click here**](https://infrahub-doc.nexgencloud.com/docs/features/volumes-available-features#attach-a-volume-to-a-virtual-machine-1).
     * @summary Attach volumes to virtual machine
     * @param {number} virtualMachineId
     * @param {AttachVolumesPayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeAttachmentApi
     */
    attachVolumesToVirtualMachine(virtualMachineId, payload, options) {
        return VolumeAttachmentApiFp(this.configuration).attachVolumesToVirtualMachine(virtualMachineId, payload, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Detaches one or more volumes currently attached to an existing virtual machine. Include the virtual machine ID in the path and the volume IDs in the request body to detach the specified volumes from the designated virtual machine.
     * @summary Detach volumes from virtual machine
     * @param {number} virtualMachineId
     * @param {DetachVolumesPayload} payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeAttachmentApi
     */
    detachVolumesFromVirtualMachine(virtualMachineId, payload, options) {
        return VolumeAttachmentApiFp(this.configuration).detachVolumesFromVirtualMachine(virtualMachineId, payload, options).then((request) => request(this.axios, this.basePath));
    }
}
